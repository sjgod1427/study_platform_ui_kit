[{"id":null,"role":"user","parts":[{"id":null,"text":"You’re Pixel, an expert assistant in building beautiful Flutter UI screens. Your advantage lies in having access to a UIKit with components and screens in the user's chosen style that are tested to be pixel-perfect.\n\nYou identify required UIKit elements based on users instructions, and use them in users projects to meet their requirements. You only assist with creating the UI and don't engage in building functionality for the user (like integrating APIs, Firebase etc).\n\nGenerate all the UI elements beautifully, following the theme and style of the components and screens in the UIKIT. Generously request more than required template files to view so you fully understand the UIKit style and theme and implement similarly in users codebase. If no components/screens is matching directly, try you best to create a great looking UI meeting the users style. You are allowed to think deeply and take as much time as you need to make sure the end result is world-class.\n\n- For placeholder images, strictly use https://picsum.photos/{width}/{height}\n\nYour normal prose and thoughts won't be displayed to the user, so feel free to take your time to think. \n\nMake sure that the user sees the screen once the code is run. To ensure this, make sure to edit the entry point of the app (usually main.dart) to point to the screen. There is a programatic client supporting below actions with their pre-defined formats that you shall use to perform changes into the users codebase and/or share information. The client also automatically runs or refreshes their app once the changes are made.\n\n1. To make code edits in the users codebase:\n<<<PIXEL_FILE_PATH>>>\nlib/Screens/image_generator_screen.dart **// IMPORTANT: This is an EXAMPLE path. You MUST replace this with the correct, relevant file path derived from the user's request (e.g., `lib/screens/login_screen.dart` if the user asks for a login screen).**\n<<<PIXEL_CODE_START>>>\nentire file code\n<<<PIXEL_CODE_END>>>\nMake sure the file path is relative and the entire code to be replaced in file is included.\n\n2. To install pub dependencies:\n<<<PIXEL_PUB_INSTALL_START>>>\ndependency_name\n<<<PIXEL_PUB_INSTALL_END>>>\n\nOnly include a single dependency at a time, for instance:\n<<<PIXEL_PUB_INSTALL_START>>>\ngoogle_fonts\n<<<PIXEL_PUB_INSTALL_END>>>\n\n3. To relay important information, questions or clarifications to user:\n<<<PIXEL_USER_INFORM_START>>>\nyour message to be shown to user\n<<<PIXEL_USER_INFORM_END>>>\n\n4. To request viewing a single UI template file\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\npath of file\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\nTo view multiple files, add multiple such statements. Stop after you've requested all the files, the client will provide you the files in the next message.\n\n\nAll of these formats are parsed using Regex and programatically executed at the users end, so you should strictly stick to the above formats."}]},{"id":null,"role":"user","parts":[{"id":null,"text":""},{"id":null,"text":"User Instructions: build a screen full of animations named test.dart for this project"},{"id":"codebase","text":"Here is the current state of the user’s codebase:\n\n--- Project Context (38 files read) ---\n\n// File: pubspec.yaml\n```yaml\nname: canwa\r\ndescription: \"A new Flutter project.\"\r\n# The following line prevents the package from being accidentally published to\r\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\r\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\r\n\r\n# The following defines the version and build number for your application.\r\n# A version number is three numbers separated by dots, like 1.2.43\r\n# followed by an optional build number separated by a +.\r\n# Both the version and the builder number may be overridden in flutter\r\n# build by specifying --build-name and --build-number, respectively.\r\n# In Android, build-name is used as versionName while build-number used as versionCode.\r\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\r\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\r\n# Read more about iOS versioning at\r\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\r\n# In Windows, build-name is used as the major, minor, and patch parts\r\n# of the product and file versions while build-number is used as the build suffix.\r\nversion: 1.0.0+1\r\n\r\nenvironment:\r\n  sdk: ^3.7.2\r\n\r\n# Dependencies specify other packages that your package needs in order to work.\r\n# To automatically upgrade your package dependencies to the latest versions\r\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\r\n# dependencies can be manually updated by changing the version numbers below to\r\n# the latest version available on pub.dev. To see which dependencies have newer\r\n# versions available, run `flutter pub outdated`.\r\ndependencies:\r\n  flutter:\r\n    sdk: flutter\r\n\r\n  # The following adds the Cupertino Icons font to your application.\r\n  # Use with the CupertinoIcons class for iOS style icons.\r\n  cupertino_icons: ^1.0.8\r\n  pixel_preview:\r\n    git:\r\n      url: https://github.com/samyakkkk/pixel_preview.git\r\n      ref: pixel-app\r\n  font_awesome_flutter: ^10.8.0\r\n  google_fonts: ^6.2.1\r\n  flutter_svg: ^2.1.0\r\n\r\ndev_dependencies:\r\n  flutter_test:\r\n    sdk: flutter\r\n\r\n  # The \"flutter_lints\" package below contains a set of recommended lints to\r\n  # encourage good coding practices. The lint set provided by the package is\r\n  # activated in the `analysis_options.yaml` file located at the root of your\r\n  # package. See that file for information about deactivating specific lint\r\n  # rules and activating additional ones.\r\n  flutter_lints: ^5.0.0\r\n\r\n# For information on the generic Dart part of this file, see the\r\n# following page: https://dart.dev/tools/pub/pubspec\r\n\r\n# The following section is specific to Flutter packages.\r\nflutter:\r\n\r\n  # The following line ensures that the Material Icons font is\r\n  # included with your application, so that you can use the icons in\r\n  # the material Icons class.\r\n  uses-material-design: true\r\n\r\n  # To add assets to your application, add an assets section, like this:\r\n  # assets:\r\n  #   - images/a_dot_burr.jpeg\r\n  #   - images/a_dot_ham.jpeg\r\n\r\n  # An image asset can refer to one or more resolution-specific \"variants\", see\r\n  # https://flutter.dev/to/resolution-aware-images\r\n\r\n  # For details regarding adding assets from package dependencies, see\r\n  # https://flutter.dev/to/asset-from-package\r\n\r\n  # To add custom fonts to your application, add a fonts section here,\r\n  # in this \"flutter\" section. Each entry in this list should have a\r\n  # \"family\" key with the font family name, and a \"fonts\" key with a\r\n  # list giving the asset and other descriptors for the font. For\r\n  # example:\r\n  # fonts:\r\n  #   - family: Schyler\r\n  #     fonts:\r\n  #       - asset: fonts/Schyler-Regular.ttf\r\n  #       - asset: fonts/Schyler-Italic.ttf\r\n  #         style: italic\r\n  #   - family: Trajan Pro\r\n  #     fonts:\r\n  #       - asset: fonts/TrajanPro.ttf\r\n  #       - asset: fonts/TrajanPro_Bold.ttf\r\n  #         weight: 700\r\n  #\r\n  # For details regarding fonts from package dependencies,\r\n  # see https://flutter.dev/to/font-from-package\n```\n\n// File: lib\\main.dart\n```dart\nimport 'package:canwa/Screens/add_new_card_screen.dart';\r\nimport 'package:canwa/Screens/add_question_screen.dart';\r\nimport 'package:canwa/Screens/checkout_screen.dart';\r\n\r\nimport 'package:canwa/Screens/continue_learning_screen.dart';\r\nimport 'package:canwa/Screens/course_detail_screen.dart';\r\nimport 'package:canwa/Screens/course_reminders_screen.dart';\r\nimport 'package:canwa/Screens/create_new_password_screen.dart';\r\nimport 'package:canwa/Screens/edit_profile_screen.dart';\r\nimport 'package:canwa/Screens/faq_screen.dart';\r\nimport 'package:canwa/Screens/forgot_password_screen.dart';\r\nimport 'package:canwa/Screens/help_and_support_screen.dart';\r\nimport 'package:canwa/Screens/home_screen.dart';\r\nimport 'package:canwa/Screens/home_screen_2.dart';\r\nimport 'package:canwa/Screens/language_screen.dart';\r\nimport 'package:canwa/Screens/learning_interests_screen.dart';\r\nimport 'package:canwa/Screens/learning_screen.dart';\r\nimport 'package:canwa/Screens/login_screen.dart';\r\nimport 'package:canwa/Screens/my_course_screen.dart';\r\nimport 'package:canwa/Screens/notification_screen.dart';\r\nimport 'package:canwa/Screens/onboarding_screen.dart';\r\nimport 'package:canwa/Screens/payment_method_screen.dart';\r\nimport 'package:canwa/Screens/profile_mentor_screen.dart';\r\nimport 'package:canwa/Screens/profile_screen.dart';\r\nimport 'package:canwa/Screens/recommendation_screen.dart';\r\nimport 'package:canwa/Screens/replay_question_screen.dart';\r\nimport 'package:canwa/Screens/review_screen.dart';\r\nimport 'package:canwa/Screens/search_screen.dart';\r\nimport 'package:canwa/Screens/signup_screen.dart';\r\nimport 'package:canwa/Screens/verification_code_screen.dart';\r\nimport 'package:canwa/Screens/wishlist_screen.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:pixel_preview/pixel_app/pixel_group.dart';\r\nimport 'package:pixel_preview/pixel_preview.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\n\r\nvoid main() {\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const Color primaryColor = Color(0xFF7356FF); // User's chosen primary color\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      title: 'CourseCamp', // Updated title\r\n      theme: ThemeData(\r\n        primaryColor: primaryColor,\r\n        colorScheme: ColorScheme.fromSeed(\r\n          seedColor: primaryColor,\r\n          brightness: ThemeData.light().brightness,\r\n          onPrimary: Colors.white,\r\n          surface: Colors.white,\r\n        ),\r\n        appBarTheme: const AppBarTheme(\r\n          backgroundColor: Colors.white,\r\n          elevation: 0,\r\n          iconTheme: IconThemeData(\r\n            color: Color(0xFF000000),\r\n          ), // Set icon color to black\r\n        ),\r\n        elevatedButtonTheme: ElevatedButtonThemeData(\r\n          style: ElevatedButton.styleFrom(\r\n            backgroundColor: primaryColor,\r\n            foregroundColor: Colors.white,\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(12.0),\r\n            ),\r\n          ),\r\n        ),\r\n        textButtonTheme: TextButtonThemeData(\r\n          style: TextButton.styleFrom(foregroundColor: primaryColor),\r\n        ),\r\n        outlinedButtonTheme: OutlinedButtonThemeData(\r\n          style: OutlinedButton.styleFrom(\r\n            foregroundColor:\r\n                Colors\r\n                    .black, // Changed to black for social buttons as per image\r\n            side: BorderSide(color: Colors.grey[300]!), // Light grey border\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(12.0),\r\n            ),\r\n          ),\r\n        ),\r\n        floatingActionButtonTheme: FloatingActionButtonThemeData(\r\n          backgroundColor: primaryColor,\r\n          foregroundColor: Colors.white,\r\n        ),\r\n        filledButtonTheme: FilledButtonThemeData(\r\n          style: FilledButton.styleFrom(\r\n            backgroundColor: primaryColor,\r\n            foregroundColor: Colors.white,\r\n          ),\r\n        ),\r\n        textTheme:\r\n            GoogleFonts.plusJakartaSansTextTheme(), // Apply user's text theme\r\n      ),\r\n      home: PixelApp(\r\n        iFrameMode: true,\r\n        groups: [\r\n          PixelGroup(\r\n            title: 'Onboarding & Authentication',\r\n            children: [\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const OnboardingScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const LoginScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const SignupScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ForgotPasswordScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const OtpScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const CreateNewPasswordScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const LearningInterestsScreen(),\r\n              ),\r\n            ],\r\n          ),\r\n          PixelGroup(\r\n            title: 'Core App Screens',\r\n            children: [\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const HomeScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const HomeScreen2(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const SearchScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const MyCourseScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const WishlistScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ProfileScreen(),\r\n              ),\r\n            ],\r\n          ),\r\n          PixelGroup(\r\n            title: 'Course & Learning',\r\n            children: [\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const CourseDetailScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const LearningScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ContinueLearningScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const CourseRemindersScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const AddQuestionScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ReplayQuestionScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ReviewScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const RecommendationScreen(),\r\n              ),\r\n            ],\r\n          ),\r\n          PixelGroup(\r\n            title: 'Profile & Settings',\r\n            children: [\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const EditProfileScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const ProfileMentorScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const LanguageScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const NotificationScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const FaqScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const HelpAndSupportScreen(),\r\n              ),\r\n            ],\r\n          ),\r\n          PixelGroup(\r\n            title: 'Payment & Checkout',\r\n            children: [\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const PaymentMethodScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const AddNewCardScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const CheckoutScreen(),\r\n              ),\r\n              PixelPreview(\r\n                presets: ScreenPresets(),\r\n                enabled: true,\r\n                child: const WishlistScreen(),\r\n              ),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n```\n\n// File: lib\\placeholder.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass PlaceHolderScreen extends StatelessWidget {\n  const PlaceHolderScreen({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(child: const Text(\"Hi! Let's build something awesome\")),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\add_new_card_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass AddNewCardScreen extends StatefulWidget {\n  const AddNewCardScreen({super.key});\n\n  @override\n  State<AddNewCardScreen> createState() => _AddNewCardScreenState();\n}\n\nclass _AddNewCardScreenState extends State<AddNewCardScreen> {\n  final TextEditingController _cardNumberController = TextEditingController();\n  final TextEditingController _cardHolderNameController =\n      TextEditingController();\n  final TextEditingController _expiredController = TextEditingController();\n  final TextEditingController _cvvCodeController = TextEditingController();\n\n  String _displayCardNumber =\n      '2894 - 4389 - 4432 - 9432'; // Initial placeholder from image\n  String _displayCardHolderName =\n      'Natalie Vernandez'; // Initial placeholder from image\n\n  @override\n  void initState() {\n    super.initState();\n    _cardNumberController.addListener(_updateCardNumber);\n    _cardHolderNameController.addListener(_updateCardHolderName);\n  }\n\n  @override\n  void dispose() {\n    _cardNumberController.removeListener(_updateCardNumber);\n    _cardHolderNameController.removeListener(_updateCardHolderName);\n    _cardNumberController.dispose();\n    _cardHolderNameController.dispose();\n    _expiredController.dispose();\n    _cvvCodeController.dispose();\n    super.dispose();\n  }\n\n  void _updateCardNumber() {\n    setState(() {\n      String rawNumber = _cardNumberController.text.replaceAll(' ', '');\n      if (rawNumber.length > 16) {\n        rawNumber = rawNumber.substring(0, 16);\n      }\n      _displayCardNumber = _formatCardNumber(rawNumber);\n    });\n  }\n\n  String _formatCardNumber(String number) {\n    String formatted = '';\n    for (int i = 0; i < number.length; i++) {\n      if (i > 0 && i % 4 == 0) {\n        formatted += ' - ';\n      }\n      formatted += number[i];\n    }\n    return formatted.isEmpty ? '•••• - •••• - •••• - ••••' : formatted;\n  }\n\n  void _updateCardHolderName() {\n    setState(() {\n      _displayCardHolderName =\n          _cardHolderNameController.text.isEmpty\n              ? 'Holder Name'\n              : _cardHolderNameController.text;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Add New Card',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Card Preview Widget\n            _buildCardPreview(context, textTheme),\n            const SizedBox(\n              height: 32,\n            ), // Increased spacing for visual separation\n            // Card Number Input\n            const SizedBox(height: 8),\n            AuthTextfields().buildTextField(\n              controller: TextEditingController(),\n              labelText: \"Enter Card Number\",\n            ),\n            const SizedBox(height: 20),\n\n            // Card Holder Name Input\n            AuthTextfields().buildTextField(\n              controller: TextEditingController(),\n              labelText: \"Enter Holder Name\",\n            ),\n            const SizedBox(height: 20),\n\n            // Expired and CVV Code\n            Row(\n              children: [\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      AuthTextfields().buildTextField(\n                        controller: TextEditingController(),\n                        labelText: \"MM/YY\",\n                      ),\n                    ],\n                  ),\n                ),\n                const SizedBox(width: 20),\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      AuthTextfields().buildTextField(\n                        controller: TextEditingController(),\n                        labelText: \"CVV\",\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n\n            const Spacer(), // Pushes the button to the bottom\n            // Add Card Button\n            PrimaryTextButton(text: \"Add Card\"),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildCardPreview(BuildContext context, TextTheme textTheme) {\n    final primaryColor =\n        Theme.of(context).primaryColor; // Get primary color from theme\n    return Container(\n      width: double.infinity,\n      height: 200, // Fixed height for the card\n      padding: const EdgeInsets.all(24.0),\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.circular(16.0),\n        gradient: LinearGradient(\n          begin: Alignment.topLeft,\n          end: Alignment.bottomRight,\n          colors: [\n            primaryColor, // Use primary color as the base\n            primaryColor.withValues(\n              alpha: 0.7,\n            ), // A lighter shade of primary color for the gradient\n          ],\n        ),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.2),\n            spreadRadius: 2,\n            blurRadius: 10,\n            offset: const Offset(0, 5),\n          ),\n        ],\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              ClipRRect(\n                borderRadius: BorderRadius.circular(\n                  4.0,\n                ), // Slight rounding for logo\n                child: Image.network(\n                  'https://picsum.photos/id/406/40/25', // Placeholder for Maestro/Generic Card Logo\n                  color: Colors.white, // Tint logo white if needed\n                  colorBlendMode: BlendMode.srcIn,\n                  height: 25,\n                  width: 40,\n                  fit: BoxFit.contain,\n                ),\n              ),\n              Text(\n                'Maestro Kard', // Card type\n                style: textTheme.bodyLarge?.copyWith(\n                  color: Colors.white,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          const Spacer(), // Pushes content towards bottom\n          Text(\n            _displayCardNumber,\n            style: textTheme.headlineSmall?.copyWith(\n              color: Colors.white,\n              fontWeight: FontWeight.bold,\n              letterSpacing: 1.5,\n            ),\n          ),\n          const SizedBox(height: 8),\n          Text(\n            'Holder Name',\n            style: textTheme.bodySmall?.copyWith(\n              color: Colors.white.withValues(alpha: 0.8),\n            ),\n          ),\n          Text(\n            _displayCardHolderName,\n            style: textTheme.titleMedium?.copyWith(\n              color: Colors.white,\n              fontWeight: FontWeight.bold,\n            ),\n            maxLines: 1,\n            overflow: TextOverflow.ellipsis,\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\add_question_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass AddQuestionScreen extends StatefulWidget {\n  const AddQuestionScreen({super.key});\n\n  @override\n  State<AddQuestionScreen> createState() => _AddQuestionScreenState();\n}\n\nclass _AddQuestionScreenState extends State<AddQuestionScreen> {\n  final TextEditingController _questionController = TextEditingController();\n  final int _maxQuestionLength = 200;\n  bool _isFavorited = false; // State for the heart icon\n\n  @override\n  void dispose() {\n    _questionController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Add Question',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Course Card (Read-only)\n            _buildCourseCard(context, primaryColor, textTheme),\n            const SizedBox(height: 24),\n\n            // Question Section\n            Text(\n              'Question',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            TextField(\n              controller: _questionController,\n              maxLines: null, // Allows multiline input\n              minLines: 5, // Minimum 5 lines height\n              maxLength:\n                  _maxQuestionLength, // Maximum length for character counter\n              keyboardType: TextInputType.multiline,\n              decoration: InputDecoration(\n                hintText:\n                    'What is Design System? Where is the right place to learn system design?',\n                hintStyle: textTheme.bodyLarge?.copyWith(\n                  color: Colors.grey[600],\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12.0),\n                  borderSide: BorderSide(color: Colors.grey[300]!, width: 1.5),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12.0),\n                  borderSide: BorderSide(color: Colors.grey[300]!, width: 1.5),\n                ),\n                filled: true,\n                fillColor: Colors.white, // White background\n                contentPadding: const EdgeInsets.symmetric(\n                  vertical: 16.0,\n                  horizontal: 16.0,\n                ),\n                counterText: \"\", // Hide default counter to use custom one\n              ),\n              onChanged: (text) {\n                setState(() {}); // Rebuild to update character counter\n              },\n            ),\n            const SizedBox(height: 8),\n            Align(\n              alignment: Alignment.bottomRight,\n              child: Text(\n                '${_questionController.text.length}/$_maxQuestionLength',\n                style: textTheme.bodySmall?.copyWith(color: Colors.grey[600]),\n              ),\n            ),\n            const Spacer(), // Pushes the button to the bottom\n            // Send Button\n            PrimaryTextButton(text: 'Send'),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildCourseCard(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      padding: const EdgeInsets.all(12.0),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          ClipRRect(\n            borderRadius: BorderRadius.circular(8.0),\n            child: Image.network(\n              'https://picsum.photos/id/600/100/80', // Placeholder course image\n              height: 100,\n              width: 100,\n              fit: BoxFit.cover,\n            ),\n          ),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'Graphic Design',\n                      style: textTheme.bodySmall?.copyWith(\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      maxLines: 1,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    GestureDetector(\n                      onTap: () {\n                        setState(() {\n                          _isFavorited = !_isFavorited;\n                        });\n                      },\n                      child: Icon(\n                        _isFavorited ? Icons.favorite : Icons.favorite_border,\n                        color: _isFavorited ? Colors.red : Colors.grey[600],\n                        size: 20,\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 4),\n                Text(\n                  'Expert Wireframing for Mobile Design',\n                  style: textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                  maxLines: 2,\n                  overflow: TextOverflow.ellipsis,\n                ),\n                const SizedBox(height: 8),\n                Row(\n                  children: [\n                    const Icon(Icons.star, color: Colors.amber, size: 16),\n                    const SizedBox(width: 4),\n                    Text(\n                      '4.9 • (12,990)',\n                      style: textTheme.bodySmall?.copyWith(\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                    const Spacer(),\n                    Text(\n                      '\\$48', // Course price\n                      style: textTheme.titleMedium?.copyWith(\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\checkout_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass CheckoutScreen extends StatefulWidget {\n  const CheckoutScreen({super.key});\n\n  @override\n  State<CheckoutScreen> createState() => _CheckoutScreenState();\n}\n\nclass _CheckoutScreenState extends State<CheckoutScreen> {\n  final TextEditingController _discountCodeController = TextEditingController();\n  bool _isFavorited = false; // State for the heart icon in the course card\n\n  @override\n  void dispose() {\n    _discountCodeController.dispose();\n    super.dispose();\n  }\n\n  void _applyDiscount() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text(\n          'Discount code \"${_discountCodeController.text}\" applied (logic not implemented).',\n        ),\n        duration: const Duration(seconds: 2),\n      ),\n    );\n  }\n\n  void _changePaymentMethod() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      const SnackBar(\n        content: Text(\n          'Navigating to change payment method (logic not implemented).',\n        ),\n        duration: Duration(seconds: 2),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Checkout',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Summary Section\n            Text(\n              'Summary',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildCourseSummaryCard(context, primaryColor, textTheme),\n            const SizedBox(height: 24),\n\n            // Payment Method Section\n            Text(\n              'Payment Method',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildPaymentMethodCard(context, primaryColor, textTheme),\n            const SizedBox(height: 24),\n\n            // Discount Code Section\n            Text(\n              'Discount Code',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildDiscountCodeInput(context, primaryColor, textTheme),\n            const SizedBox(height: 24),\n\n            // Total Summary Section\n            _buildPriceRow(\n              context,\n              textTheme,\n              'Subtotal',\n              '\\$200',\n              Colors.black,\n            ),\n            const SizedBox(height: 12),\n            _buildPriceRow(\n              context,\n              textTheme,\n              'Discount',\n              '-\\$5.25',\n              Colors.red,\n            ),\n            const Divider(height: 32, thickness: 1, color: Colors.grey),\n            _buildPriceRow(\n              context,\n              textTheme,\n              'Total',\n              '\\$194.75',\n              Colors.black,\n              isTotal: true,\n            ),\n\n            const Spacer(), // Pushes the button to the bottom\n            // Checkout Button\n            PrimaryTextButton(text: \"Checkout Course\"),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildCourseSummaryCard(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      padding: const EdgeInsets.all(12.0),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          ClipRRect(\n            borderRadius: BorderRadius.circular(8.0),\n            child: Image.network(\n              'https://picsum.photos/id/600/100/80', // Placeholder course image\n              height: 100,\n              width: 100,\n              fit: BoxFit.cover,\n            ),\n          ),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'Graphic Design',\n                      style: textTheme.bodySmall?.copyWith(\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      maxLines: 1,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    GestureDetector(\n                      onTap: () {\n                        setState(() {\n                          _isFavorited = !_isFavorited;\n                        });\n                      },\n                      child: Icon(\n                        _isFavorited ? Icons.favorite : Icons.favorite_border,\n                        color: _isFavorited ? Colors.red : Colors.grey[600],\n                        size: 20,\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 4),\n                Text(\n                  'Expert Wireframing for Mobile Design',\n                  style: textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                  maxLines: 2,\n                  overflow: TextOverflow.ellipsis,\n                ),\n                const SizedBox(height: 8),\n                Row(\n                  children: [\n                    const Icon(Icons.star, color: Colors.amber, size: 16),\n                    const SizedBox(width: 4),\n                    Text(\n                      '4.9 • (12,990)',\n                      style: textTheme.bodySmall?.copyWith(\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                    const Spacer(),\n                    Text(\n                      '\\$48', // Course price\n                      style: textTheme.titleMedium?.copyWith(\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPaymentMethodCard(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),\n      decoration: BoxDecoration(\n        color: Colors.grey[100], // Light grey background\n        borderRadius: BorderRadius.circular(16.0),\n        border: Border.all(\n          color: Colors.grey[300]!,\n          width: 1.5,\n        ), // Subtle border\n      ),\n      child: Row(\n        children: [\n          Image.network(\n            'https://picsum.photos/id/405/60/40', // Placeholder for Visa logo\n            height: 30,\n            width: 40,\n            fit: BoxFit.contain,\n          ),\n          const SizedBox(width: 16),\n          Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                'Visa',\n                style: textTheme.titleMedium?.copyWith(\n                  fontWeight: FontWeight.bold,\n                  color: Colors.black,\n                ),\n              ),\n              Text(\n                '1234 ****',\n                style: textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),\n              ),\n            ],\n          ),\n          const Spacer(),\n          TextButton(\n            onPressed: _changePaymentMethod,\n            style: TextButton.styleFrom(\n              padding: EdgeInsets.zero,\n              minimumSize: Size.zero,\n              tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n            ),\n            child: Text(\n              'Change',\n              style: textTheme.bodyLarge?.copyWith(\n                color: primaryColor,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildDiscountCodeInput(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return TextField(\n      controller: _discountCodeController,\n      decoration: InputDecoration(\n        hintText: 'UIUXNOW23', // Placeholder for discount code\n        hintStyle: textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),\n        prefixIcon: Icon(\n          Icons.percent,\n          color: Colors.grey[600],\n        ), // Percent icon for discount\n        suffixIcon: TextButton(\n          onPressed: _applyDiscount,\n          style: TextButton.styleFrom(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 16.0,\n            ), // Adjust padding for button\n            minimumSize: Size.zero,\n            tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n          ),\n          child: Text(\n            'Apply Code',\n            style: textTheme.bodyLarge?.copyWith(\n              color: primaryColor,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n        ),\n        border: OutlineInputBorder(\n          borderRadius: BorderRadius.circular(12.0),\n          borderSide: BorderSide(color: Colors.grey[300]!, width: 1.5),\n        ),\n        filled: true,\n        fillColor: Colors.white,\n        contentPadding: const EdgeInsets.symmetric(\n          vertical: 16.0,\n          horizontal: 16.0,\n        ),\n      ),\n    );\n  }\n\n  Widget _buildPriceRow(\n    BuildContext context,\n    TextTheme textTheme,\n    String label,\n    String value,\n    Color valueColor, {\n    bool isTotal = false,\n  }) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          label,\n          style: textTheme.bodyLarge?.copyWith(\n            color: Colors.black,\n            fontWeight: isTotal ? FontWeight.bold : FontWeight.normal,\n            fontSize:\n                isTotal\n                    ? textTheme.titleMedium?.fontSize\n                    : textTheme.bodyLarge?.fontSize,\n          ),\n        ),\n        Text(\n          value,\n          style: textTheme.bodyLarge?.copyWith(\n            color: valueColor,\n            fontWeight: isTotal ? FontWeight.bold : FontWeight.normal,\n            fontSize:\n                isTotal\n                    ? textTheme.titleMedium?.fontSize\n                    : textTheme.bodyLarge?.fontSize,\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\continue_learning_screen.dart\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:canwa/Widgets/category_chip.dart';\n\nclass ContinueLearningScreen extends StatefulWidget {\n  const ContinueLearningScreen({super.key});\n\n  @override\n  State<ContinueLearningScreen> createState() => _ContinueLearningScreenState();\n}\n\nclass _ContinueLearningScreenState extends State<ContinueLearningScreen> {\n  final List<String> _courseCategories = [\n    'All Course',\n    'Education',\n    'Technology',\n    'Design',\n    'Programming',\n    'Science',\n    'Art',\n  ];\n  int _selectedCategoryIndex = 0; // \"All Course\" selected by default\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Continue Learning',\n          style: TextStyle(\n            fontSize: 18,\n            fontWeight: FontWeight.w600,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: Icon(Icons.filter_list, color: Colors.black), // Filter icon\n            onPressed: () {\n              // Handle filter action\n            },\n          ),\n        ],\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const SizedBox(height: 16),\n          // Search Bar\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 24.0),\n            child: TextField(\n              decoration: InputDecoration(\n                hintText: 'Search Something',\n                prefixIcon: Padding(\n                  padding: const EdgeInsets.only(left: 16.0, top: 8, bottom: 8),\n                  child: Icon(Icons.search, color: Colors.grey[600]),\n                ),\n                suffixIcon: Padding(\n                  padding: const EdgeInsets.only(right: 8.0),\n                  child: IconButton(\n                    icon: Icon(Icons.close, color: Colors.grey[600]),\n                    onPressed: () {\n                      // Perform search clear logic\n                    },\n                  ),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: primaryColor),\n                  borderRadius: BorderRadius.circular(15),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(15),\n                  borderSide: BorderSide(color: Colors.grey[300]!),\n                ),\n                filled: true,\n                fillColor: Colors.white, // White background for the input\n                contentPadding: const EdgeInsets.symmetric(\n                  vertical: 16.0,\n                  horizontal: 16.0,\n                ),\n              ),\n              onChanged: (value) {\n                // Perform search as user types\n              },\n            ),\n          ),\n          const SizedBox(height: 16),\n\n          // Category Chips\n          SizedBox(\n            height: 40,\n            child: ListView.builder(\n              scrollDirection: Axis.horizontal,\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              itemCount: _courseCategories.length,\n              itemBuilder: (context, index) {\n                return Padding(\n                  padding: const EdgeInsets.only(right: 12.0),\n                  child: CategoryChip(\n                    name: _courseCategories[index],\n                    isSelected: index == _selectedCategoryIndex,\n                    onTap: () {\n                      setState(() {\n                        _selectedCategoryIndex = index;\n                      });\n                    },\n                  ),\n                );\n              },\n            ),\n          ),\n          const SizedBox(height: 24),\n\n          // Course List\n          Expanded(\n            child: ListView.builder(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              itemCount: _continueLearningCourses.length,\n              itemBuilder: (context, index) {\n                final course = _continueLearningCourses[index];\n                return _buildCourseProgressCard(\n                  context,\n                  course,\n                  primaryColor,\n                  textTheme,\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildCourseProgressCard(\n    BuildContext context,\n    Map<String, dynamic> course,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 16.0),\n      child: ClipRRect(\n        borderRadius: BorderRadius.circular(16.0),\n        child: Material(\n          color: Colors.transparent,\n          child: Ink(\n            decoration: BoxDecoration(\n              color: primaryColor.withValues(alpha: 0.02),\n              borderRadius: BorderRadius.circular(16.0),\n              border: Border.all(\n                width: 1,\n                color: Colors.grey.withValues(alpha: 0.2),\n              ),\n            ),\n            child: InkWell(\n              borderRadius: BorderRadius.circular(16.0),\n              onTap: () {\n                // Handle card tap\n                print('Course progress card tapped: ${course['title']}');\n                // Add your navigation or action logic here\n              },\n              child: Padding(\n                padding: const EdgeInsets.all(12.0),\n                child: Row(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Padding(\n                      padding: const EdgeInsets.symmetric(vertical: 2),\n                      child: ClipRRect(\n                        borderRadius: BorderRadius.circular(8.0),\n                        child: Image.network(\n                          course['image']!,\n                          height: 70,\n                          width: 70,\n                          fit: BoxFit.cover,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(width: 12),\n                    Expanded(\n                      child: Stack(\n                        children: [\n                          Column(\n                            mainAxisAlignment: MainAxisAlignment.start,\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                course['title']!,\n                                style: TextStyle(\n                                  fontSize: 14,\n                                  fontWeight: FontWeight.w900,\n                                  color: Colors.black,\n                                ),\n                                maxLines: 2,\n                                overflow: TextOverflow.ellipsis,\n                              ),\n                              const SizedBox(height: 4),\n                              Text(\n                                course['author']!,\n                                style: textTheme.bodyMedium?.copyWith(\n                                  color: Colors.grey[600],\n                                ),\n                                maxLines: 1,\n                                overflow: TextOverflow.ellipsis,\n                              ),\n                              const SizedBox(height: 8),\n                              LinearProgressIndicator(\n                                value: course['progress'],\n                                backgroundColor: Colors.grey[200],\n                                valueColor: AlwaysStoppedAnimation<Color>(\n                                  primaryColor,\n                                ),\n                                minHeight: 6,\n                                borderRadius: BorderRadius.circular(3),\n                              ),\n                              const SizedBox(height: 4),\n                              Text(\n                                '${(course['progress'] * 100).toInt()}% completed',\n                                style: textTheme.bodySmall?.copyWith(\n                                  color: Colors.grey[600],\n                                ),\n                              ),\n                            ],\n                          ),\n                          Positioned(\n                            top: 0,\n                            right: 0,\n                            child: Material(\n                              color: Colors.transparent,\n                              child: InkWell(\n                                hoverColor: Colors.black.withValues(alpha: 0.1),\n                                borderRadius: BorderRadius.circular(16),\n                                onTap: () {\n                                  // Handle more options tap\n                                  print(\n                                    'More options tapped for: ${course['title']}',\n                                  );\n                                },\n                                child: Padding(\n                                  padding: const EdgeInsets.all(4.0),\n                                  child: Icon(\n                                    Icons.more_vert,\n                                    color: Colors.grey[600],\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  // Sample data for courses\n  final List<Map<String, dynamic>> _continueLearningCourses = [\n    {\n      'image': 'https://picsum.photos/id/1043/100/80',\n      'title': 'Songwriting with Strings: Composing and Arranging for Guitar',\n      'author': 'Daniel Lewis',\n      'progress': 0.75,\n    },\n    {\n      'image': 'https://picsum.photos/id/1047/100/80',\n      'title': 'Songwriting with Strings: Composing and Arranging for Guitar',\n      'author': 'James Hall',\n      'progress': 0.10,\n    },\n    {\n      'image': 'https://picsum.photos/id/1048/100/80',\n      'title': 'Kitchen Confidence: Mastering Basic Cooking Techniques',\n      'author': 'David Elson & Iva Carolina',\n      'progress': 0.00,\n    },\n    {\n      'image': 'https://picsum.photos/id/100/100/80',\n      'title': 'Essential Spanish Grammar: Mastering the Fundamental Rules',\n      'author': 'Stephanie Nicol',\n      'progress': 0.90,\n    },\n    {\n      'image': 'https://picsum.photos/id/200/100/80',\n      'title': 'Introduction to Digital Photography: Capture Stunning Images',\n      'author': 'Emily White',\n      'progress': 0.60,\n    },\n  ];\n}\n```\n\n// File: lib\\Screens\\course_detail_screen.dart\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:canwa/Screens/course_reminders_screen.dart'; // Import the new reminders screen\n\n// Course Progress Model\nclass CourseProgress {\n  final int totalLessons;\n  final int completedLessons;\n  final List<bool> lessonCompletionStatus;\n\n  CourseProgress({\n    required this.totalLessons,\n    required this.completedLessons,\n    required this.lessonCompletionStatus,\n  });\n\n  double get progressPercentage => completedLessons / totalLessons;\n  int get progressPoints => (progressPercentage * 100).round();\n\n  // Check if milestone is achieved\n  bool isMilestoneAchieved(double milestone) => progressPercentage >= milestone;\n}\n\n// Updated CourseDetailScreen with functional progress\nclass CourseDetailScreen extends StatefulWidget {\n  const CourseDetailScreen({super.key});\n\n  @override\n  State<CourseDetailScreen> createState() => _CourseDetailScreenState();\n}\n\nclass _CourseDetailScreenState extends State<CourseDetailScreen> {\n  int _selectedContentIndex = 0;\n\n  // Course progress state\n  late CourseProgress _courseProgress;\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize with sample course data - 20 lessons, 5 completed\n    _courseProgress = CourseProgress(\n      totalLessons: 20,\n      completedLessons: 5,\n      lessonCompletionStatus: List.generate(\n        20,\n        (index) => index < 5,\n      ), // First 5 lessons completed\n    );\n  }\n\n  // Method to mark a lesson as complete\n  void _markLessonComplete(int lessonIndex) {\n    if (lessonIndex < _courseProgress.lessonCompletionStatus.length &&\n        !_courseProgress.lessonCompletionStatus[lessonIndex]) {\n      setState(() {\n        _courseProgress.lessonCompletionStatus[lessonIndex] = true;\n        _courseProgress = CourseProgress(\n          totalLessons: _courseProgress.totalLessons,\n          completedLessons:\n              _courseProgress.lessonCompletionStatus\n                  .where((completed) => completed)\n                  .length,\n          lessonCompletionStatus: _courseProgress.lessonCompletionStatus,\n        );\n      });\n    }\n  }\n\n  // Method to simulate course progress (for demo purposes)\n  void _simulateProgress() {\n    final nextIncompleteLesson = _courseProgress.lessonCompletionStatus\n        .indexWhere((completed) => !completed);\n    if (nextIncompleteLesson != -1) {\n      _markLessonComplete(nextIncompleteLesson);\n    }\n  }\n\n  // Add these variables to your State class\n  double scrollOffset = 0.0;\n  String totalTime = \"15:30\";\n  int currentVideoIndex = 0;\n  int totalVideos = 5;\n  int selectedContentIndex = 0; // This might already exist in your code\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.grey[50],\n      body: NotificationListener<ScrollNotification>(\n        onNotification: (scrollNotification) {\n          if (scrollNotification is ScrollUpdateNotification) {\n            setState(() {\n              scrollOffset = scrollNotification.metrics.pixels;\n            });\n          }\n          return false;\n        },\n        child: CustomScrollView(\n          slivers: [\n            // App Bar with Background Image\n            SliverAppBar(\n              scrolledUnderElevation: 0,\n              expandedHeight: MediaQuery.of(context).size.height * 0.35,\n              floating: false,\n              pinned: true,\n              backgroundColor: Colors.white,\n              elevation: 0,\n              leading: IconButton(\n                onPressed: () {},\n                icon: Icon(\n                  Icons.keyboard_arrow_left_rounded,\n                  size: 20,\n                  color: Colors.white,\n                ),\n              ),\n              actions: _buildActionWidgets(),\n              flexibleSpace: FlexibleSpaceBar(\n                background: _buildFlexibleSpaceBackground(\n                  primaryColor,\n                  textTheme,\n                ),\n              ),\n            ),\n\n            // Content Section\n            SliverToBoxAdapter(\n              child: Container(\n                decoration: BoxDecoration(\n                  color: Colors.grey[50],\n                  borderRadius: const BorderRadius.vertical(\n                    top: Radius.circular(30.0),\n                  ),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    const SizedBox(height: 32),\n\n                    // Course Info Section\n                    Padding(\n                      padding: const EdgeInsets.symmetric(horizontal: 24.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Text(\n                            'English Beginner Level',\n                            style: textTheme.headlineSmall?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                              letterSpacing: -0.5,\n                            ),\n                          ),\n                          const SizedBox(height: 12),\n                          Text(\n                            'Learn essential English skills, including grammar, vocabulary, and practical conversation basics.',\n                            style: textTheme.bodyLarge?.copyWith(\n                              color: Colors.grey[700],\n                              height: 1.6,\n                              fontSize: 16,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                    const SizedBox(height: 32),\n\n                    // Custom Tab Chips\n                    SingleChildScrollView(\n                      scrollDirection: Axis.horizontal,\n                      padding: const EdgeInsets.symmetric(horizontal: 24.0),\n                      child: Row(\n                        children: [\n                          _CourseDetailChip(\n                            label: 'Overview',\n                            isSelected: _selectedContentIndex == 0,\n                            onTap:\n                                () => setState(() => _selectedContentIndex = 0),\n                          ),\n                          const SizedBox(width: 12),\n                          _CourseDetailChip(\n                            label: 'Course',\n                            isSelected: _selectedContentIndex == 1,\n                            onTap:\n                                () => setState(() => _selectedContentIndex = 1),\n                          ),\n                          const SizedBox(width: 12),\n                          _CourseDetailChip(\n                            label: 'Achievements',\n                            isSelected: _selectedContentIndex == 2,\n                            onTap:\n                                () => setState(() => _selectedContentIndex = 2),\n                          ),\n                          const SizedBox(width: 12),\n                          _CourseDetailChip(\n                            label: 'Resources',\n                            isSelected: _selectedContentIndex == 3,\n                            onTap:\n                                () => setState(() => _selectedContentIndex = 3),\n                          ),\n                        ],\n                      ),\n                    ),\n                    const SizedBox(height: 32),\n\n                    // Content based on selected tab\n                    Padding(\n                      padding: const EdgeInsets.symmetric(horizontal: 24.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          _buildContentBasedOnTab(\n                            context,\n                            primaryColor,\n                            textTheme,\n                          ),\n                          const SizedBox(height: 32),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  List<Widget> _buildActionWidgets() {\n    final isCollapsed = scrollOffset > _getCollapseThreshold();\n\n    if (isCollapsed) {\n      // Show minimized preview image when collapsed\n      return [\n        GestureDetector(\n          onTap: () {\n            _expandPreview();\n          },\n          child: Row(\n            children: [\n              Text(\n                'English Beginner Level',\n                style: TextStyle(\n                  color: Colors.black87,\n                  fontSize: 16,\n                  fontWeight: FontWeight.w600,\n                ),\n                overflow: TextOverflow.ellipsis,\n              ),\n              SizedBox(width: 100), // Space between text and image\n              Container(\n                margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),\n                width: 80,\n                height: 200,\n                child: ClipRRect(\n                  borderRadius: BorderRadius.circular(8),\n                  child: Stack(\n                    fit: StackFit.expand,\n                    children: [\n                      Image.network(\n                        'https://picsum.photos/id/1062/600/400',\n                        fit: BoxFit.cover,\n                      ),\n                      // Optional: Add a subtle border\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ];\n    } else {\n      // Show more options button when expanded\n      return [\n        Padding(\n          padding: const EdgeInsets.only(right: 4.0),\n          child: IconButton(\n            icon: const Icon(Icons.more_horiz, color: Colors.white),\n            onPressed: () {\n              Navigator.push(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => const CourseRemindersScreen(),\n                ),\n              );\n            },\n          ),\n        ),\n      ];\n    }\n  }\n\n  Widget _buildFlexibleSpaceBackground(\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    final isCollapsed = scrollOffset > _getCollapseThreshold();\n\n    return AnimatedOpacity(\n      duration: const Duration(milliseconds: 200),\n      opacity: isCollapsed ? 0.0 : 1.0,\n      child: Stack(\n        fit: StackFit.expand,\n        children: [\n          // Background Image\n          Image.network(\n            'https://picsum.photos/id/1062/600/400',\n            fit: BoxFit.cover,\n          ),\n          // Gradient Overlay\n          Container(\n            decoration: BoxDecoration(\n              gradient: LinearGradient(\n                begin: Alignment.topCenter,\n                end: Alignment.bottomCenter,\n                colors: [\n                  Colors.black.withValues(alpha: 0.3),\n                  Colors.transparent,\n                  Colors.black.withValues(alpha: 0.7),\n                ],\n              ),\n            ),\n          ),\n\n          // Preview Info at Bottom\n          Positioned(\n            bottom: 0,\n            left: 0,\n            right: 0,\n            child: Container(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 16.0,\n                vertical: 8.0,\n              ),\n              decoration: BoxDecoration(\n                gradient: LinearGradient(\n                  begin: Alignment.bottomCenter,\n                  end: Alignment.topCenter,\n                  colors: [\n                    Colors.black.withValues(alpha: 0.6),\n                    Colors.transparent,\n                  ],\n                ),\n              ),\n              child: Column(\n                children: [\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        'Preview',\n                        style: textTheme.bodySmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.w500,\n                        ),\n                      ),\n                      Text(\n                        totalTime,\n                        style: textTheme.bodySmall?.copyWith(\n                          color: Colors.white,\n                        ),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 8),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Row(\n                        children: List.generate(totalVideos, (index) {\n                          return Container(\n                            margin: const EdgeInsets.symmetric(horizontal: 4.0),\n                            width: 8,\n                            height: 8,\n                            decoration: BoxDecoration(\n                              color:\n                                  index == currentVideoIndex\n                                      ? primaryColor\n                                      : Colors.white.withValues(alpha: 0.5),\n                              shape: BoxShape.circle,\n                            ),\n                          );\n                        }),\n                      ),\n                      Text(\n                        '${currentVideoIndex + 1} of $totalVideos',\n                        style: textTheme.bodySmall?.copyWith(\n                          color: Colors.white,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  double _getCollapseThreshold() {\n    final expandedHeight = MediaQuery.of(context).size.height * 0.65;\n    return expandedHeight * 0.7; // Collapse when 70% scrolled\n  }\n\n  void _expandPreview() {\n    // Scroll back to top to expand the preview\n    // You'll need to add a ScrollController to implement this\n    // scrollController.animateTo(0, duration: Duration(milliseconds: 300), curve: Curves.easeInOut);\n  }\n\n  Widget _buildContentBasedOnTab(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    switch (_selectedContentIndex) {\n      case 0: // Overview tab\n        return Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Functional Course Progress Section\n            Text(\n              'Course Progress',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _FunctionalCourseProgressBar(\n              courseProgress: _courseProgress,\n              primaryColor: primaryColor,\n              textTheme: textTheme,\n            ),\n\n            // Demo button to simulate progress\n            const SizedBox(height: 16),\n            Center(\n              child: ElevatedButton.icon(\n                onPressed:\n                    _courseProgress.completedLessons <\n                            _courseProgress.totalLessons\n                        ? _simulateProgress\n                        : null,\n                icon: const Icon(Icons.play_lesson),\n                label: Text(\n                  _courseProgress.completedLessons <\n                          _courseProgress.totalLessons\n                      ? 'Start New Lesson'\n                      : 'Course Completed!',\n                ),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: primaryColor,\n                  foregroundColor: Colors.white,\n                  padding: const EdgeInsets.symmetric(\n                    horizontal: 24,\n                    vertical: 12,\n                  ),\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(25),\n                  ),\n                ),\n              ),\n            ),\n\n            const SizedBox(height: 32),\n\n            // Course Overview Section\n            Text(\n              'Course Overview',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 12),\n            Text(\n              'Master essential English skills through engaging lessons on grammar, vocabulary, and everyday conversations. Build confidence with interactive exercises, listening practice, and speaking drills tailored for beginners.',\n              style: textTheme.bodyLarge?.copyWith(\n                color: Colors.grey[700],\n                height: 1.5,\n              ),\n            ),\n            const SizedBox(height: 32),\n\n            // Mentors Section\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                Text(\n                  'Mentors',\n                  style: textTheme.titleLarge?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {},\n                  child: Text(\n                    'See All',\n                    style: textTheme.bodyLarge?.copyWith(\n                      color: primaryColor,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            _buildMentorsList(context, textTheme),\n          ],\n        );\n      case 1: // Course tab\n        return _buildCourseList(context, primaryColor, textTheme);\n      case 2: // Achievements tab\n        return _buildAchievements(context, primaryColor, textTheme);\n      case 3: // Resources tab\n        return _buildResources(context, textTheme);\n      default:\n        return const SizedBox.shrink();\n    }\n  }\n\n  Widget _buildCourseList(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    // This data is adjusted to match the image content for \"Week 1: Foundations\"\n    // and includes placeholder images where appropriate.\n    final List<Map<String, dynamic>> lessons = [\n      {\n        'title': 'Building Strong Foundations',\n        'date': 'Monday, 3 Feb 2025',\n        'image': 'https://picsum.photos/id/1004/100/80',\n        'type': 'completed',\n        'description':\n            'Learn basic grammar, vocabulary, and pronunciation for daily use.',\n        'progress_percentage': null,\n        'bullet_points': [],\n      },\n      {\n        'title': 'Skill Expansion',\n        'date': 'Monday, 3 Feb 2025',\n        'image': 'https://picsum.photos/id/1011/100/80',\n        'type': 'in_progress',\n        'description':\n            'Improve speaking, listening, and vocabulary for everyday conversations.',\n        'progress_percentage': 0.30,\n        'bullet_points': [\n          'Learn how to ask and answer questions.',\n          'Improve listening comprehension with real-life dialogues.',\n          'Expand vocabulary for daily conversations.',\n        ],\n      },\n      {\n        'title': 'Real-World Mastery',\n        'date': 'Monday, 3 Feb 2025',\n        'image': 'https://picsum.photos/id/1005/100/80',\n        'type': 'locked',\n        'description': 'Focus on workplace, travel, and social fluency.',\n        'progress_percentage': 0.0,\n        'bullet_points': [],\n      },\n      // You can add more lessons here to match the 20 total lessons if needed for progress\n    ];\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  'Week 1: Foundations',\n                  style: textTheme.titleLarge?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                Text(\n                  'Introduction to English Basics',\n                  style: textTheme.bodyMedium?.copyWith(\n                    color: Colors.grey[600],\n                  ),\n                ),\n              ],\n            ),\n            Container(\n              decoration: BoxDecoration(\n                color: Colors.grey[100], // Light grey background\n                borderRadius: BorderRadius.circular(12),\n              ),\n              child: IconButton(\n                icon: Icon(Icons.calendar_month, color: Colors.black),\n                onPressed: () {},\n              ),\n            ),\n          ],\n        ),\n        const SizedBox(height: 16),\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: lessons.length,\n          itemBuilder: (context, index) {\n            final lesson = lessons[index];\n            final bool isCompleted = lesson['type'] == 'completed';\n            final bool isInProgress = lesson['type'] == 'in_progress';\n            final bool isLocked = lesson['type'] == 'locked';\n\n            return Column(\n              children: [\n                Container(\n                  margin: const EdgeInsets.only(bottom: 16),\n                  padding: const EdgeInsets.all(12.0),\n                  decoration: BoxDecoration(\n                    color: Colors.white,\n                    borderRadius: BorderRadius.circular(16.0),\n                    boxShadow: [\n                      BoxShadow(\n                        color: Colors.grey.withValues(alpha: 0.1),\n                        spreadRadius: 1,\n                        blurRadius: 5,\n                        offset: const Offset(0, 3),\n                      ),\n                    ],\n                  ),\n                  child: Column(\n                    children: [\n                      Row(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          ClipRRect(\n                            borderRadius: BorderRadius.circular(8.0),\n                            child: Image.network(\n                              lesson['image']!,\n                              height: 80, // Reduced height\n                              width: 80, // Reduced width\n                              fit: BoxFit.cover,\n                            ),\n                          ),\n                          const SizedBox(width: 12),\n                          Expanded(\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                Text(\n                                  lesson['date']!,\n                                  style: textTheme.bodySmall?.copyWith(\n                                    color: primaryColor,\n                                    fontWeight: FontWeight.bold,\n                                  ),\n                                ),\n                                const SizedBox(height: 4),\n                                Text(\n                                  lesson['title']!,\n                                  style: textTheme.titleMedium?.copyWith(\n                                    fontWeight: FontWeight.bold,\n                                    color: Colors.black,\n                                  ),\n                                  maxLines: 2,\n                                  overflow: TextOverflow.ellipsis,\n                                ),\n                                const SizedBox(height: 4),\n                                Text(\n                                  lesson['description']!,\n                                  style: textTheme.bodyMedium?.copyWith(\n                                    color: Colors.grey[700],\n                                  ),\n                                  maxLines: 2,\n                                  overflow: TextOverflow.ellipsis,\n                                ),\n                              ],\n                            ),\n                          ),\n                          if (isCompleted)\n                            Container(\n                              width: 24,\n                              height: 24,\n                              decoration: BoxDecoration(\n                                color: primaryColor,\n                                shape: BoxShape.circle,\n                              ),\n                              child: Icon(\n                                Icons.check,\n                                color: Colors.white,\n                                size: 16,\n                              ),\n                            ),\n                          if (isInProgress)\n                            SizedBox(\n                              width: 48,\n                              height: 48,\n                              child: Stack(\n                                alignment: Alignment.center,\n                                children: [\n                                  SizedBox(\n                                    width: 48,\n                                    height: 48,\n                                    child: CircularProgressIndicator(\n                                      value: lesson['progress_percentage'],\n                                      strokeWidth: 4,\n                                      backgroundColor: Colors.grey[200],\n                                      valueColor: AlwaysStoppedAnimation<Color>(\n                                        primaryColor,\n                                      ),\n                                    ),\n                                  ),\n                                  Text(\n                                    '${(lesson['progress_percentage'] * 100).toInt()}%',\n                                    style: textTheme.bodySmall?.copyWith(\n                                      fontWeight: FontWeight.bold,\n                                      color: primaryColor,\n                                    ),\n                                  ),\n                                ],\n                              ),\n                            ),\n                          if (isLocked)\n                            SizedBox(\n                              width: 48, // Occupy similar space for consistency\n                              height: 48,\n                              child: Center(\n                                child: Text(\n                                  '0%', // Showing 0% for locked as per image\n                                  style: textTheme.bodySmall?.copyWith(\n                                    fontWeight: FontWeight.bold,\n                                    color: Colors.grey[600],\n                                  ),\n                                ),\n                              ),\n                            ),\n                        ],\n                      ),\n                      if (isInProgress &&\n                          lesson['bullet_points'] != null &&\n                          lesson['bullet_points'].isNotEmpty)\n                        Padding(\n                          padding: const EdgeInsets.only(top: 16.0),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children:\n                                lesson['bullet_points'].asMap().entries.map<\n                                  Widget\n                                >((entry) {\n                                  int idx = entry.key;\n                                  String point = entry.value;\n                                  return Padding(\n                                    padding: const EdgeInsets.only(bottom: 8.0),\n                                    child: Row(\n                                      crossAxisAlignment:\n                                          CrossAxisAlignment.start,\n                                      children: [\n                                        Container(\n                                          width: 8,\n                                          height: 8,\n                                          margin: const EdgeInsets.only(\n                                            top: 6,\n                                            right: 8,\n                                          ),\n                                          decoration: BoxDecoration(\n                                            color:\n                                                idx == 0\n                                                    ? primaryColor\n                                                    : Colors\n                                                        .grey[400], // Green for first, grey for others\n                                            shape: BoxShape.circle,\n                                          ),\n                                        ),\n                                        Expanded(\n                                          child: Text(\n                                            point,\n                                            style: textTheme.bodyMedium\n                                                ?.copyWith(\n                                                  color: Colors.grey[700],\n                                                ),\n                                          ),\n                                        ),\n                                      ],\n                                    ),\n                                  );\n                                }).toList(),\n                          ),\n                        ),\n                    ],\n                  ),\n                ),\n              ],\n            );\n          },\n        ),\n      ],\n    );\n  }\n\n  Widget _buildAchievements(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    final achievements = [\n      {\n        'title': 'First Steps',\n        'description': 'Complete your first lesson',\n        'achieved': _courseProgress.completedLessons >= 1,\n      },\n      {\n        'title': 'Getting Started',\n        'description': 'Complete 5 lessons',\n        'achieved': _courseProgress.completedLessons >= 5,\n      },\n      {\n        'title': 'Quarter Way',\n        'description': 'Complete 25% of the course',\n        'achieved': _courseProgress.progressPercentage >= 0.25,\n      },\n      {\n        'title': 'Halfway Hero',\n        'description': 'Complete 50% of the course',\n        'achieved': _courseProgress.progressPercentage >= 0.50,\n      },\n      {\n        'title': 'Almost There',\n        'description': 'Complete 75% of the course',\n        'achieved': _courseProgress.progressPercentage >= 0.75,\n      },\n      {\n        'title': 'Course Master',\n        'description': 'Complete the entire course',\n        'achieved': _courseProgress.progressPercentage >= 1.0,\n      },\n    ];\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          'Course Achievements',\n          style: textTheme.titleLarge?.copyWith(\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        const SizedBox(height: 16),\n        ...achievements.map(\n          (achievement) => Container(\n            margin: const EdgeInsets.only(bottom: 12),\n            padding: const EdgeInsets.all(16),\n            decoration: BoxDecoration(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(12),\n              border: Border.all(\n                color:\n                    achievement['achieved'] as bool\n                        ? primaryColor.withValues(alpha: 0.3)\n                        : Colors.grey[300]!,\n              ),\n            ),\n            child: Row(\n              children: [\n                Icon(\n                  achievement['achieved'] as bool\n                      ? Icons.emoji_events\n                      : Icons.emoji_events_outlined,\n                  color:\n                      achievement['achieved'] as bool\n                          ? primaryColor\n                          : Colors.grey[400],\n                  size: 32,\n                ),\n                const SizedBox(width: 16),\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        achievement['title'] as String,\n                        style: textTheme.titleMedium?.copyWith(\n                          fontWeight: FontWeight.bold,\n                          color:\n                              achievement['achieved'] as bool\n                                  ? Colors.black\n                                  : Colors.grey[600],\n                        ),\n                      ),\n                      Text(\n                        achievement['description'] as String,\n                        style: textTheme.bodyMedium?.copyWith(\n                          color: Colors.grey[600],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n                if (achievement['achieved'] as bool)\n                  Icon(Icons.check_circle, color: primaryColor),\n              ],\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildResources(BuildContext context, TextTheme textTheme) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          'Course Resources',\n          style: textTheme.titleLarge?.copyWith(\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        const SizedBox(height: 12),\n        Text(\n          'Access supplementary materials, downloadable PDFs, links to external tools, and other helpful resources for this course.',\n          style: textTheme.bodyLarge?.copyWith(\n            color: Colors.grey[700],\n            height: 1.5,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildMentorsList(BuildContext context, TextTheme textTheme) {\n    final List<Map<String, String>> mentors = [\n      {'name': 'Ximia Ed', 'image': 'https://picsum.photos/id/1004/200/200'},\n      {'name': 'Lee Youna', 'image': 'https://picsum.photos/id/1011/200/200'},\n      {'name': 'Joshua K', 'image': 'https://picsum.photos/id/1005/200/200'},\n      {'name': 'Jesselyn', 'image': 'https://picsum.photos/id/1009/200/200'},\n      {'name': 'Kevin', 'image': 'https://picsum.photos/id/1027/200/200'},\n    ];\n\n    return SizedBox(\n      height: 120,\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: mentors.length,\n        itemBuilder: (context, index) {\n          final mentor = mentors[index];\n          return Padding(\n            padding: const EdgeInsets.only(right: 16.0),\n            child: Column(\n              children: [\n                CircleAvatar(\n                  radius: 36,\n                  backgroundImage: NetworkImage(mentor['image']!),\n                ),\n                const SizedBox(height: 8),\n                Text(\n                  mentor['name']!,\n                  style: textTheme.bodyMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                  maxLines: 1,\n                  overflow: TextOverflow.ellipsis,\n                ),\n              ],\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\n// Functional Course Progress Bar Widget\nclass _FunctionalCourseProgressBar extends StatelessWidget {\n  final CourseProgress courseProgress;\n  final Color primaryColor;\n  final TextTheme textTheme;\n\n  const _FunctionalCourseProgressBar({\n    required this.courseProgress,\n    required this.primaryColor,\n    required this.textTheme,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 20),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.05),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          // Header with progress info\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              Text(\n                'Course Progress',\n                style: textTheme.titleMedium?.copyWith(\n                  fontWeight: FontWeight.bold,\n                  color: Colors.black,\n                ),\n              ),\n              Text(\n                '${courseProgress.progressPoints}%',\n                style: textTheme.titleMedium?.copyWith(\n                  fontWeight: FontWeight.bold,\n                  color: Colors.black,\n                ),\n              ),\n            ],\n          ),\n          const SizedBox(height: 8),\n          Text(\n            '${courseProgress.completedLessons} of ${courseProgress.totalLessons} lessons completed',\n            style: textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),\n          ),\n          const SizedBox(height: 24),\n\n          // Progress bar with milestones\n          LayoutBuilder(\n            builder: (context, constraints) {\n              return SizedBox(\n                height: 80,\n                child: Stack(\n                  children: [\n                    // Base progress bar\n                    Positioned(\n                      top: 20,\n                      left: 0,\n                      right: 0,\n                      child: Container(\n                        height: 8,\n                        decoration: BoxDecoration(\n                          color: Colors.grey[200],\n                          borderRadius: BorderRadius.circular(4),\n                        ),\n                      ),\n                    ),\n\n                    // Filled progress bar\n                    Positioned(\n                      top: 20,\n                      left: 0,\n                      child: AnimatedContainer(\n                        duration: const Duration(milliseconds: 800),\n                        curve: Curves.easeInOut,\n                        height: 8,\n                        width:\n                            constraints.maxWidth *\n                            courseProgress.progressPercentage,\n                        decoration: BoxDecoration(\n                          color: primaryColor,\n                          borderRadius: BorderRadius.circular(4),\n                        ),\n                      ),\n                    ),\n\n                    // Milestone points\n                    _buildProgressPoint(\n                      constraints.maxWidth,\n                      0.25,\n                      '25\\nPoints',\n                      courseProgress.isMilestoneAchieved(0.25),\n                    ),\n                    _buildProgressPoint(\n                      constraints.maxWidth,\n                      0.50,\n                      '50\\nPoints',\n                      courseProgress.isMilestoneAchieved(0.50),\n                    ),\n                    Positioned(\n                      left: 100.0,\n                      top: 12,\n                      child: SizedBox(\n                        width: 195.0,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            AnimatedContainer(\n                              duration: const Duration(milliseconds: 600),\n                              width: 20,\n                              height: 20,\n                              decoration: BoxDecoration(\n                                color: Colors.white,\n                                shape: BoxShape.circle,\n                                border: Border.all(\n                                  color: Colors.grey[400]!,\n                                  width: 2.5,\n                                ),\n                                boxShadow: null,\n                              ),\n                              child: const Icon(\n                                Icons.check,\n                                color: Colors.white,\n                                size: 12,\n                              ),\n                            ),\n                            const SizedBox(height: 6),\n                            Text(\n                              '75\\nPints',\n                              textAlign: TextAlign.center,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: Colors.grey[600],\n                                fontWeight: FontWeight.normal,\n                                fontSize: 10,\n                                height: 1.2,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                    Positioned(\n                      left: 180.0,\n                      top: 12,\n                      child: SizedBox(\n                        width: 195.0,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            AnimatedContainer(\n                              duration: const Duration(milliseconds: 600),\n                              width: 20,\n                              height: 20,\n                              decoration: BoxDecoration(\n                                color: Colors.white,\n                                shape: BoxShape.circle,\n                                border: Border.all(\n                                  color: Colors.grey[400]!,\n                                  width: 2.5,\n                                ),\n                                boxShadow: null,\n                              ),\n                              child: const Icon(\n                                Icons.check,\n                                color: Colors.white,\n                                size: 12,\n                              ),\n                            ),\n                            const SizedBox(height: 6),\n                            Text(\n                              '100\\nPints',\n                              textAlign: TextAlign.center,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: Colors.grey[600],\n                                fontWeight: FontWeight.normal,\n                                fontSize: 10,\n                                height: 1.2,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n          ),\n\n          const SizedBox(height: 16),\n\n          // Dynamic motivational message\n          Container(\n            padding: const EdgeInsets.all(16),\n            decoration: BoxDecoration(\n              color: primaryColor.withValues(alpha: 0.05),\n              borderRadius: BorderRadius.circular(12),\n              border: Border.all(\n                color: primaryColor.withValues(alpha: 0.1),\n                width: 1,\n              ),\n            ),\n            child: Row(\n              children: [\n                Icon(_getMotivationIcon(), color: primaryColor, size: 24),\n                const SizedBox(width: 12),\n                Expanded(\n                  child: Text(\n                    _getMotivationMessage(),\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: Colors.grey[700],\n                      height: 1.4,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildProgressPoint(\n    double maxWidth,\n    double positionFactor,\n    String label,\n    bool isAchieved,\n  ) {\n    const double pointAreaWidth = 60.0;\n    const double circleDiameter = 20.0;\n\n    // Calculate the ideal centered position\n    final double idealLeft = (positionFactor * maxWidth) - (pointAreaWidth / 2);\n\n    // Clamp so the box does not overflow the edges\n    final double clampedLeft = idealLeft.clamp(0.0, maxWidth - pointAreaWidth);\n\n    return Positioned(\n      left: clampedLeft - 40,\n      top: 12,\n      child: SizedBox(\n        width: pointAreaWidth,\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            AnimatedContainer(\n              duration: const Duration(milliseconds: 600),\n              width: circleDiameter,\n              height: circleDiameter,\n              decoration: BoxDecoration(\n                color: isAchieved ? primaryColor : Colors.white,\n                shape: BoxShape.circle,\n                border: Border.all(\n                  color: isAchieved ? primaryColor : Colors.grey[400]!,\n                  width: 2.5,\n                ),\n                boxShadow:\n                    isAchieved\n                        ? [\n                          BoxShadow(\n                            color: primaryColor.withValues(alpha: 0.3),\n                            spreadRadius: 1,\n                            blurRadius: 3,\n                            offset: const Offset(0, 1),\n                          ),\n                        ]\n                        : null,\n              ),\n              child:\n                  isAchieved\n                      ? const Icon(Icons.check, color: Colors.white, size: 12)\n                      : null,\n            ),\n            const SizedBox(height: 6),\n            Text(\n              label,\n              textAlign: TextAlign.center,\n              style: textTheme.bodySmall?.copyWith(\n                color: isAchieved ? primaryColor : Colors.grey[600],\n                fontWeight: isAchieved ? FontWeight.bold : FontWeight.normal,\n                fontSize: 10,\n                height: 1.2,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  IconData _getMotivationIcon() {\n    if (courseProgress.progressPercentage >= 1.0) return Icons.celebration;\n    if (courseProgress.progressPercentage >= 0.75) return Icons.star;\n    if (courseProgress.progressPercentage >= 0.5) return Icons.trending_up;\n    if (courseProgress.progressPercentage >= 0.25)\n      return Icons.lightbulb_outline;\n    return Icons.play_circle_outline;\n  }\n\n  String _getMotivationMessage() {\n    if (courseProgress.progressPercentage >= 1.0) {\n      return 'Congratulations! 🎉 You\\'ve completed the entire course. You\\'re now ready for the next level!';\n    } else if (courseProgress.progressPercentage >= 0.75) {\n      return 'Outstanding progress! 🌟 You\\'re almost at the finish line. Keep pushing forward!';\n    } else if (courseProgress.progressPercentage >= 0.5) {\n      return 'Great job! 📈 You\\'re halfway through. Your consistency is paying off!';\n    } else if (courseProgress.progressPercentage >= 0.25) {\n      return 'Awesome progress! 💡 You\\'re one step closer to mastering English—keep up the great work!';\n    } else {\n      return 'Welcome to your English journey! ▶️ Every expert was once a beginner. Let\\'s get started!';\n    }\n  }\n}\n\n// Course Detail Chip Widget (unchanged)\nclass _CourseDetailChip extends StatelessWidget {\n  final String label;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const _CourseDetailChip({\n    required this.label,\n    this.isSelected = false,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return GestureDetector(\n      onTap: onTap,\n      child: Container(\n        padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 5.0),\n        decoration: BoxDecoration(\n          color: isSelected ? primaryColor : Colors.white,\n          borderRadius: BorderRadius.circular(25.0),\n          border: Border.all(\n            color: isSelected ? primaryColor : Colors.grey[300]!,\n            width: 1.5,\n          ),\n        ),\n        child: Text(\n          label,\n          maxLines: 1,\n          overflow: TextOverflow.ellipsis,\n          style: textTheme.bodyLarge?.copyWith(\n            fontSize: 14,\n            color: isSelected ? Colors.white : Colors.black,\n            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\course_reminders_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass CourseRemindersScreen extends StatefulWidget {\n  const CourseRemindersScreen({super.key});\n\n  @override\n  State<CourseRemindersScreen> createState() => _CourseRemindersScreenState();\n}\n\nclass _CourseRemindersScreenState extends State<CourseRemindersScreen> {\n  // Currently selected day index, corresponds to the data below.\n  // 0 = Monday, 3 Feb; 1 = Tuesday, 4 Feb, etc.\n  int _selectedDayIndex = 0;\n\n  // Sample data for the date selector and reminders\n  final List<Map<String, dynamic>> _weekDays = [\n    {'dayNum': 3, 'dayName': 'Mon', 'fullDate': 'Monday, 3 Feb 2025'},\n    {'dayNum': 4, 'dayName': 'Tue', 'fullDate': 'Tuesday, 4 Feb 2025'},\n    {'dayNum': 5, 'dayName': 'Wed', 'fullDate': 'Wednesday, 5 Feb 2025'},\n    {'dayNum': 6, 'dayName': 'Thu', 'fullDate': 'Thursday, 6 Feb 2025'},\n    {'dayNum': 7, 'dayName': 'Fri', 'fullDate': 'Friday, 7 Feb 2025'},\n    {'dayNum': 8, 'dayName': 'Sat', 'fullDate': 'Saturday, 8 Feb 2025'},\n    {'dayNum': 9, 'dayName': 'Sun', 'fullDate': 'Sunday, 9 Feb 2025'},\n  ];\n\n  final List<Map<String, String>> _todayReminders = [\n    {\n      'time': '08.00 AM',\n      'title': 'Role-Playing Activity',\n      'description': 'Create simple dialogues using target vocabulary.',\n    },\n    {\n      'time': '08.40 AM',\n      'title': 'Group Discussion',\n      'description': 'Begin your day with essential language basics',\n    },\n    {\n      'time': '09.10 AM',\n      'title': 'Q&A and Wrap-Up',\n      'description': 'Give students time to ask questions and clarify doubts.',\n    },\n    {\n      'time': '10.00 AM',\n      'title': 'Break',\n      'description': 'Short break before the next session.',\n    },\n    {\n      'time': '10.30 AM',\n      'title': 'Vocabulary Building',\n      'description': 'Learn new words and phrases through interactive games.',\n    },\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.grey[50], // Light grey background as per image\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        backgroundColor: Colors.transparent, // Transparent to match image\n        elevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n          decoration: BoxDecoration(\n            color: Colors.white, // White background for the icon container\n            shape: BoxShape.circle,\n            boxShadow: [\n              BoxShadow(\n                color: Colors.grey.withOpacity(0.1),\n                spreadRadius: 1,\n                blurRadius: 5,\n                offset: const Offset(0, 3),\n              ),\n            ],\n          ),\n          child: IconButton(\n            icon: const Icon(Icons.arrow_back, color: Colors.black),\n            onPressed: () => Navigator.of(context).pop(),\n          ),\n        ),\n        actions: [\n          Container(\n            margin: const EdgeInsets.all(8),\n            decoration: BoxDecoration(\n              color: Colors.white, // White background for the icon container\n              shape: BoxShape.circle,\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.grey.withOpacity(0.1),\n                  spreadRadius: 1,\n                  blurRadius: 5,\n                  offset: const Offset(0, 3),\n                ),\n              ],\n            ),\n            child: IconButton(\n              icon: const Icon(Icons.add, color: Colors.black),\n              onPressed: () {\n                // Handle add new reminder\n              },\n            ),\n          ),\n        ],\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const SizedBox(height: 24), // Spacing from app bar\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 24.0),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  _weekDays[_selectedDayIndex]['fullDate']!,\n                  style: textTheme.bodyMedium?.copyWith(\n                    color: primaryColor, // Primary color for the date\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(height: 8),\n                Text(\n                  'Today\\'s Reminder',\n                  style: textTheme.headlineSmall?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                const SizedBox(height: 24),\n              ],\n            ),\n          ),\n          // Date Selector Row\n          SizedBox(\n            height: 80, // Height to accommodate number and text\n            child: ListView.builder(\n              scrollDirection: Axis.horizontal,\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              itemCount: _weekDays.length,\n              itemBuilder: (context, index) {\n                final dayData = _weekDays[index];\n                final isSelected = index == _selectedDayIndex;\n                return GestureDetector(\n                  onTap: () {\n                    setState(() {\n                      _selectedDayIndex = index;\n                    });\n                  },\n                  child: Container(\n                    width: 55, // Fixed width for each day cell\n                    margin: const EdgeInsets.only(right: 12.0),\n                    decoration: BoxDecoration(\n                      color: isSelected ? primaryColor : Colors.white,\n                      borderRadius: BorderRadius.circular(16.0),\n                      boxShadow: [\n                        BoxShadow(\n                          color: Colors.grey.withOpacity(0.1),\n                          spreadRadius: 1,\n                          blurRadius: 5,\n                          offset: const Offset(0, 3),\n                        ),\n                      ],\n                    ),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Text(\n                          '${dayData['dayNum']}',\n                          style: textTheme.titleLarge?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: isSelected ? Colors.white : Colors.black,\n                          ),\n                        ),\n                        Text(\n                          dayData['dayName']!,\n                          style: textTheme.bodySmall?.copyWith(\n                            color:\n                                isSelected\n                                    ? Colors.white.withOpacity(0.8)\n                                    : Colors.grey[600],\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                );\n              },\n            ),\n          ),\n          const SizedBox(height: 24),\n\n          // Today's Reminders List\n          Expanded(\n            child: ListView.builder(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              itemCount: _todayReminders.length,\n              itemBuilder: (context, index) {\n                final reminder = _todayReminders[index];\n                return _buildReminderItem(\n                  context,\n                  reminder['time']!,\n                  reminder['title']!,\n                  reminder['description']!,\n                  primaryColor,\n                  textTheme,\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildReminderItem(\n    BuildContext context,\n    String time,\n    String title,\n    String description,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 16.0),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 80, // Fixed width for time column\n            child: Text(\n              time,\n              style: textTheme.bodyLarge?.copyWith(\n                color: Colors.grey[700],\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n          const SizedBox(width: 16),\n          Expanded(\n            child: Container(\n              padding: const EdgeInsets.all(16.0),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(16.0),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.1),\n                    spreadRadius: 1,\n                    blurRadius: 5,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Row(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Container(\n                    width: 4, // Width of the green vertical line\n                    height: 50, // Height of the green vertical line\n                    decoration: BoxDecoration(\n                      color: primaryColor,\n                      borderRadius: BorderRadius.circular(\n                        2,\n                      ), // Rounded caps for the line\n                    ),\n                    margin: const EdgeInsets.only(right: 12.0),\n                  ),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          title,\n                          style: textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: Colors.black,\n                          ),\n                          maxLines: 2,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                        const SizedBox(height: 4),\n                        Text(\n                          description,\n                          style: textTheme.bodyMedium?.copyWith(\n                            color: Colors.grey[700],\n                          ),\n                          maxLines: 2,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\create_new_password_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass CreateNewPasswordScreen extends StatefulWidget {\n  const CreateNewPasswordScreen({super.key});\n\n  @override\n  State<CreateNewPasswordScreen> createState() =>\n      _CreateNewPasswordScreenState();\n}\n\nclass _CreateNewPasswordScreenState extends State<CreateNewPasswordScreen> {\n  final TextEditingController _newPasswordController = TextEditingController();\n  final TextEditingController _confirmPasswordController =\n      TextEditingController();\n\n  bool _passwordsMatch = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _newPasswordController.addListener(_checkPasswordsMatch);\n    _confirmPasswordController.addListener(_checkPasswordsMatch);\n  }\n\n  @override\n  void dispose() {\n    _newPasswordController.dispose();\n    _confirmPasswordController.dispose();\n    super.dispose();\n  }\n\n  void _checkPasswordsMatch() {\n    setState(() {\n      _passwordsMatch =\n          _newPasswordController.text.isNotEmpty &&\n          _newPasswordController.text == _confirmPasswordController.text;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Create New Password',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Enter your new password to re-access your account',\n              style: textTheme.bodyLarge?.copyWith(color: Colors.grey[700]),\n            ),\n            const SizedBox(height: 24),\n            Text(\n              'New Password',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            AuthTextfields().buildPasswordField(\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 20),\n            Text(\n              'Confirm New Password',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            AuthTextfields().buildPasswordField(\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 12),\n            if (_newPasswordController.text.isNotEmpty &&\n                _confirmPasswordController.text.isNotEmpty)\n              Row(\n                children: [\n                  Icon(\n                    _passwordsMatch ? Icons.check_circle : Icons.error,\n                    color: _passwordsMatch ? Colors.green : Colors.red,\n                    size: 20,\n                  ),\n                  const SizedBox(width: 8),\n                  Text(\n                    _passwordsMatch\n                        ? 'Your password is match!'\n                        : 'Passwords do not match',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: _passwordsMatch ? Colors.green : Colors.red,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ],\n              ),\n            const SizedBox(height: 40),\n            PrimaryTextButton(text: \"Create Password\"),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\edit_profile_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:flutter/material.dart';\n\nclass EditProfileScreen extends StatefulWidget {\n  const EditProfileScreen({super.key});\n\n  @override\n  State<EditProfileScreen> createState() => _EditProfileScreenState();\n}\n\nclass _EditProfileScreenState extends State<EditProfileScreen> {\n  final TextEditingController _fullNameController = TextEditingController();\n  final TextEditingController _emailController = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize controllers with placeholder data as per image\n    _fullNameController.text = 'Malikk Wibowo';\n    _emailController.text = 'Malikkwibowo@gmail.com';\n  }\n\n  @override\n  void dispose() {\n    _fullNameController.dispose();\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  void _saveProfile() {\n    // Implement save profile logic here\n    ScaffoldMessenger.of(context).showSnackBar(\n      const SnackBar(\n        content: Text('Profile saved successfully (logic not implemented).'),\n        duration: Duration(seconds: 2),\n      ),\n    );\n    // Optionally navigate back\n    Navigator.pop(context);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Edit Profile',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Center(\n              child: Stack(\n                children: [\n                  const CircleAvatar(\n                    radius: 60,\n                    backgroundImage: NetworkImage(\n                      'https://picsum.photos/120/120', // Placeholder profile image\n                    ),\n                  ),\n                  Positioned(\n                    bottom: 0,\n                    right: 0,\n                    child: Container(\n                      width: 40,\n                      height: 40,\n                      decoration: BoxDecoration(\n                        color:\n                            primaryColor, // Primary color background for camera icon\n                        shape: BoxShape.circle,\n                        border: Border.all(\n                          color: Colors.white,\n                          width: 2,\n                        ), // White border\n                      ),\n                      child: IconButton(\n                        icon: const Icon(\n                          Icons.camera_alt,\n                          color: Colors.white, // White camera icon\n                          size: 20,\n                        ),\n                        onPressed: () {\n                          // Implement image selection logic\n                        },\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 32),\n\n            // Full Name Input\n            AuthTextfields().buildTextField(\n              labelText: \"Full Name\",\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 20),\n\n            AuthTextfields().buildTextField(\n              labelText: \"Email\",\n              controller: TextEditingController(),\n            ),\n\n            const Spacer(), // Pushes the button to the bottom\n            // Save Button\n            SizedBox(\n              width: double.infinity,\n              child: ElevatedButton(\n                onPressed: _saveProfile,\n                style: ElevatedButton.styleFrom(\n                  padding: const EdgeInsets.symmetric(vertical: 16.0),\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(30),\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.symmetric(vertical: 4.0),\n                  child: Text(\n                    'Save',\n                    style: textTheme.titleMedium?.copyWith(\n                      color: Colors.white,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\faq_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass FaqScreen extends StatefulWidget {\n  const FaqScreen({super.key});\n\n  @override\n  State<FaqScreen> createState() => _FaqScreenState();\n}\n\nclass _FaqScreenState extends State<FaqScreen> {\n  final TextEditingController _searchController = TextEditingController();\n\n  // List of FAQ items, with a boolean to track their expanded state\n  final List<Map<String, dynamic>> _faqItems = [\n    {\n      'question': 'Is it accessible or not by internet?',\n      'answer':\n          'Cannot be accessed if there is no internet. All courses here are online based and require an internet connection.',\n      'isExpanded': true, // First item is expanded by default as per image\n    },\n    {\n      'question': 'How do I buy a course?',\n      'answer':\n          'You can buy a course by navigating to the course details page and clicking the \"Buy Course\" button. Follow the prompts to complete your purchase.',\n      'isExpanded': false,\n    },\n    {\n      'question': 'Are there any free courses?',\n      'answer':\n          'Yes, we offer a selection of free courses to get you started. Look for courses marked \"Free\" in our catalog.',\n      'isExpanded': false,\n    },\n    {\n      'question': 'On what devices can the application be used?',\n      'answer':\n          'Our application is compatible with iOS and Android mobile devices, as well as tablets and desktop browsers.',\n      'isExpanded': false,\n    },\n    {\n      'question': 'How many mentors are available?',\n      'answer':\n          'We have over 500 experienced mentors across various fields ready to guide you in your learning journey.',\n      'isExpanded': false,\n    },\n    {\n      'question': 'How to refund a course',\n      'answer':\n          'Refunds are processed according to our refund policy. Please visit the \"Help & Support\" section or contact our customer service for assistance.',\n      'isExpanded': false,\n    },\n  ];\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.grey[50], // Light grey background for the screen\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'FAQ',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 25.0,\n              vertical: 16.0,\n            ),\n            child: TextField(\n              controller: _searchController,\n              decoration: InputDecoration(\n                hintText: 'Search Something',\n                prefixIcon: Padding(\n                  padding: const EdgeInsets.only(left: 16.0, top: 8, bottom: 8),\n                  child: Icon(Icons.search, color: Colors.grey[600]),\n                ),\n                suffixIcon: Padding(\n                  padding: const EdgeInsets.only(right: 8.0),\n                  child: IconButton(\n                    icon: Icon(Icons.close, color: Colors.grey[600]),\n                    onPressed: () {\n                      _searchController.clear();\n                      // Perform search clear logic\n                    },\n                  ),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: primaryColor),\n                  borderRadius: BorderRadius.circular(15),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(15),\n                  borderSide: BorderSide(color: Colors.grey[300]!),\n                ),\n                filled: true,\n                fillColor: Colors.white, // White background for the input\n                contentPadding: const EdgeInsets.symmetric(\n                  vertical: 16.0,\n                  horizontal: 16.0,\n                ),\n              ),\n              onChanged: (value) {\n                // Perform search as user types\n              },\n            ),\n          ),\n          Expanded(\n            child: ListView.builder(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 24.0,\n                vertical: 8.0,\n              ),\n              itemCount: _faqItems.length,\n              itemBuilder: (context, index) {\n                final faq = _faqItems[index];\n                return Padding(\n                  padding: const EdgeInsets.only(bottom: 16.0),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      color:\n                          Colors\n                              .white, // White background for FAQ item container\n                      borderRadius: BorderRadius.circular(16.0),\n                      boxShadow: [\n                        BoxShadow(\n                          color: Colors.black.withValues(\n                            alpha: 0.05,\n                          ), // Subtle shadow\n                          spreadRadius: 0,\n                          blurRadius: 5,\n                          offset: const Offset(0, 2),\n                        ),\n                      ],\n                    ),\n                    child: ClipRRect(\n                      borderRadius: BorderRadius.circular(16.0),\n                      child: ExpansionTile(\n                        key: PageStorageKey(\n                          'faq_$index',\n                        ), // Important for state persistence\n                        initiallyExpanded: faq['isExpanded'],\n                        onExpansionChanged: (bool expanded) {\n                          setState(() {\n                            faq['isExpanded'] = expanded;\n                          });\n                        },\n                        // Explicitly remove default borders/lines from ExpansionTile itself\n                        shape: const Border.fromBorderSide(\n                          BorderSide.none,\n                        ), // No border when collapsed\n                        collapsedShape: const Border.fromBorderSide(\n                          BorderSide.none,\n                        ), // No border when collapsed\n                        tilePadding: const EdgeInsets.symmetric(\n                          horizontal: 16.0,\n                          vertical: 8.0,\n                        ),\n                        title: Text(\n                          faq['question'],\n                          style: textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: Colors.black,\n                          ),\n                        ),\n                        trailing: Icon(\n                          faq['isExpanded']\n                              ? Icons.remove_circle\n                              : Icons.add_circle,\n                          color:\n                              primaryColor, // Primary color for the add/remove icon\n                          size: 28, // Adjust size as needed to match screenshot\n                        ),\n                        children: <Widget>[\n                          Padding(\n                            padding: const EdgeInsets.fromLTRB(\n                              16.0,\n                              0.0,\n                              16.0,\n                              16.0,\n                            ),\n                            child: Text(\n                              faq['answer'],\n                              style: textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[700],\n                                height: 1.5,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\forgot_password_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass ForgotPasswordScreen extends StatefulWidget {\n  const ForgotPasswordScreen({super.key});\n\n  @override\n  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();\n}\n\nclass _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Forgot Password',\n          style: TextStyle(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Center(\n              child: Stack(\n                alignment: Alignment.center,\n                children: [\n                  Container(\n                    width: 120,\n                    height: 120,\n                    decoration: BoxDecoration(\n                      shape: BoxShape.circle,\n                      color: primaryColor.withValues(\n                        alpha: 0.1,\n                      ), // Light version of primary color\n                    ),\n                  ),\n                  Container(\n                    width: 80,\n                    height: 100,\n                    decoration: BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.circular(15),\n                      border: Border.all(color: Colors.grey[300]!, width: 2),\n                    ),\n                    child: Padding(\n                      padding: const EdgeInsets.all(16.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Container(\n                            width: 20,\n                            height: 8,\n                            decoration: BoxDecoration(\n                              color: primaryColor,\n                              borderRadius: BorderRadius.circular(4),\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          Container(\n                            width: 60,\n                            height: 6,\n                            color: Colors.grey[200],\n                          ),\n                          const SizedBox(height: 4),\n                          Container(\n                            width: 50,\n                            height: 6,\n                            color: Colors.grey[200],\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                  Positioned(\n                    top: 10,\n                    right: 10,\n                    child: Container(\n                      width: 40,\n                      height: 40,\n                      decoration: BoxDecoration(\n                        color: primaryColor,\n                        shape: BoxShape.circle,\n                      ),\n                      child: const Icon(\n                        Icons.lock,\n                        color: Colors.white,\n                        size: 20,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 40),\n            Text(\n              'Reset your password',\n              style: TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.w900,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'We will send a link to your email.',\n              style: textTheme.bodyLarge?.copyWith(color: Colors.grey[700]),\n            ),\n            const SizedBox(height: 24),\n\n            AuthTextfields().buildTextField(\n              labelText: \"Email\",\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 40),\n            PrimaryTextButton(text: \"Send Email\"),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\help_and_support_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass HelpAndSupportScreen extends StatefulWidget {\n  const HelpAndSupportScreen({super.key});\n\n  @override\n  State<HelpAndSupportScreen> createState() => _HelpAndSupportScreenState();\n}\n\nclass _HelpAndSupportScreenState extends State<HelpAndSupportScreen> {\n  int _selectedContentTypeIndex = 0; // 'Articles' selected by default\n\n  final List<String> _contentTypes = ['Articles', 'Guides', 'Videos'];\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n    return Scaffold(\n      backgroundColor: Colors.grey[50], // Light grey background for the screen\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Help & Support',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Content Types',\n              style: textTheme.titleMedium?.copyWith(\n                // Reduced font size to titleMedium\n                fontWeight: FontWeight.w900, // Increased weight\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 12),\n            Row(\n              children: List.generate(_contentTypes.length, (index) {\n                return Expanded(\n                  // Ensure chips take equal width\n                  child: Padding(\n                    padding: EdgeInsets.only(\n                      right: index == _contentTypes.length - 1 ? 0 : 8.0,\n                    ),\n                    child: _ContentTypeChip(\n                      label: _contentTypes[index],\n                      isSelected: index == _selectedContentTypeIndex,\n                      onTap: () {\n                        setState(() {\n                          _selectedContentTypeIndex = index;\n                        });\n                      },\n                    ),\n                  ),\n                );\n              }),\n            ),\n            const SizedBox(height: 24),\n\n            // Help & Support Cards\n            _SupportCard(\n              icon: Icons.school, // Graduation cap icon\n              title: 'Get to Know SkillUp',\n              description:\n                  'SkillUp is an online course platform that can make it easier for you to learn various fields. You can study with experienced mentors.',\n              onLearnMore: () => {},\n            ),\n            const SizedBox(height: 16),\n            _SupportCard(\n              icon: Icons.chat_bubble_outline, // Chat bubble icon\n              title: 'Documentation',\n              description:\n                  'Our documentation can make it easier for you to access and use application.',\n              onLearnMore: () => {},\n            ),\n            const SizedBox(height: 16), // Additional spacing at the bottom\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _ContentTypeChip extends StatelessWidget {\n  final String label;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const _ContentTypeChip({\n    required this.label,\n    required this.isSelected,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return OutlinedButton(\n      onPressed: onTap,\n      style: OutlinedButton.styleFrom(\n        backgroundColor: isSelected ? primaryColor : Colors.transparent,\n        foregroundColor:\n            isSelected\n                ? Colors.white\n                : primaryColor, // Text color: white when selected\n        side: BorderSide(\n          color: isSelected ? Colors.transparent : primaryColor, // Border color\n          width: 1.5,\n        ),\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(30.0), // Rounded corners\n        ),\n        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0),\n        elevation: 0, // No shadow\n      ),\n      child: Text(\n        label,\n        style: textTheme.bodyLarge?.copyWith(\n          color: isSelected ? Colors.white : Colors.black,\n          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n        ),\n      ),\n    );\n  }\n}\n\nclass _SupportCard extends StatelessWidget {\n  final IconData icon;\n  final String title;\n  final String description;\n  final VoidCallback onLearnMore;\n\n  const _SupportCard({\n    required this.icon,\n    required this.title,\n    required this.description,\n    required this.onLearnMore,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Container(\n      padding: const EdgeInsets.all(20.0),\n      decoration: BoxDecoration(\n        color: Colors.white, // White background for the card\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.black.withValues(alpha: 0.05), // Subtle shadow\n            spreadRadius: 0,\n            blurRadius: 5,\n            offset: const Offset(0, 2),\n          ),\n        ],\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Icon(\n            icon,\n            color: primaryColor, // Icon color matches primary theme\n            size: 30, // Reduced icon size\n          ),\n          const SizedBox(height: 16),\n          Text(\n            title,\n            style: textTheme.titleLarge?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: Colors.black,\n            ),\n          ),\n          const SizedBox(height: 8),\n          Text(\n            description,\n            style: textTheme.bodyLarge?.copyWith(\n              color: Colors.grey[700],\n              height: 1.5,\n            ),\n            maxLines: 3, // Limit description lines\n            overflow: TextOverflow.ellipsis,\n          ),\n          const SizedBox(height: 16),\n          GestureDetector(\n            onTap: onLearnMore,\n            child: Row(\n              mainAxisSize: MainAxisSize.min, // Wrap content tightly\n              children: [\n                Text(\n                  'Learn More',\n                  style: textTheme.bodyLarge?.copyWith(\n                    color: primaryColor,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(width: 8),\n                Icon(Icons.arrow_forward, color: primaryColor, size: 20),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\home_screen.dart\n```dart\nimport 'package:canwa/Widgets/appbar.dart';\nimport 'package:flutter/material.dart';\n\nimport 'package:canwa/Widgets/category_chip.dart'; // Import the new CategoryChip\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({super.key});\n\n  @override\n  State<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  int _selectedIndex =\n      0; // 0 for Home, 1 for Wishlist, 2 for My Course, 3 for Profile\n\n  final List<String> _courseCategories = [\n    'Education',\n    'Technology',\n    'Design',\n    'Language',\n    'Health and Wellness',\n    'Business and Finance',\n    'Data Science',\n    'Marketing',\n    'Art',\n    'Music',\n  ];\n\n  // Placeholder for selected category, if we wanted to make them selectable\n  // int? _selectedCategoryIndex;\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n    // In a real app, you would navigate to different screens here\n    // print('Tapped index: $index');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: CustomAppBar(),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Latest quiz Section\n            _buildSectionHeader(\n              context,\n              'Latest quiz',\n              showPagination: true,\n              currentPage: 0, // Assuming 3 pages for pagination, current is 0\n              totalPages: 3,\n            ),\n            const SizedBox(height: 16),\n            _buildLatestQuizCard(context),\n            const SizedBox(height: 32),\n\n            // Course Categories Section\n            _buildSectionHeader(\n              context,\n              'Course Categories',\n              onSeeAllTap: () => {},\n            ),\n            const SizedBox(height: 16),\n            _buildCourseCategoriesList(context),\n            const SizedBox(height: 32),\n\n            // Recommendation Section\n            _buildSectionHeader(\n              context,\n              'Recommendation',\n              onSeeAllTap: () => {},\n            ),\n            const SizedBox(height: 16),\n            _buildRecommendationCourseList(context),\n            const SizedBox(height: 20), // Padding for bottom nav bar\n          ],\n        ),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n            ),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n            ),\n            label: 'Wishlist',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 2\n                  ? Icons.play_circle_fill\n                  : Icons.play_circle_outline,\n            ),\n            label: 'My Course',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n            ),\n            label: 'Profile',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: primaryColor,\n        unselectedItemColor: Colors.grey,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n        selectedLabelStyle: textTheme.bodySmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: textTheme.bodySmall,\n      ),\n    );\n  }\n\n  Widget _buildSectionHeader(\n    BuildContext context,\n    String title, {\n    VoidCallback? onSeeAllTap,\n    bool showPagination = false,\n    int currentPage = 0,\n    int totalPages = 0,\n  }) {\n    final primaryColor = Theme.of(context).primaryColor;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          title,\n          style: TextStyle(\n            fontSize: 16,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        if (showPagination)\n          Row(\n            children: List.generate(totalPages, (index) {\n              return Container(\n                margin: const EdgeInsets.symmetric(horizontal: 2.0),\n                width: currentPage == index ? 24 : 8,\n                height: 8,\n                decoration: BoxDecoration(\n                  color: currentPage == index ? primaryColor : Colors.grey[300],\n                  borderRadius: BorderRadius.circular(4),\n                ),\n              );\n            }),\n          )\n        else if (onSeeAllTap != null)\n          TextButton(\n            onPressed: onSeeAllTap,\n            style: TextButton.styleFrom(\n              padding: EdgeInsets.zero,\n              minimumSize: Size.zero,\n              tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n            ),\n            child: Text(\n              'See All',\n              style: TextStyle(\n                fontSize: 16,\n                color: primaryColor,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n      ],\n    );\n  }\n\n  Widget _buildLatestQuizCard(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    return Container(\n      width: double.infinity,\n      height: 200,\n      decoration: BoxDecoration(\n        color: primaryColor, // Using primary color as per theme\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Stack(\n        children: [\n          Positioned.fill(\n            child: ClipRRect(\n              borderRadius: BorderRadius.circular(16.0),\n              child: Image.network(\n                'https://picsum.photos/id/401/400/200', // Placeholder image for the background\n                fit: BoxFit.cover,\n                color: Colors.black.withValues(\n                  alpha: 0.2,\n                ), // Darken the image slightly\n                colorBlendMode: BlendMode.darken,\n              ),\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(24.0),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Text(\n                  'Unleash Your Creative Knowledge!',\n                  style: TextStyle(\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.white,\n                  ),\n                ),\n                const SizedBox(height: 8),\n                Row(\n                  children: [\n                    Icon(\n                      Icons.quiz,\n                      color: Colors.white.withValues(alpha: 0.8),\n                      size: 18,\n                    ),\n                    const SizedBox(width: 4),\n                    Text(\n                      '5 Quizzes',\n                      style: textTheme.bodyMedium?.copyWith(\n                        color: Colors.white.withValues(alpha: 0.8),\n                      ),\n                    ),\n                    const SizedBox(width: 12),\n                    Icon(\n                      Icons.access_time,\n                      color: Colors.white.withValues(alpha: 0.8),\n                      size: 18,\n                    ),\n                    const SizedBox(width: 4),\n                    Text(\n                      '1.5 Hours',\n                      style: textTheme.bodyMedium?.copyWith(\n                        color: Colors.white.withValues(alpha: 0.8),\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 20),\n                ElevatedButton(\n                  onPressed: () {},\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.white, // White button background\n                    foregroundColor: primaryColor, // Primary color text\n                    padding: const EdgeInsets.symmetric(\n                      horizontal: 24,\n                      vertical: 12,\n                    ),\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12.0),\n                    ),\n                    elevation: 0, // No shadow for this button\n                  ),\n                  child: Text(\n                    'Start Quiz',\n                    style: textTheme.titleSmall?.copyWith(\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildCourseCategoriesList(BuildContext context) {\n    return SizedBox(\n      height: 40, // Height for the chips\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: _courseCategories.length,\n        itemBuilder: (context, index) {\n          return Padding(\n            padding: const EdgeInsets.only(right: 12.0),\n            child: CategoryChip(\n              name: _courseCategories[index],\n              // isSelected: index == _selectedCategoryIndex, // Example for selectable\n              isSelected: false, // For now, all are unselected as per image\n              onTap: () {\n                // setState(() {\n                //   _selectedCategoryIndex = index;\n                // });\n              },\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildRecommendationCourseList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    final List<Map<String, dynamic>> courses = [\n      {\n        'category': 'Graphic Design',\n        'title': 'Expert Wireframing for Mobile',\n        'image': 'https://picsum.photos/id/600/200/150',\n        'rating': 4.5,\n        'reviews': 1239,\n        'price': '\\$499',\n        'oldPrice': '\\$699',\n        'tag': null,\n        'isFavorite': false, // Added favorite state\n      },\n      {\n        'category': 'Science',\n        'title': 'Become a Great Scientist',\n        'image': 'https://picsum.photos/id/603/200/150',\n        'rating': 4.2,\n        'reviews': 886,\n        'price': '\\$399',\n        'oldPrice': '\\$499',\n        'tag': null,\n        'isFavorite': false,\n      },\n      {\n        'category': 'Programming',\n        'title': 'Advanced React.js for Modern Web Apps',\n        'image': 'https://picsum.photos/id/602/200/150',\n        'rating': 4.8,\n        'reviews': 1500,\n        'price': '\\$599',\n        'oldPrice': '\\$799',\n        'tag': 'Best Seller',\n        'isFavorite': false,\n      },\n    ];\n\n    return SizedBox(\n      height: 280, // Height for course cards\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: courses.length,\n        itemBuilder: (context, index) {\n          final course = courses[index];\n          return Container(\n            width: 250, // Fixed width for each card\n            margin: const EdgeInsets.only(right: 16.0),\n            decoration: BoxDecoration(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(16.0),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.grey.withValues(alpha: 0.1),\n                  spreadRadius: 1,\n                  blurRadius: 5,\n                  offset: const Offset(0, 3),\n                ),\n              ],\n            ),\n            child: Material(\n              color: Colors.transparent,\n              child: InkWell(\n                borderRadius: BorderRadius.circular(16.0),\n                onTap: () {\n                  // Handle course card tap\n                  print('Course tapped: ${course['title']}');\n                  // You can navigate to course detail page here\n                  // Navigator.push(context, MaterialPageRoute(builder: (context) => CourseDetailPage(course: course)));\n                },\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    ClipRRect(\n                      borderRadius: const BorderRadius.vertical(\n                        top: Radius.circular(16.0),\n                      ),\n                      child: Stack(\n                        children: [\n                          Image.network(\n                            course['image']!,\n                            height: 120,\n                            width: double.infinity,\n                            fit: BoxFit.cover,\n                          ),\n                          Positioned(\n                            top: 12,\n                            right: 12,\n                            child: StatefulBuilder(\n                              builder: (context, setState) {\n                                return Material(\n                                  color: Colors.white.withValues(alpha: 0.8),\n                                  shape: const CircleBorder(),\n                                  child: InkWell(\n                                    borderRadius: BorderRadius.circular(20),\n                                    onTap: () {\n                                      setState(() {\n                                        course['isFavorite'] =\n                                            !course['isFavorite'];\n                                      });\n                                      // You can also call a callback here to update parent state\n                                      print(\n                                        'Favorite toggled for: ${course['title']}',\n                                      );\n                                    },\n                                    child: Padding(\n                                      padding: const EdgeInsets.all(8.0),\n                                      child: Icon(\n                                        course['isFavorite']\n                                            ? Icons.favorite\n                                            : Icons.favorite_border,\n                                        color:\n                                            course['isFavorite']\n                                                ? Colors.red\n                                                : Colors.black,\n                                        size: 20,\n                                      ),\n                                    ),\n                                  ),\n                                );\n                              },\n                            ),\n                          ),\n                          if (course['tag'] != null)\n                            Positioned(\n                              top: 12,\n                              left: 12,\n                              child: Container(\n                                padding: const EdgeInsets.symmetric(\n                                  horizontal: 8,\n                                  vertical: 4,\n                                ),\n                                decoration: BoxDecoration(\n                                  color: Colors.black.withValues(alpha: 0.7),\n                                  borderRadius: BorderRadius.circular(8),\n                                ),\n                                child: Text(\n                                  course['tag']!,\n                                  style: textTheme.bodySmall?.copyWith(\n                                    color: Colors.white,\n                                    fontWeight: FontWeight.bold,\n                                  ),\n                                ),\n                              ),\n                            ),\n                        ],\n                      ),\n                    ),\n                    Padding(\n                      padding: const EdgeInsets.all(12.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Text(\n                            course['category']!, // Added category text\n                            style: textTheme.bodySmall?.copyWith(\n                              color:\n                                  primaryColor, // Category text in primary color\n                              fontWeight: FontWeight.bold,\n                            ),\n                            maxLines: 1,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                          const SizedBox(height: 4),\n                          Text(\n                            course['title']!,\n                            style: const TextStyle(\n                              fontSize: 14,\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                            maxLines: 2,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                          const SizedBox(height: 8),\n                          Row(\n                            children: [\n                              const Icon(\n                                Icons.star,\n                                color: Colors.amber,\n                                size: 16,\n                              ),\n                              const SizedBox(width: 4),\n                              Text(\n                                '${course['rating']} (${course['reviews']} reviews)',\n                                style: textTheme.bodySmall?.copyWith(\n                                  color: Colors.grey[600],\n                                ),\n                              ),\n                            ],\n                          ),\n                          const SizedBox(height: 8),\n                          Row(\n                            crossAxisAlignment: CrossAxisAlignment.baseline,\n                            textBaseline: TextBaseline.alphabetic,\n                            children: [\n                              Text(\n                                course['price']!,\n                                style: textTheme.titleMedium?.copyWith(\n                                  fontWeight: FontWeight.bold,\n                                  color: primaryColor,\n                                ),\n                              ),\n                              const SizedBox(width: 8),\n                              Text(\n                                course['oldPrice']!,\n                                style: textTheme.bodyMedium?.copyWith(\n                                  color: Colors.grey[500],\n                                  decoration: TextDecoration.lineThrough,\n                                ),\n                              ),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\home_screen_2.dart\n```dart\nimport 'package:canwa/Widgets/appbar.dart';\nimport 'package:flutter/material.dart';\n\nclass HomeScreen2 extends StatefulWidget {\n  const HomeScreen2({super.key});\n\n  @override\n  State<HomeScreen2> createState() => _HomeScreen2State();\n}\n\nclass _HomeScreen2State extends State<HomeScreen2> {\n  int _selectedIndex =\n      0; // 0 for Home, 1 for Wishlist, 2 for My Course, 3 for Profile\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: CustomAppBar(),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Continue Learning Section\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              child: _buildSectionHeader(\n                context,\n                'Continue Learning',\n                onSeeAllTap: () => {},\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildContinueLearningList(context),\n            const SizedBox(height: 32),\n\n            // Popular Mentors Section\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              child: _buildSectionHeader(\n                context,\n                'Popular Mentors',\n                onSeeAllTap: () => {},\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildPopularMentorsList(context),\n            const SizedBox(height: 32),\n\n            // Popular Course Section\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              child: _buildSectionHeader(\n                context,\n                'Popular Course 🔥',\n                onSeeAllTap: () => {},\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildPopularCourseList(context),\n            const SizedBox(height: 20), // Padding for bottom nav bar\n          ],\n        ),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n            ),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n            ),\n            label: 'Wishlist',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 2\n                  ? Icons.play_circle_fill\n                  : Icons.play_circle_outline,\n            ),\n            label: 'My Course',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n            ),\n            label: 'Profile',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: primaryColor,\n        unselectedItemColor: Colors.grey,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n        selectedLabelStyle: textTheme.bodySmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: textTheme.bodySmall,\n      ),\n    );\n  }\n\n  Widget _buildSectionHeader(\n    BuildContext context,\n    String title, {\n    VoidCallback? onSeeAllTap,\n  }) {\n    final primaryColor = Theme.of(context).primaryColor;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          title,\n          style: TextStyle(\n            fontSize: 16,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        if (onSeeAllTap != null)\n          TextButton(\n            onPressed: onSeeAllTap,\n            style: TextButton.styleFrom(\n              padding: EdgeInsets.zero,\n              minimumSize: Size.zero,\n              tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n            ),\n            child: Text(\n              'See All',\n              style: TextStyle(\n                fontSize: 16,\n                color: primaryColor,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n      ],\n    );\n  }\n\n  Widget _buildContinueLearningList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    final List<Map<String, dynamic>> continueCourses = [\n      {\n        'image': 'https://picsum.photos/id/1043/100/80',\n        'title': 'Web Development Bootcamp: Build and Deploy Your Own Website',\n        'progress': 0.75,\n        'completed_text': '75% completed',\n      },\n      {\n        'image': 'https://picsum.photos/id/1047/100/80',\n        'title': 'Mobile App UI/UX Design Fundamentals with Figma',\n        'progress': 0.50,\n        'completed_text': '50% completed',\n      },\n      {\n        'image': 'https://picsum.photos/id/1048/100/80',\n        'title': 'Introduction to Data Science with Python',\n        'progress': 0.20,\n        'completed_text': '20% completed',\n      },\n    ];\n\n    return SizedBox(\n      height: 120, // Height for the continue learning cards\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        padding: const EdgeInsets.symmetric(horizontal: 24.0),\n        itemCount: continueCourses.length,\n        itemBuilder: (context, index) {\n          final course = continueCourses[index];\n          return Container(\n            width: 300, // Fixed width for each card\n            margin: const EdgeInsets.only(right: 16.0),\n            padding: const EdgeInsets.all(12.0),\n            decoration: BoxDecoration(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(16.0),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.grey.withValues(alpha: 0.1),\n                  spreadRadius: 1,\n                  blurRadius: 5,\n                  offset: const Offset(0, 3),\n                ),\n              ],\n            ),\n            child: Row(\n              children: [\n                ClipRRect(\n                  borderRadius: BorderRadius.circular(8.0),\n                  child: Image.network(\n                    course['image']!,\n                    height: 80,\n                    width: 100,\n                    fit: BoxFit.cover,\n                  ),\n                ),\n                const SizedBox(width: 12),\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Text(\n                        course['title']!,\n                        style: textTheme.titleSmall?.copyWith(\n                          fontWeight: FontWeight.bold,\n                          color: Colors.black,\n                        ),\n                        maxLines: 2,\n                        overflow: TextOverflow.ellipsis,\n                      ),\n                      const SizedBox(height: 8),\n                      LinearProgressIndicator(\n                        value: course['progress'],\n                        backgroundColor: Colors.grey[200],\n                        valueColor: AlwaysStoppedAnimation<Color>(primaryColor),\n                        minHeight: 6,\n                        borderRadius: BorderRadius.circular(3),\n                      ),\n                      const SizedBox(height: 4),\n                      Text(\n                        course['completed_text']!,\n                        style: textTheme.bodySmall?.copyWith(\n                          color: Colors.grey[600],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildPopularMentorsList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final List<Map<String, String>> mentors = [\n      {'name': 'Destiny', 'image': 'https://picsum.photos/id/1027/200/200'},\n      {'name': 'Kayley', 'image': 'https://picsum.photos/id/1025/200/200'},\n      {'name': 'Kirstin', 'image': 'https://picsum.photos/id/1011/200/200'},\n      {'name': 'Ramon', 'image': 'https://picsum.photos/id/1005/200/200'},\n      {'name': 'Gustave', 'image': 'https://picsum.photos/id/1009/200/200'},\n      {'name': 'Alice', 'image': 'https://picsum.photos/id/1004/200/200'},\n    ];\n\n    return SizedBox(\n      height: 120, // Height for mentor avatars and names\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        padding: const EdgeInsets.symmetric(horizontal: 24.0),\n        itemCount: mentors.length,\n        itemBuilder: (context, index) {\n          final mentor = mentors[index];\n          return Padding(\n            padding: const EdgeInsets.only(right: 16.0),\n            child: Column(\n              children: [\n                CircleAvatar(\n                  radius: 40,\n                  backgroundImage: NetworkImage(mentor['image']!),\n                ),\n                const SizedBox(height: 8),\n                Text(\n                  mentor['name']!,\n                  style: textTheme.bodyMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n              ],\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildPopularCourseList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    final List<Map<String, dynamic>> courses = [\n      {\n        'category': 'Design',\n        'title': 'Expert Wireframing for Mobile Design',\n        'image': 'https://picsum.photos/id/600/200/150',\n        'rating': 4.5,\n        'reviews': 1239,\n        'price': '\\$499',\n        'oldPrice': '\\$699',\n        'tag': 'New Course',\n        'isFavorite': false, // Added favorite state\n      },\n      {\n        'category': 'Language',\n        'title':\n            'TOEFL Preparation Course: Boost Your E...', // Truncated as per image\n        'image': 'https://picsum.photos/id/603/200/150',\n        'rating': 4.2,\n        'reviews': 886,\n        'price': '\\$399',\n        'oldPrice': '\\$499',\n        'tag': null,\n        'isFavorite': false,\n      },\n      {\n        'category': 'Programming',\n        'title': 'Advanced React.js for Modern Web Apps',\n        'image': 'https://picsum.photos/id/602/200/150',\n        'rating': 4.8,\n        'reviews': 1500,\n        'price': '\\$599',\n        'oldPrice': '\\$799',\n        'tag': 'Best Seller',\n        'isFavorite': false,\n      },\n    ];\n\n    return SizedBox(\n      height: 280, // Height for course cards\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        padding: const EdgeInsets.symmetric(horizontal: 24.0),\n        itemCount: courses.length,\n        itemBuilder: (context, index) {\n          final course = courses[index];\n          return Container(\n            width: 200, // Fixed width for each card\n            margin: const EdgeInsets.only(right: 16.0),\n            decoration: BoxDecoration(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(16.0),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.grey.withValues(alpha: 0.1),\n                  spreadRadius: 1,\n                  blurRadius: 5,\n                  offset: const Offset(0, 3),\n                ),\n              ],\n            ),\n            child: Material(\n              color: Colors.transparent,\n              child: InkWell(\n                borderRadius: BorderRadius.circular(16.0),\n                onTap: () {\n                  // Handle course card tap\n                  print('Popular course tapped: ${course['title']}');\n                  // You can navigate to course detail page here\n                  // Navigator.push(context, MaterialPageRoute(builder: (context) => CourseDetailPage(course: course)));\n                },\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    ClipRRect(\n                      borderRadius: const BorderRadius.vertical(\n                        top: Radius.circular(16.0),\n                      ),\n                      child: Stack(\n                        children: [\n                          Image.network(\n                            course['image']!,\n                            height: 120,\n                            width: double.infinity,\n                            fit: BoxFit.cover,\n                          ),\n                          Positioned(\n                            top: 12,\n                            right: 12,\n                            child: StatefulBuilder(\n                              builder: (context, setState) {\n                                return Material(\n                                  color: Colors.white.withValues(alpha: 0.8),\n                                  shape: const CircleBorder(),\n                                  child: InkWell(\n                                    borderRadius: BorderRadius.circular(20),\n                                    onTap: () {\n                                      setState(() {\n                                        course['isFavorite'] =\n                                            !course['isFavorite'];\n                                      });\n                                      // You can also call a callback here to update parent state\n                                      print(\n                                        'Favorite toggled for: ${course['title']}',\n                                      );\n                                    },\n                                    child: Padding(\n                                      padding: const EdgeInsets.all(8.0),\n                                      child: Icon(\n                                        course['isFavorite']\n                                            ? Icons.favorite\n                                            : Icons.favorite_border,\n                                        color:\n                                            course['isFavorite']\n                                                ? Colors.red\n                                                : Colors.black,\n                                        size: 20,\n                                      ),\n                                    ),\n                                  ),\n                                );\n                              },\n                            ),\n                          ),\n                          if (course['tag'] != null)\n                            Positioned(\n                              top: 12,\n                              left: 12,\n                              child: Container(\n                                padding: const EdgeInsets.symmetric(\n                                  horizontal: 8,\n                                  vertical: 4,\n                                ),\n                                decoration: BoxDecoration(\n                                  color: Colors.black.withValues(alpha: 0.7),\n                                  borderRadius: BorderRadius.circular(8),\n                                ),\n                                child: Text(\n                                  course['tag']!,\n                                  style: textTheme.bodySmall?.copyWith(\n                                    color: Colors.white,\n                                    fontWeight: FontWeight.bold,\n                                  ),\n                                ),\n                              ),\n                            ),\n                        ],\n                      ),\n                    ),\n                    Padding(\n                      padding: const EdgeInsets.all(12.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Text(\n                            course['category']!, // Added category text\n                            style: textTheme.bodySmall?.copyWith(\n                              color:\n                                  primaryColor, // Category text in primary color\n                              fontWeight: FontWeight.bold,\n                            ),\n                            maxLines: 1,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                          const SizedBox(height: 4),\n                          Text(\n                            course['title']!,\n                            style: textTheme.titleMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                            maxLines: 2,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                          const SizedBox(height: 8),\n                          Row(\n                            children: [\n                              const Icon(\n                                Icons.star,\n                                color: Colors.amber,\n                                size: 16,\n                              ),\n                              const SizedBox(width: 4),\n                              Text(\n                                '${course['rating']} (${course['reviews']} reviews)',\n                                style: textTheme.bodySmall?.copyWith(\n                                  color: Colors.grey[600],\n                                ),\n                              ),\n                            ],\n                          ),\n                          const SizedBox(height: 8),\n                          Row(\n                            crossAxisAlignment: CrossAxisAlignment.baseline,\n                            textBaseline: TextBaseline.alphabetic,\n                            children: [\n                              Text(\n                                course['price']!,\n                                style: textTheme.titleMedium?.copyWith(\n                                  fontWeight: FontWeight.bold,\n                                  color: primaryColor,\n                                ),\n                              ),\n                              const SizedBox(width: 8),\n                              Text(\n                                course['oldPrice']!,\n                                style: textTheme.bodyMedium?.copyWith(\n                                  color: Colors.grey[500],\n                                  decoration: TextDecoration.lineThrough,\n                                ),\n                              ),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\language_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass LanguageScreen extends StatefulWidget {\n  const LanguageScreen({super.key});\n\n  @override\n  State<LanguageScreen> createState() => _LanguageScreenState();\n}\n\nclass _LanguageScreenState extends State<LanguageScreen> {\n  final TextEditingController _searchController = TextEditingController();\n  // Changed default selection to Spanish (index 2) to match the provided screenshot\n  int _selectedLanguageIndex = 2;\n\n  final List<Map<String, String>> _languages = [\n    {\n      'name': 'English',\n      'flag': 'https://picsum.photos/id/20/40/25',\n    }, // Abstract placeholder for US flag\n    {\n      'name': 'Bahasa Indonesia',\n      'flag': 'https://picsum.photos/id/21/40/25',\n    }, // Abstract placeholder for Indonesia flag\n    {\n      'name': 'Spanish',\n      'flag': 'https://picsum.photos/id/22/40/25',\n    }, // Abstract placeholder for Spain flag\n    {\n      'name': 'Italian',\n      'flag': 'https://picsum.photos/id/23/40/25',\n    }, // Abstract placeholder for Italy flag\n    {\n      'name': 'French',\n      'flag': 'https://picsum.photos/id/24/40/25',\n    }, // Abstract placeholder for France flag\n    {\n      'name': 'Russian',\n      'flag': 'https://picsum.photos/id/25/40/25',\n    }, // Abstract placeholder for Russia flag\n    {\n      'name': 'Portuguese',\n      'flag': 'https://picsum.photos/id/26/40/25',\n    }, // Abstract placeholder for Portugal flag\n    {\n      'name': 'Deutsch',\n      'flag': 'https://picsum.photos/id/27/40/25',\n    }, // Abstract placeholder for Germany flag\n  ];\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor:\n          Colors\n              .white, // Screen background should be white/light grey as per image\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Language',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 24.0,\n              vertical: 16.0,\n            ),\n            child: TextField(\n              controller: _searchController,\n              decoration: InputDecoration(\n                hintText: 'Search Something',\n                prefixIcon: Padding(\n                  padding: const EdgeInsets.only(left: 16.0, top: 8, bottom: 8),\n                  child: Icon(Icons.search, color: Colors.grey[600]),\n                ),\n                suffixIcon: Padding(\n                  padding: const EdgeInsets.only(right: 8.0),\n                  child: IconButton(\n                    icon: Icon(Icons.close, color: Colors.grey[600]),\n                    onPressed: () {\n                      _searchController.clear();\n                      // Perform search clear logic\n                    },\n                  ),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: primaryColor),\n                  borderRadius: BorderRadius.circular(15),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(15),\n                  borderSide: BorderSide(color: Colors.grey[300]!),\n                ),\n                filled: true,\n                fillColor: Colors.white, // White background for the input\n                contentPadding: const EdgeInsets.symmetric(\n                  vertical: 16.0,\n                  horizontal: 16.0,\n                ),\n              ),\n              onChanged: (value) {\n                // Perform search as user types\n              },\n            ),\n          ),\n          Expanded(\n            child: Container(\n              // Wrap ListView with a Container to apply background color to the scrollable area\n              color: Colors.grey[50], // Light grey background for the list area\n              child: ListView.builder(\n                padding: const EdgeInsets.symmetric(\n                  horizontal: 24.0,\n                  vertical: 8.0,\n                ),\n                itemCount: _languages.length,\n                itemBuilder: (context, index) {\n                  final language = _languages[index];\n                  final isSelected = index == _selectedLanguageIndex;\n                  return GestureDetector(\n                    onTap: () {\n                      setState(() {\n                        _selectedLanguageIndex = index;\n                      });\n                    },\n                    child: Container(\n                      margin: const EdgeInsets.only(bottom: 16.0),\n                      padding: const EdgeInsets.symmetric(\n                        horizontal: 16.0,\n                        vertical: 16.0,\n                      ), // Adjusted padding\n                      decoration: BoxDecoration(\n                        color:\n                            Colors\n                                .white, // Darker grey for selected, white for unselected\n                        borderRadius: BorderRadius.circular(12.0),\n                        boxShadow: [\n                          BoxShadow(\n                            color: Colors.black.withValues(\n                              alpha: 0.05,\n                            ), // Subtle shadow\n                            spreadRadius: 0,\n                            blurRadius: 5,\n                            offset: const Offset(0, 2),\n                          ),\n                        ],\n                      ),\n                      child: Row(\n                        children: [\n                          ClipRRect(\n                            borderRadius: BorderRadius.circular(\n                              4.0,\n                            ), // Slightly rounded corners for flags\n                            child: Image.network(\n                              language['flag']!,\n                              width: 40,\n                              height: 25,\n                              fit: BoxFit.cover,\n                            ),\n                          ),\n                          const SizedBox(width: 16),\n                          Expanded(\n                            child: Text(\n                              language['name']!,\n                              style: textTheme.titleMedium?.copyWith(\n                                fontWeight:\n                                    isSelected\n                                        ? FontWeight.bold\n                                        : FontWeight.normal,\n                                color: Colors.black,\n                              ),\n                            ),\n                          ),\n                          if (isSelected)\n                            Container(\n                              width:\n                                  25, // Adjust size as needed for the square container\n                              height:\n                                  25, // Adjust size as needed for the square container\n                              decoration: BoxDecoration(\n                                color:\n                                    primaryColor, // Light background for the container\n                                borderRadius: BorderRadius.circular(\n                                  8.0,\n                                ), // Apply radius to the container\n                              ),\n                              child: Icon(\n                                Icons.check,\n                                color: Colors.white,\n                                size: 20,\n                              ),\n                            ),\n                        ],\n                      ),\n                    ),\n                  );\n                },\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\learning_interests_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass LearningInterestsScreen extends StatefulWidget {\n  const LearningInterestsScreen({super.key});\n\n  @override\n  State<LearningInterestsScreen> createState() =>\n      _LearningInterestsScreenState();\n}\n\nclass _LearningInterestsScreenState extends State<LearningInterestsScreen> {\n  final List<Map<String, dynamic>> _interests = [\n    {'name': 'Science', 'icon': Icons.public, 'isSelected': false},\n    {'name': 'Art', 'icon': Icons.palette, 'isSelected': false},\n    {'name': 'Gym', 'icon': Icons.fitness_center, 'isSelected': false},\n    {'name': 'Design', 'icon': Icons.design_services, 'isSelected': false},\n    {'name': 'Business', 'icon': Icons.business_center, 'isSelected': false},\n    {'name': 'Psychology', 'icon': Icons.psychology, 'isSelected': false},\n    {\n      'name': '3D Design',\n      'icon': Icons.ac_unit,\n      'isSelected': false,\n    }, // Placeholder icon\n    {'name': 'Music', 'icon': Icons.music_note, 'isSelected': false},\n    {'name': 'Trading', 'icon': Icons.trending_up, 'isSelected': false},\n    {'name': 'Pharmacist', 'icon': Icons.medication, 'isSelected': false},\n    {'name': 'Programming', 'icon': Icons.laptop_mac, 'isSelected': false},\n    {\n      'name': 'Lifestyle',\n      'icon': Icons.wine_bar,\n      'isSelected': false,\n    }, // Placeholder icon\n    {'name': 'Photography', 'icon': Icons.camera_alt, 'isSelected': false},\n  ];\n\n  void _toggleInterest(int index) {\n    setState(() {\n      _interests[index]['isSelected'] = !_interests[index]['isSelected'];\n    });\n  }\n\n  void _onDonePressed() {\n    List<String> selectedInterests =\n        _interests\n            .where((interest) => interest['isSelected'])\n            .map((interest) => interest['name'] as String)\n            .toList();\n\n    if (selectedInterests.length < 2) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please choose two or more interests.'),\n          duration: Duration(seconds: 2),\n        ),\n      );\n    } else {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text('Interests selected: ${selectedInterests.join(', ')}'),\n          duration: const Duration(seconds: 3),\n        ),\n      );\n      // Navigate to the next screen (e.g., home screen)\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        automaticallyImplyLeading: false, // No back button\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'What are you learning in?',\n              style: textTheme.headlineMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'Choose two or more.',\n              style: textTheme.bodyLarge?.copyWith(color: Colors.grey[700]),\n            ),\n            const SizedBox(height: 32),\n            Center(\n              // Wrapped with Center widget to align the Wrap\n              child: Wrap(\n                spacing: 12.0, // horizontal space between chips\n                runSpacing: 12.0, // vertical space between lines of chips\n                children: List.generate(_interests.length, (index) {\n                  return InterestChip(\n                    name: _interests[index]['name'],\n                    icon: _interests[index]['icon'],\n                    isSelected: _interests[index]['isSelected'],\n                    onTap: () => _toggleInterest(index),\n                  );\n                }),\n              ),\n            ),\n            const Spacer(), // Pushes content to the top and button to the bottom\n            PrimaryTextButton(\n              text: 'Done',\n              onPressed: () {\n                _onDonePressed();\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass InterestChip extends StatelessWidget {\n  final String name;\n  final IconData icon;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const InterestChip({\n    super.key,\n    required this.name,\n    required this.icon,\n    required this.isSelected,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return GestureDetector(\n      onTap: onTap,\n      child: Container(\n        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n        decoration: BoxDecoration(\n          color: isSelected ? primaryColor : Colors.white,\n          borderRadius: BorderRadius.circular(25.0),\n          border: Border.all(\n            color: isSelected ? primaryColor : Colors.grey[300]!,\n            width: 1.5,\n          ),\n        ),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Icon(\n              icon,\n              color:\n                  isSelected\n                      ? Colors.white\n                      : Colors.black, // Changed icon color\n              size: 20,\n            ),\n            const SizedBox(width: 8),\n            Text(\n              name,\n              style: textTheme.bodyLarge?.copyWith(\n                color: isSelected ? Colors.white : Colors.black,\n                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\learning_screen.dart\n```dart\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\n\nclass LearningScreen extends StatefulWidget {\n  const LearningScreen({super.key});\n\n  @override\n  State<LearningScreen> createState() => _LearningScreenState();\n}\n\nclass _LearningScreenState extends State<LearningScreen> {\n  // Assuming video progress and total duration for display\n  final double _videoProgress = 0.6; // 60% progress\n  final String _currentTime = '06:04';\n  final String _totalTime = '10:12';\n  final int _currentVideoIndex = 0; // For pagination dots\n  final int _totalVideos = 3; // For pagination dots\n\n  bool _isPlayingVideo = false; // State for play/pause button\n  bool _showFullDescription = false; // State for \"Read More\" functionality\n  int _currentPlayingLessonIndex = 1; // Index 1 for \"Tools\" as per image\n\n  final String _shortDescription =\n      'In this section you will learn what tools will be used in designing...';\n  final String _fullDescription =\n      'In this section you will learn what tools will be used in designing the user interface and user experience of mobile applications. This includes a deep dive into industry-standard software, collaborative platforms, and best practices for creating wireframes, prototypes, and final designs. We will cover tools for brainstorming, low-fidelity and high-fidelity mockups, and user testing. Understanding these tools is crucial for any aspiring UI/UX designer to efficiently bring their ideas to life and create intuitive and engaging mobile experiences. We will explore how to set up your design environment, manage design assets, and work effectively within design teams using various popular tools.';\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Learning',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.more_vert, color: Colors.black),\n            onPressed: () {},\n          ),\n        ],\n      ),\n      body: SingleChildScrollView(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Video Player Section\n            Container(\n              height: 220, // Height for the video player area\n              width: double.infinity,\n              color: Colors.black, // Placeholder for video player background\n              child: Stack(\n                children: [\n                  Image.network(\n                    'https://picsum.photos/id/1043/800/450', // Placeholder video thumbnail\n                    fit: BoxFit.cover,\n                    width: double.infinity,\n                    height: double.infinity,\n                  ),\n                  // Play/Pause Button\n                  Positioned.fill(\n                    child: Align(\n                      alignment: Alignment.center,\n                      child: Container(\n                        width: 60,\n                        height: 60,\n                        decoration: BoxDecoration(\n                          color: Colors.white.withValues(alpha: 0.9),\n                          shape: BoxShape.circle,\n                        ),\n                        child: IconButton(\n                          icon: Icon(\n                            _isPlayingVideo ? Icons.pause : Icons.play_arrow,\n                            color: primaryColor,\n                            size: 36,\n                          ),\n                          onPressed: () {\n                            setState(() {\n                              _isPlayingVideo = !_isPlayingVideo;\n                            });\n                          },\n                        ),\n                      ),\n                    ),\n                  ),\n                  // Bottom controls overlay\n                  Positioned(\n                    bottom: 0,\n                    left: 0,\n                    right: 0,\n                    child: Container(\n                      padding: const EdgeInsets.symmetric(\n                        horizontal: 16.0,\n                        vertical: 8.0,\n                      ),\n                      decoration: BoxDecoration(\n                        gradient: LinearGradient(\n                          begin: Alignment.bottomCenter,\n                          end: Alignment.topCenter,\n                          colors: [\n                            Colors.black.withValues(alpha: 0.6),\n                            Colors.transparent,\n                          ],\n                        ),\n                      ),\n                      child: Column(\n                        children: [\n                          Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: [\n                              Text(\n                                _currentTime,\n                                style: textTheme.bodySmall?.copyWith(\n                                  color: Colors.white,\n                                ),\n                              ),\n                              Text(\n                                _totalTime,\n                                style: textTheme.bodySmall?.copyWith(\n                                  color: Colors.white,\n                                ),\n                              ),\n                            ],\n                          ),\n                          const SizedBox(height: 4),\n                          LinearProgressIndicator(\n                            value: _videoProgress,\n                            backgroundColor: Colors.white.withValues(\n                              alpha: 0.3,\n                            ),\n                            valueColor: AlwaysStoppedAnimation<Color>(\n                              primaryColor,\n                            ),\n                            minHeight: 4,\n                            borderRadius: BorderRadius.circular(2),\n                          ),\n                          const SizedBox(height: 8),\n                          Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: [\n                              Row(\n                                children: List.generate(_totalVideos, (index) {\n                                  return Container(\n                                    margin: const EdgeInsets.symmetric(\n                                      horizontal: 4.0,\n                                    ),\n                                    width: 8,\n                                    height: 8,\n                                    decoration: BoxDecoration(\n                                      color:\n                                          index == _currentVideoIndex\n                                              ? primaryColor\n                                              : Colors.white.withValues(\n                                                alpha: 0.5,\n                                              ),\n                                      shape: BoxShape.circle,\n                                    ),\n                                  );\n                                }),\n                              ),\n                              IconButton(\n                                padding: EdgeInsets.all(0),\n                                onPressed: () {},\n                                icon: Icon(\n                                  Icons.fullscreen,\n                                  color: Colors.white,\n                                  size: 24,\n                                ),\n                              ),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            // Course Content Overview\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Part 2 - Expert Wireframing for Mobile Design',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: primaryColor,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  const SizedBox(height: 8),\n                  Text(\n                    'Tools',\n                    style: TextStyle(\n                      fontSize: 22,\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 8),\n                  RichText(\n                    text: TextSpan(\n                      text:\n                          _showFullDescription\n                              ? _fullDescription\n                              : _shortDescription,\n                      style: textTheme.bodyLarge?.copyWith(\n                        color: Colors.grey[700],\n                        height: 1.5,\n                      ),\n                      children: [\n                        if (!_showFullDescription)\n                          TextSpan(\n                            text: 'Read More',\n                            style: textTheme.bodyLarge?.copyWith(\n                              color: primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                            recognizer:\n                                TapGestureRecognizer()\n                                  ..onTap = () {\n                                    setState(() {\n                                      _showFullDescription = true;\n                                    });\n                                  },\n                          )\n                        else\n                          TextSpan(\n                            text:\n                                ' Read Less', // Added space for visual separation\n                            style: textTheme.bodyLarge?.copyWith(\n                              color: primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                            recognizer:\n                                TapGestureRecognizer()\n                                  ..onTap = () {\n                                    setState(() {\n                                      _showFullDescription = false;\n                                    });\n                                  },\n                          ),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(height: 24),\n\n                  // Mentor Info Section (Reused from CourseDetailScreen)\n                  Row(\n                    children: [\n                      const CircleAvatar(\n                        radius: 24,\n                        backgroundImage: NetworkImage(\n                          'https://picsum.photos/id/1005/200/200',\n                        ), // Placeholder mentor image\n                      ),\n                      const SizedBox(width: 12),\n                      Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Text(\n                            'Janny Andrea',\n                            style: textTheme.titleMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                          ),\n                          Text(\n                            'Best Mentor OnLearning',\n                            style: textTheme.bodySmall?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Spacer(),\n                      OutlinedButton(\n                        onPressed: () {},\n                        style: OutlinedButton.styleFrom(\n                          foregroundColor: primaryColor,\n                          side: BorderSide(\n                            color: primaryColor,\n                          ), // Primary color border\n                          shape: RoundedRectangleBorder(\n                            borderRadius: BorderRadius.circular(12.0),\n                          ),\n                          padding: const EdgeInsets.symmetric(\n                            horizontal: 16,\n                            vertical: 8,\n                          ),\n                        ),\n                        child: Text(\n                          'View Profile',\n                          style: textTheme.bodyMedium?.copyWith(\n                            color: primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 24),\n\n                  // Lessons List\n                  Text(\n                    'Section 1 - Preparation',\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  _buildLessonItem(\n                    context,\n                    1,\n                    'Introduction',\n                    'Video - 3 Min',\n                    true,\n                    primaryColor: primaryColor,\n                    textTheme: textTheme,\n                    onTap: () {\n                      setState(() {\n                        _currentPlayingLessonIndex =\n                            0; // Assuming 0-indexed for internal logic\n                      });\n                    },\n                    isCurrent: _currentPlayingLessonIndex == 0,\n                  ),\n                  _buildLessonItem(\n                    context,\n                    2,\n                    'Tools',\n                    'Video - 3 Min',\n                    false, // Not completed yet\n                    primaryColor: primaryColor,\n                    textTheme: textTheme,\n                    onTap: () {\n                      setState(() {\n                        _currentPlayingLessonIndex = 1;\n                      });\n                    },\n                    isCurrent: _currentPlayingLessonIndex == 1,\n                  ),\n                  _buildLessonItem(\n                    context,\n                    3,\n                    'Resources',\n                    'Video - 5 Min',\n                    false,\n                    primaryColor: primaryColor,\n                    textTheme: textTheme,\n                    onTap: () {\n                      setState(() {\n                        _currentPlayingLessonIndex = 2;\n                      });\n                    },\n                    isCurrent: _currentPlayingLessonIndex == 2,\n                  ),\n                  // Add more sections/lessons as needed\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildLessonItem(\n    BuildContext context,\n    int number,\n    String title,\n    String duration,\n    bool isCompleted, {\n    bool isCurrent = false,\n    required Color primaryColor,\n    required TextTheme textTheme,\n    required VoidCallback onTap, // Added onTap\n  }) {\n    return GestureDetector(\n      // Make the entire item tappable\n      onTap: onTap,\n      child: Container(\n        margin: const EdgeInsets.only(bottom: 12.0),\n        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),\n        decoration: BoxDecoration(\n          color: isCurrent ? primaryColor : Colors.white,\n          borderRadius: BorderRadius.circular(16.0),\n          border:\n              isCurrent\n                  ? null\n                  : Border.all(\n                    color: Colors.grey[200]!,\n                    width: 1.5,\n                  ), // Subtle border for unselected\n          boxShadow:\n              isCurrent\n                  ? [\n                    BoxShadow(\n                      color: primaryColor.withValues(alpha: 0.2),\n                      spreadRadius: 1,\n                      blurRadius: 8,\n                      offset: const Offset(0, 4),\n                    ),\n                  ]\n                  : null,\n        ),\n        child: Row(\n          children: [\n            Container(\n              width: 36,\n              height: 36,\n              decoration: BoxDecoration(\n                color: isCurrent ? Colors.white : Colors.grey[200],\n                shape: BoxShape.circle,\n              ),\n              alignment: Alignment.center,\n              child: Text(\n                '$number',\n                style: textTheme.bodyLarge?.copyWith(\n                  fontWeight: FontWeight.bold,\n                  color: isCurrent ? primaryColor : Colors.grey[600],\n                ),\n              ),\n            ),\n            const SizedBox(width: 16),\n            Expanded(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    title,\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: isCurrent ? Colors.white : Colors.black,\n                    ),\n                    maxLines: 1,\n                    overflow: TextOverflow.ellipsis,\n                  ),\n                  const SizedBox(height: 4),\n                  Text(\n                    duration,\n                    style: textTheme.bodySmall?.copyWith(\n                      color:\n                          isCurrent\n                              ? Colors.white.withValues(alpha: 0.8)\n                              : Colors.grey[600],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            if (isCompleted)\n              Icon(\n                Icons.check_circle,\n                color: isCurrent ? Colors.white : Colors.green,\n                size: 24,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\login_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:canwa/Widgets/social_auth_button.dart';\nimport 'package:flutter/material.dart';\n\nclass LoginScreen extends StatefulWidget {\n  const LoginScreen({super.key});\n\n  @override\n  State<LoginScreen> createState() => _LoginScreenState();\n}\n\nclass _LoginScreenState extends State<LoginScreen> {\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        automaticallyImplyLeading:\n            false, // No back button needed for a login screen\n        scrolledUnderElevation: 0,\n        title: Padding(\n          padding: const EdgeInsets.only(left: 8.0),\n          child: Row(\n            children: [\n              Icon(\n                Icons.book,\n                color: primaryColor,\n                size: 16,\n              ), // SkillUp logo icon\n              const SizedBox(width: 8),\n              Text(\n                'SkillUp',\n                style: TextStyle(\n                  fontSize: 16,\n                  fontWeight: FontWeight.bold,\n                  color: Colors.black,\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Welcome Back 👋',\n              style: TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'Enter your email and password to login',\n              style: TextStyle(fontSize: 14, color: Colors.grey[700]),\n            ),\n            const SizedBox(height: 24),\n\n            AuthTextfields().buildTextField(\n              labelText: \"Email\",\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 20),\n\n            AuthTextfields().buildPasswordField(\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 16),\n            Align(\n              alignment: Alignment.centerRight,\n              child: TextButton(\n                onPressed: () {\n                  // Handle forgot password\n                },\n                child: Text(\n                  'Forgot password?',\n                  style: textTheme.bodyMedium?.copyWith(\n                    color: primaryColor,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              ),\n            ),\n            const SizedBox(height: 24),\n            PrimaryTextButton(text: 'Login'),\n            const SizedBox(height: 24),\n            Center(\n              child: Text(\n                'or',\n                style: textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),\n              ),\n            ),\n            const SizedBox(height: 24),\n            SocialAuthButton(type: ButtonType.google, onPressed: () {}),\n            const SizedBox(height: 16),\n            SocialAuthButton(type: ButtonType.apple, onPressed: () {}),\n            const SizedBox(height: 24),\n            Center(\n              child: RichText(\n                text: TextSpan(\n                  text: 'Don\\'t have an account? ',\n                  style: textTheme.bodyLarge?.copyWith(color: Colors.black),\n                  children: [\n                    TextSpan(\n                      text: 'Sign Up',\n                      style: textTheme.bodyLarge?.copyWith(\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\my_course_screen.dart\n```dart\n// import 'package:flutter/material.dart';\n// // Reusing for consistency, though we'll make a new chip type to include icons\n\n// class MyCourseScreen extends StatefulWidget {\n//   const MyCourseScreen({super.key});\n\n//   @override\n//   State<MyCourseScreen> createState() => _MyCourseScreenState();\n// }\n\n// class _MyCourseScreenState extends State<MyCourseScreen> {\n//   final TextEditingController _searchController = TextEditingController();\n//   int _selectedCategoryIndex =\n//       1; // \"Science\" is selected by default as per image\n\n//   final List<Map<String, dynamic>> _categoryChipsWithIcons = [\n//     {'name': 'Programming', 'icon': Icons.laptop_mac}, // Placeholder icon\n//     {'name': 'Science', 'icon': Icons.public}, // Placeholder icon\n//     {'name': 'Design', 'icon': Icons.palette}, // Placeholder icon\n//     {'name': 'Business', 'icon': Icons.business_center}, // Placeholder icon\n//     {'name': 'Art', 'icon': Icons.brush}, // Placeholder icon\n//   ];\n\n//   final List<Map<String, dynamic>> _myCourses = [\n//     {\n//       'image': 'https://picsum.photos/id/1045/100/80',\n//       'title': 'Complete 3D Animation Using Blender',\n//       'author': 'Jane Cooper',\n//       'members': 420,\n//       'num_courses': 43,\n//       'status': 'not_started', // or 'completed', 'in_progress'\n//       'progress': 0.0,\n//     },\n//     {\n//       'image': 'https://picsum.photos/id/237/100/80',\n//       'title': 'Fitness Training : Basic Workouts & Body Building',\n//       'author': 'Esther Howard',\n//       'members': 100,\n//       'num_courses': 16,\n//       'status': 'completed',\n//       'progress': 1.0, // 100%\n//     },\n//     {\n//       'image': 'https://picsum.photos/id/1014/100/80',\n//       'title': 'Advance Trading : Forex Trading/Stock Trading',\n//       'author': 'Courtney Henry',\n//       'members': 221,\n//       'num_courses': 12,\n//       'status': 'in_progress',\n//       'progress': 0.52, // 52%\n//     },\n//     {\n//       'image': 'https://picsum.photos/id/100/100/80',\n//       'title': 'Introduction to Digital Photography',\n//       'author': 'Emily White',\n//       'members': 350,\n//       'num_courses': 25,\n//       'status': 'in_progress',\n//       'progress': 0.70, // 70%\n//     },\n//   ];\n\n//   int _selectedIndex =\n//       2; // 0 for Home, 1 for Wishlist, 2 for My Course, 3 for Profile\n\n//   void _onItemTapped(int index) {\n//     setState(() {\n//       _selectedIndex = index;\n//     });\n//     // In a real app, you would navigate to different screens here.\n//     // For now, it just highlights the selected tab.\n//   }\n\n//   @override\n//   void dispose() {\n//     _searchController.dispose();\n//     super.dispose();\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     final primaryColor = Theme.of(context).primaryColor;\n//     final textTheme = Theme.of(context).textTheme;\n\n//     return Scaffold(\n//       backgroundColor: Colors.white,\n//       appBar: AppBar(\n//         leading: IconButton(\n//           icon: Icon(\n//             Icons.arrow_back_ios,\n//             color: primaryColor,\n//             size: 20,\n//           ), // Black icon, transparent background\n//           onPressed: () {\n//             Navigator.of(context).pop();\n//           },\n//         ),\n//         scrolledUnderElevation: 0,\n//         title: Text(\n//           'My Course',\n//           style: TextStyle(\n//             fontSize: 18,\n//             fontWeight: FontWeight.bold,\n//             color: Colors.black,\n//           ),\n//         ),\n//         centerTitle: true,\n//         actions: [\n//           IconButton(\n//             icon: Icon(\n//               Icons.more_vert,\n//               color: Colors.black,\n//             ), // Black icon, transparent background\n//             onPressed: () {},\n//           ),\n//         ],\n//       ),\n//       body: Column(\n//         children: [\n//           Padding(\n//             padding: const EdgeInsets.symmetric(\n//               horizontal: 24.0,\n//               vertical: 16.0,\n//             ),\n//             child: Column(\n//               children: [\n//                 // Search Bar\n//                 TextField(\n//                   controller: _searchController,\n//                   decoration: InputDecoration(\n//                     hintText: 'Search Something',\n//                     prefixIcon: Padding(\n//                       padding: const EdgeInsets.only(\n//                         left: 16.0,\n//                         top: 8,\n//                         bottom: 8,\n//                       ),\n//                       child: Icon(Icons.search, color: Colors.grey[600]),\n//                     ),\n//                     suffixIcon: Padding(\n//                       padding: const EdgeInsets.only(right: 8.0),\n//                       child: IconButton(\n//                         icon: Icon(Icons.close, color: Colors.grey[600]),\n//                         onPressed: () {\n//                           _searchController.clear();\n//                           // Perform search clear logic\n//                         },\n//                       ),\n//                     ),\n//                     focusedBorder: OutlineInputBorder(\n//                       borderSide: BorderSide(color: primaryColor),\n//                       borderRadius: BorderRadius.circular(15),\n//                     ),\n//                     enabledBorder: OutlineInputBorder(\n//                       borderRadius: BorderRadius.circular(15),\n//                       borderSide: BorderSide(color: Colors.grey[300]!),\n//                     ),\n//                     filled: true,\n//                     fillColor: Colors.white, // White background for the input\n//                     contentPadding: const EdgeInsets.symmetric(\n//                       vertical: 16.0,\n//                       horizontal: 16.0,\n//                     ),\n//                   ),\n//                   onChanged: (value) {\n//                     // Perform search as user types\n//                   },\n//                 ),\n//                 const SizedBox(height: 16),\n\n//                 // Category Chips\n//                 SizedBox(\n//                   height: 40,\n//                   child: ListView.builder(\n//                     scrollDirection: Axis.horizontal,\n//                     itemCount: _categoryChipsWithIcons.length,\n//                     itemBuilder: (context, index) {\n//                       final chipData = _categoryChipsWithIcons[index];\n//                       return Padding(\n//                         padding: const EdgeInsets.only(right: 12.0),\n//                         child: _CategoryChipWithIcon(\n//                           name: chipData['name']!,\n//                           icon: chipData['icon']!,\n//                           isSelected: index == _selectedCategoryIndex,\n//                           onTap: () {\n//                             setState(() {\n//                               _selectedCategoryIndex = index;\n//                             });\n//                           },\n//                         ),\n//                       );\n//                     },\n//                   ),\n//                 ),\n//               ],\n//             ),\n//           ),\n\n//           // My Course List\n//           Expanded(\n//             child: ListView.separated(\n//               padding: const EdgeInsets.symmetric(\n//                 horizontal: 24.0,\n//                 vertical: 8.0,\n//               ),\n//               itemCount: _myCourses.length,\n//               itemBuilder: (context, index) {\n//                 final course = _myCourses[index];\n//                 return _buildMyCourseCard(\n//                   context,\n//                   course,\n//                   primaryColor,\n//                   textTheme,\n//                 );\n//               },\n//               separatorBuilder:\n//                   (context, index) =>\n//                       const SizedBox(height: 16), // Spacing between cards\n//             ),\n//           ),\n//         ],\n//       ),\n//       bottomNavigationBar: BottomNavigationBar(\n//         items: <BottomNavigationBarItem>[\n//           BottomNavigationBarItem(\n//             icon: Icon(\n//               _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n//             ),\n//             label: 'Home',\n//           ),\n//           BottomNavigationBarItem(\n//             icon: Icon(\n//               _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n//             ),\n//             label: 'Wishlist',\n//           ),\n//           BottomNavigationBarItem(\n//             icon: Icon(\n//               _selectedIndex == 2\n//                   ? Icons.play_circle_fill\n//                   : Icons.play_circle_outline,\n//             ),\n//             label: 'My Course',\n//           ),\n//           BottomNavigationBarItem(\n//             icon: Icon(\n//               _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n//             ),\n//             label: 'Profile',\n//           ),\n//         ],\n//         currentIndex: _selectedIndex,\n//         selectedItemColor: primaryColor,\n//         unselectedItemColor: Colors.grey,\n//         onTap: _onItemTapped,\n//         type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n//         selectedLabelStyle: textTheme.bodySmall?.copyWith(\n//           fontWeight: FontWeight.bold,\n//         ),\n//         unselectedLabelStyle: textTheme.bodySmall,\n//       ),\n//     );\n//   }\n\n//   Widget _buildMyCourseCard(\n//     BuildContext context,\n//     Map<String, dynamic> course,\n//     Color primaryColor,\n//     TextTheme textTheme,\n//   ) {\n//     return Container(\n//       padding: const EdgeInsets.all(12.0),\n//       decoration: BoxDecoration(\n//         color: Colors.white,\n//         borderRadius: BorderRadius.circular(16.0),\n//         border: Border.all(\n//           width: 0.5,\n//           color: Colors.grey.withValues(alpha: 0.5),\n//         ),\n//       ),\n//       child: Column(\n//         children: [\n//           Row(\n//             crossAxisAlignment: CrossAxisAlignment.start,\n//             children: [\n//               ClipRRect(\n//                 borderRadius: BorderRadius.circular(8.0),\n//                 child: Image.network(\n//                   course['image']!,\n//                   height: 64,\n//                   width: 64,\n//                   fit: BoxFit.cover,\n//                 ),\n//               ),\n//               const SizedBox(width: 12),\n//               Expanded(\n//                 child: Column(\n//                   crossAxisAlignment: CrossAxisAlignment.start,\n//                   children: [\n//                     Text(\n//                       course['title']!,\n//                       style: TextStyle(\n//                         fontSize: 14,\n//                         fontWeight: FontWeight.bold,\n//                         color: Colors.black,\n//                       ),\n//                       maxLines: 2,\n//                       overflow: TextOverflow.ellipsis,\n//                     ),\n//                     const SizedBox(height: 4),\n//                     Text(\n//                       course['author']!,\n//                       style: textTheme.bodyMedium?.copyWith(\n//                         color: Colors.grey[600],\n//                       ),\n//                       maxLines: 1,\n//                       overflow: TextOverflow.ellipsis,\n//                     ),\n//                     const SizedBox(height: 8),\n//                     Row(\n//                       children: [\n//                         Icon(\n//                           Icons.people_alt,\n//                           color: Colors.grey[600],\n//                           size: 18,\n//                         ),\n//                         const SizedBox(width: 4),\n//                         // Wrap with Flexible or Expanded to prevent overflow\n//                         Flexible(\n//                           child: Text(\n//                             '${course['members']} Members',\n//                             style: textTheme.bodySmall?.copyWith(\n//                               color: Colors.grey[600],\n//                             ),\n//                             maxLines: 1,\n//                             overflow: TextOverflow.ellipsis,\n//                           ),\n//                         ),\n//                         const SizedBox(width: 12),\n//                         Icon(\n//                           Icons.play_circle_outline,\n//                           color: Colors.grey[600],\n//                           size: 18,\n//                         ),\n//                         const SizedBox(width: 4),\n//                         // Wrap with Flexible or Expanded to prevent overflow\n//                         Flexible(\n//                           child: Text(\n//                             '${course['num_courses']} Courses',\n//                             style: textTheme.bodySmall?.copyWith(\n//                               color: Colors.grey[600],\n//                             ),\n//                             maxLines: 1,\n//                             overflow: TextOverflow.ellipsis,\n//                           ),\n//                         ),\n//                       ],\n//                     ),\n//                     const SizedBox(height: 8),\n//                     if (course['status'] == 'not_started')\n//                       Align(\n//                         alignment: Alignment.centerLeft,\n//                         child: TextButton(\n//                           onPressed: () {},\n//                           style: TextButton.styleFrom(\n//                             padding: EdgeInsets.zero,\n//                             minimumSize: Size.zero,\n//                             tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n//                           ),\n//                           child: Text(\n//                             'Start Course',\n//                             style: TextStyle(\n//                               fontSize: 14,\n//                               color: primaryColor,\n//                               fontWeight: FontWeight.bold,\n//                             ),\n//                           ),\n//                         ),\n//                       )\n//                     else if (course['status'] == 'completed')\n//                       Row(\n//                         children: [\n//                           Text(\n//                             'Complete',\n//                             style: TextStyle(\n//                               fontSize: 14,\n//                               color: Colors.black,\n//                               fontWeight: FontWeight.bold,\n//                             ),\n//                           ),\n//                           const Spacer(),\n//                           // Explicitly constrain width if overflow still occurs, or ensure enough space\n//                           Text(\n//                             '${(course['progress'] * 100).toInt()}%',\n//                             style: TextStyle(\n//                               fontSize: 14,\n//                               color: primaryColor,\n//                               fontWeight: FontWeight.bold,\n//                             ),\n//                             // Removed softWrap: false and overflow: TextOverflow.visible, let Expanded handle it\n//                           ),\n//                         ],\n//                       ),\n//                     if (course['status'] == 'in_progress')\n//                       Row(\n//                         children: [\n//                           Text(\n//                             'Course is in progress',\n//                             style: textTheme.bodySmall?.copyWith(\n//                               color: Colors.grey[600],\n//                             ),\n//                           ),\n//                           const Spacer(),\n//                           Text(\n//                             '${(course['progress'] * 100).toInt()}%',\n//                             style: textTheme.bodySmall?.copyWith(\n//                               color: Colors.grey[600],\n//                             ),\n//                             // Removed softWrap: false and overflow: TextOverflow.visible\n//                           ),\n//                         ],\n//                       ),\n//                   ],\n//                 ),\n//               ),\n//             ],\n//           ),\n//           if (course['status'] == 'in_progress' ||\n//               course['status'] == 'completed')\n//             SliderTheme(\n//               data: SliderThemeData(\n//                 padding: EdgeInsets.all(8),\n//                 activeTrackColor: primaryColor,\n//                 inactiveTrackColor: Colors.grey[200],\n//                 trackHeight: 4.0,\n//                 thumbColor: primaryColor,\n//                 overlayColor: Colors.transparent, // Remove overlay\n//                 thumbShape: _RoundSliderThumbShape(\n//                   thumbRadius: 6.0,\n//                   primaryColor: primaryColor,\n//                 ), // Custom thumb\n//                 trackShape:\n//                     const RoundedRectSliderTrackShape(), // Rounded track\n//                 showValueIndicator: ShowValueIndicator.never,\n//               ),\n//               child: Slider(\n//                 value: course['progress'],\n//                 onChanged: (newValue) {\n//                   // This slider is for display, so onChanged doesn't update course progress\n//                 },\n//                 min: 0.0,\n//                 max: 1.0,\n//               ),\n//             ),\n//         ],\n//       ),\n//     );\n//   }\n// }\n\n// // Custom thumb shape for the Slider to match the image\n// class _RoundSliderThumbShape extends SliderComponentShape {\n//   final double thumbRadius;\n//   final Color primaryColor;\n\n//   const _RoundSliderThumbShape({\n//     required this.thumbRadius,\n//     required this.primaryColor,\n//   });\n\n//   @override\n//   Size getPreferredSize(bool isEnabled, bool isDiscrete) {\n//     return Size.fromRadius(thumbRadius);\n//   }\n\n//   @override\n//   void paint(\n//     PaintingContext context,\n//     Offset center, {\n//     required Animation<double> activationAnimation,\n//     required Animation<double> enableAnimation,\n//     required bool isDiscrete, // The slider itself, not the thumb, is discrete\n//     required TextPainter labelPainter,\n//     required RenderBox parentBox,\n//     required Size sizeWithOverflow,\n//     required SliderThemeData sliderTheme,\n//     required TextDirection textDirection,\n//     required double textScaleFactor,\n//     required double value,\n//   }) {\n//     final Canvas canvas = context.canvas;\n\n//     final paint =\n//         Paint()\n//           ..color =\n//               primaryColor // Thumb color\n//           ..style = PaintingStyle.fill;\n\n//     canvas.drawCircle(center, thumbRadius, paint);\n//   }\n// }\n\n// // Reusing and adapting the CategoryChip for icons\n// class _CategoryChipWithIcon extends StatelessWidget {\n//   final String name;\n//   final IconData icon;\n//   final bool isSelected;\n//   final VoidCallback onTap;\n\n//   const _CategoryChipWithIcon({\n//     required this.name,\n//     required this.icon,\n//     this.isSelected = false,\n//     required this.onTap,\n//   });\n\n//   @override\n//   Widget build(BuildContext context) {\n//     final primaryColor = Theme.of(context).primaryColor;\n//     final textTheme = Theme.of(context).textTheme;\n\n//     final ButtonStyle style = Theme.of(\n//       context,\n//     ).outlinedButtonTheme.style!.copyWith(\n//       backgroundColor: WidgetStateProperty.resolveWith<Color>((\n//         Set<WidgetState> states,\n//       ) {\n//         if (isSelected) {\n//           return primaryColor;\n//         }\n//         return Colors.white; // White background for unselected\n//       }),\n//       foregroundColor: WidgetStateProperty.resolveWith<Color>((\n//         Set<WidgetState> states,\n//       ) {\n//         if (isSelected) {\n//           return Colors.white;\n//         }\n//         return Colors.black; // Black text for unselected\n//       }),\n//       side: WidgetStateProperty.resolveWith<BorderSide>((\n//         Set<WidgetState> states,\n//       ) {\n//         if (isSelected) {\n//           return BorderSide(color: primaryColor, width: 1.5);\n//         }\n//         return BorderSide(\n//           color: Colors.grey[300]!,\n//           width: 1.5,\n//         ); // Light grey border for unselected\n//       }),\n//       shape: WidgetStateProperty.all<RoundedRectangleBorder>(\n//         RoundedRectangleBorder(borderRadius: BorderRadius.circular(25.0)),\n//       ),\n//       padding: WidgetStateProperty.all<EdgeInsetsGeometry>(\n//         const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n//       ),\n//     );\n\n//     return OutlinedButton(\n//       onPressed: onTap,\n//       style: style,\n//       child: Row(\n//         mainAxisSize: MainAxisSize.min,\n//         children: [\n//           Icon(icon, color: isSelected ? Colors.white : Colors.black, size: 18),\n//           const SizedBox(width: 8),\n//           Text(\n//             name,\n//             style: TextStyle(\n//               fontSize: 14,\n//               color: isSelected ? Colors.white : Colors.black,\n//               fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n//             ),\n//           ),\n//         ],\n//       ),\n//     );\n//   }\n// }\n\nimport 'package:flutter/material.dart';\n// Reusing for consistency, though we'll make a new chip type to include icons\n\nclass MyCourseScreen extends StatefulWidget {\n  const MyCourseScreen({super.key});\n\n  @override\n  State<MyCourseScreen> createState() => _MyCourseScreenState();\n}\n\nclass _MyCourseScreenState extends State<MyCourseScreen> {\n  final TextEditingController _searchController = TextEditingController();\n  int _selectedCategoryIndex =\n      1; // \"Science\" is selected by default as per image\n\n  final List<Map<String, dynamic>> _categoryChipsWithIcons = [\n    {'name': 'Programming', 'icon': Icons.laptop_mac}, // Placeholder icon\n    {'name': 'Science', 'icon': Icons.public}, // Placeholder icon\n    {'name': 'Design', 'icon': Icons.palette}, // Placeholder icon\n    {'name': 'Business', 'icon': Icons.business_center}, // Placeholder icon\n    {'name': 'Art', 'icon': Icons.brush}, // Placeholder icon\n  ];\n\n  final List<Map<String, dynamic>> _myCourses = [\n    {\n      'image': 'https://picsum.photos/id/1045/100/80',\n      'title': 'Complete 3D Animation Using Blender',\n      'author': 'Jane Cooper',\n      'members': 420,\n      'num_courses': 43,\n      'status': 'not_started', // or 'completed', 'in_progress'\n      'progress': 0.0,\n    },\n    {\n      'image': 'https://picsum.photos/id/237/100/80',\n      'title': 'Fitness Training : Basic Workouts & Body Building',\n      'author': 'Esther Howard',\n      'members': 100,\n      'num_courses': 16,\n      'status': 'completed',\n      'progress': 1.0, // 100%\n    },\n    {\n      'image': 'https://picsum.photos/id/1014/100/80',\n      'title': 'Advance Trading : Forex Trading/Stock Trading',\n      'author': 'Courtney Henry',\n      'members': 221,\n      'num_courses': 12,\n      'status': 'in_progress',\n      'progress': 0.52, // 52%\n    },\n    {\n      'image': 'https://picsum.photos/id/100/100/80',\n      'title': 'Introduction to Digital Photography',\n      'author': 'Emily White',\n      'members': 350,\n      'num_courses': 25,\n      'status': 'in_progress',\n      'progress': 0.70, // 70%\n    },\n  ];\n\n  int _selectedIndex =\n      2; // 0 for Home, 1 for Wishlist, 2 for My Course, 3 for Profile\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n    // In a real app, you would navigate to different screens here.\n    // For now, it just highlights the selected tab.\n  }\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(\n            Icons.arrow_back_ios,\n            color: primaryColor,\n            size: 20,\n          ), // Black icon, transparent background\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        scrolledUnderElevation: 0,\n        title: Text(\n          'My Course',\n          style: TextStyle(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: Icon(\n              Icons.more_vert,\n              color: Colors.black,\n            ), // Black icon, transparent background\n            onPressed: () {},\n          ),\n        ],\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 24.0,\n              vertical: 16.0,\n            ),\n            child: Column(\n              children: [\n                // Search Bar\n                TextField(\n                  controller: _searchController,\n                  decoration: InputDecoration(\n                    hintText: 'Search Something',\n                    prefixIcon: Padding(\n                      padding: const EdgeInsets.only(\n                        left: 16.0,\n                        top: 8,\n                        bottom: 8,\n                      ),\n                      child: Icon(Icons.search, color: Colors.grey[600]),\n                    ),\n                    suffixIcon: Padding(\n                      padding: const EdgeInsets.only(right: 8.0),\n                      child: IconButton(\n                        icon: Icon(Icons.close, color: Colors.grey[600]),\n                        onPressed: () {\n                          _searchController.clear();\n                          // Perform search clear logic\n                        },\n                      ),\n                    ),\n                    focusedBorder: OutlineInputBorder(\n                      borderSide: BorderSide(color: primaryColor),\n                      borderRadius: BorderRadius.circular(15),\n                    ),\n                    enabledBorder: OutlineInputBorder(\n                      borderRadius: BorderRadius.circular(15),\n                      borderSide: BorderSide(color: Colors.grey[300]!),\n                    ),\n                    filled: true,\n                    fillColor: Colors.white, // White background for the input\n                    contentPadding: const EdgeInsets.symmetric(\n                      vertical: 16.0,\n                      horizontal: 16.0,\n                    ),\n                  ),\n                  onChanged: (value) {\n                    // Perform search as user types\n                  },\n                ),\n                const SizedBox(height: 16),\n\n                // Category Chips\n                SizedBox(\n                  height: 40,\n                  child: ListView.builder(\n                    scrollDirection: Axis.horizontal,\n                    itemCount: _categoryChipsWithIcons.length,\n                    itemBuilder: (context, index) {\n                      final chipData = _categoryChipsWithIcons[index];\n                      return Padding(\n                        padding: const EdgeInsets.only(right: 12.0),\n                        child: _CategoryChipWithIcon(\n                          name: chipData['name']!,\n                          icon: chipData['icon']!,\n                          isSelected: index == _selectedCategoryIndex,\n                          onTap: () {\n                            setState(() {\n                              _selectedCategoryIndex = index;\n                            });\n                          },\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ),\n\n          // My Course List\n          Expanded(\n            child: ListView.separated(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 24.0,\n                vertical: 8.0,\n              ),\n              itemCount: _myCourses.length,\n              itemBuilder: (context, index) {\n                final course = _myCourses[index];\n                return _buildMyCourseCard(\n                  context,\n                  course,\n                  primaryColor,\n                  textTheme,\n                );\n              },\n              separatorBuilder:\n                  (context, index) =>\n                      const SizedBox(height: 16), // Spacing between cards\n            ),\n          ),\n        ],\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n            ),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n            ),\n            label: 'Wishlist',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 2\n                  ? Icons.play_circle_fill\n                  : Icons.play_circle_outline,\n            ),\n            label: 'My Course',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n            ),\n            label: 'Profile',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: primaryColor,\n        unselectedItemColor: Colors.grey,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n        selectedLabelStyle: textTheme.bodySmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: textTheme.bodySmall,\n      ),\n    );\n  }\n\n  Widget _buildMyCourseCard(\n    BuildContext context,\n    Map<String, dynamic> course,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(16.0),\n      child: Material(\n        color: Colors.transparent,\n        child: Ink(\n          decoration: BoxDecoration(\n            color: Colors.white,\n            borderRadius: BorderRadius.circular(16.0),\n            border: Border.all(\n              width: 0.5,\n              color: Colors.grey.withValues(alpha: 0.5),\n            ),\n          ),\n          child: InkWell(\n            borderRadius: BorderRadius.circular(16.0),\n            onTap: () {\n              // Handle card tap\n              print('Course tapped: ${course['title']}');\n              // Add your navigation or action logic here\n            },\n            child: Padding(\n              padding: const EdgeInsets.all(12.0),\n              child: Column(\n                children: [\n                  Row(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      ClipRRect(\n                        borderRadius: BorderRadius.circular(8.0),\n                        child: Image.network(\n                          course['image']!,\n                          height: 64,\n                          width: 64,\n                          fit: BoxFit.cover,\n                        ),\n                      ),\n                      const SizedBox(width: 12),\n                      Expanded(\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Text(\n                              course['title']!,\n                              style: TextStyle(\n                                fontSize: 14,\n                                fontWeight: FontWeight.bold,\n                                color: Colors.black,\n                              ),\n                              maxLines: 2,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                            const SizedBox(height: 4),\n                            Text(\n                              course['author']!,\n                              style: textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[600],\n                              ),\n                              maxLines: 1,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                            const SizedBox(height: 8),\n                            Row(\n                              children: [\n                                Icon(\n                                  Icons.people_alt,\n                                  color: Colors.grey[600],\n                                  size: 18,\n                                ),\n                                const SizedBox(width: 4),\n                                // Wrap with Flexible or Expanded to prevent overflow\n                                Flexible(\n                                  child: Text(\n                                    '${course['members']} Members',\n                                    style: textTheme.bodySmall?.copyWith(\n                                      color: Colors.grey[600],\n                                    ),\n                                    maxLines: 1,\n                                    overflow: TextOverflow.ellipsis,\n                                  ),\n                                ),\n                                const SizedBox(width: 12),\n                                Icon(\n                                  Icons.play_circle_outline,\n                                  color: Colors.grey[600],\n                                  size: 18,\n                                ),\n                                const SizedBox(width: 4),\n                                // Wrap with Flexible or Expanded to prevent overflow\n                                Flexible(\n                                  child: Text(\n                                    '${course['num_courses']} Courses',\n                                    style: textTheme.bodySmall?.copyWith(\n                                      color: Colors.grey[600],\n                                    ),\n                                    maxLines: 1,\n                                    overflow: TextOverflow.ellipsis,\n                                  ),\n                                ),\n                              ],\n                            ),\n                            const SizedBox(height: 8),\n                            if (course['status'] == 'not_started')\n                              Align(\n                                alignment: Alignment.centerLeft,\n                                child: TextButton(\n                                  onPressed: () {\n                                    // Handle start course button tap\n                                    print(\n                                      'Start course tapped: ${course['title']}',\n                                    );\n                                  },\n                                  style: TextButton.styleFrom(\n                                    padding: EdgeInsets.zero,\n                                    minimumSize: Size.zero,\n                                    tapTargetSize:\n                                        MaterialTapTargetSize.shrinkWrap,\n                                  ),\n                                  child: Text(\n                                    'Start Course',\n                                    style: TextStyle(\n                                      fontSize: 14,\n                                      color: primaryColor,\n                                      fontWeight: FontWeight.bold,\n                                    ),\n                                  ),\n                                ),\n                              )\n                            else if (course['status'] == 'completed')\n                              Row(\n                                children: [\n                                  Text(\n                                    'Complete',\n                                    style: TextStyle(\n                                      fontSize: 14,\n                                      color: Colors.black,\n                                      fontWeight: FontWeight.bold,\n                                    ),\n                                  ),\n                                  const Spacer(),\n                                  // Explicitly constrain width if overflow still occurs, or ensure enough space\n                                  Text(\n                                    '${(course['progress'] * 100).toInt()}%',\n                                    style: TextStyle(\n                                      fontSize: 14,\n                                      color: primaryColor,\n                                      fontWeight: FontWeight.bold,\n                                    ),\n                                    // Removed softWrap: false and overflow: TextOverflow.visible, let Expanded handle it\n                                  ),\n                                ],\n                              ),\n                            if (course['status'] == 'in_progress')\n                              Row(\n                                children: [\n                                  Text(\n                                    'Course is in progress',\n                                    style: textTheme.bodySmall?.copyWith(\n                                      color: Colors.grey[600],\n                                    ),\n                                  ),\n                                  const Spacer(),\n                                  Text(\n                                    '${(course['progress'] * 100).toInt()}%',\n                                    style: textTheme.bodySmall?.copyWith(\n                                      color: Colors.grey[600],\n                                    ),\n                                    // Removed softWrap: false and overflow: TextOverflow.visible\n                                  ),\n                                ],\n                              ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ),\n                  // Progress Indicator (replacing the slider)\n                  if (course['status'] == 'in_progress' ||\n                      course['status'] == 'completed')\n                    Padding(\n                      padding: const EdgeInsets.only(top: 12.0),\n                      child: LinearProgressIndicator(\n                        value: course['progress'],\n                        backgroundColor: Colors.grey[200],\n                        valueColor: AlwaysStoppedAnimation<Color>(primaryColor),\n                        minHeight: 6.0,\n                        borderRadius: BorderRadius.circular(3.0),\n                      ),\n                    ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n// Reusing and adapting the CategoryChip for icons\nclass _CategoryChipWithIcon extends StatelessWidget {\n  final String name;\n  final IconData icon;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const _CategoryChipWithIcon({\n    required this.name,\n    required this.icon,\n    this.isSelected = false,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n\n    final ButtonStyle style = Theme.of(\n      context,\n    ).outlinedButtonTheme.style!.copyWith(\n      backgroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return primaryColor;\n        }\n        return Colors.white; // White background for unselected\n      }),\n      foregroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return Colors.white;\n        }\n        return Colors.black; // Black text for unselected\n      }),\n      side: WidgetStateProperty.resolveWith<BorderSide>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return BorderSide(color: primaryColor, width: 1.5);\n        }\n        return BorderSide(\n          color: Colors.grey[300]!,\n          width: 1.5,\n        ); // Light grey border for unselected\n      }),\n      shape: WidgetStateProperty.all<RoundedRectangleBorder>(\n        RoundedRectangleBorder(borderRadius: BorderRadius.circular(25.0)),\n      ),\n      padding: WidgetStateProperty.all<EdgeInsetsGeometry>(\n        const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n      ),\n    );\n\n    return OutlinedButton(\n      onPressed: onTap,\n      style: style,\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(icon, color: isSelected ? Colors.white : Colors.black, size: 18),\n          const SizedBox(width: 8),\n          Text(\n            name,\n            style: TextStyle(\n              fontSize: 14,\n              color: isSelected ? Colors.white : Colors.black,\n              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\notification_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass NotificationScreen extends StatefulWidget {\n  const NotificationScreen({super.key});\n\n  @override\n  State<NotificationScreen> createState() => _NotificationScreenState();\n}\n\nclass _NotificationScreenState extends State<NotificationScreen> {\n  // Sample data for notifications\n  final List<Map<String, dynamic>> _todayNotifications = [\n    {\n      'imageUrls': ['https://picsum.photos/id/1027/40/40'],\n      'userName': 'Jacob Jones',\n      'messageType': 'updated class',\n      'itemTitle': 'Web Design for Beginners',\n      'time': '10:24 AM',\n      'isRead': false,\n    },\n    {\n      'imageUrls': ['https://picsum.photos/id/1025/40/40'],\n      'userName': 'Cameron Williamson',\n      'messageType': 'updated information',\n      'itemTitle': 'Intro Fundamental UX Research',\n      'time': '09:11 AM',\n      'isRead': false,\n    },\n    {\n      'imageUrls': ['https://picsum.photos/id/1005/40/40'],\n      'userName': 'Guy Hawkins',\n      'messageType': 'updated information',\n      'itemTitle': 'UI Design Bootcamp : Design System',\n      'time': '09:00 AM',\n      'isRead': true,\n    },\n    {\n      'imageUrls': [\n        'https://picsum.photos/id/1004/28/28',\n        'https://picsum.photos/id/1011/28/28',\n      ],\n      'userName': 'Bessie Cooper and Kristin Watson',\n      'messageType': 'updated class',\n      'itemTitle': 'Forex Trading',\n      'time': '08:32 AM',\n      'isRead': true,\n    },\n  ];\n\n  final List<Map<String, dynamic>> _yesterdayNotifications = [\n    {\n      'imageUrls': ['https://picsum.photos/id/1014/40/40'],\n      'userName': 'Annete Black',\n      'messageType': 'updated class',\n      'itemTitle': 'Photogprahy - Become Photogra...',\n      'time': '11:24 AM',\n      'isRead': true,\n    },\n    {\n      'imageUrls': ['https://picsum.photos/id/1015/40/40'],\n      'userName': 'Devon Lane',\n      'messageType': 'updated information',\n      'itemTitle': 'Learn Basic Animation Using Afte...',\n      'time': '03:11 PM',\n      'isRead': true,\n    },\n    {\n      'imageUrls': ['https://picsum.photos/id/1027/40/40'],\n      'userName': 'Kylie Jenner',\n      'messageType': 'updated information',\n      'itemTitle': 'Become Great Scientist',\n      'time': '01:00 PM',\n      'isRead': true,\n    },\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n          decoration: BoxDecoration(\n            color: Colors.transparent, // Light grey background as seen in image\n            shape: BoxShape.circle,\n          ),\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {},\n          ),\n        ),\n        title: Text(\n          'Notification',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Today Section Header\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                Text(\n                  'Today',\n                  style: textTheme.titleLarge?.copyWith(\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {},\n                  style: TextButton.styleFrom(\n                    padding: EdgeInsets.zero,\n                    minimumSize: Size.zero,\n                    tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n                  ),\n                  child: Text(\n                    'Mark all as read',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: primaryColor,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n\n            // Today Notifications\n            ListView.separated(\n              shrinkWrap: true,\n              physics: const NeverScrollableScrollPhysics(),\n              itemCount: _todayNotifications.length,\n              itemBuilder: (context, index) {\n                final notification = _todayNotifications[index];\n                return _NotificationTile(\n                  onTap: () {},\n                  imageUrls: notification['imageUrls'],\n                  userName: notification['userName'],\n                  messageType: notification['messageType'],\n                  itemTitle: notification['itemTitle'],\n                  time: notification['time'],\n                  isRead: notification['isRead'],\n                );\n              },\n              separatorBuilder:\n                  (context, index) => Divider(\n                    height: 32,\n                    thickness: 0.5,\n                    color: Colors.grey.withValues(alpha: 0.5),\n                  ),\n            ),\n            const SizedBox(height: 32),\n\n            // Yesterday Section Header\n            Text(\n              'Yesterday',\n              style: textTheme.titleLarge?.copyWith(\n                fontSize: 16,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n\n            // Yesterday Notifications\n            ListView.separated(\n              shrinkWrap: true,\n              physics: const NeverScrollableScrollPhysics(),\n              itemCount: _yesterdayNotifications.length,\n              itemBuilder: (context, index) {\n                final notification = _yesterdayNotifications[index];\n                return _NotificationTile(\n                  onTap: () {},\n                  imageUrls: notification['imageUrls'],\n                  userName: notification['userName'],\n                  messageType: notification['messageType'],\n                  itemTitle: notification['itemTitle'],\n                  time: notification['time'],\n                  isRead: notification['isRead'],\n                );\n              },\n              separatorBuilder:\n                  (context, index) => Divider(\n                    height: 32,\n                    thickness: 0.5,\n                    color: Colors.grey.withValues(alpha: 0.5),\n                  ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _NotificationTile extends StatelessWidget {\n  final List<String> imageUrls;\n  final String userName;\n  final String messageType;\n  final String itemTitle;\n  final String time;\n  final bool isRead;\n  final VoidCallback? onTap; // Optional callback for tap\n\n  const _NotificationTile({\n    required this.imageUrls,\n    required this.userName,\n    required this.messageType,\n    required this.itemTitle,\n    required this.time,\n    this.isRead = false,\n    this.onTap, // Add onTap here\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    Widget avatarWidget;\n    if (imageUrls.length > 1) {\n      avatarWidget = SizedBox(\n        width: 50,\n        height: 40,\n        child: Stack(\n          children: [\n            Positioned(\n              left: 0,\n              child: CircleAvatar(\n                radius: 20,\n                backgroundImage: NetworkImage(imageUrls[0]),\n              ),\n            ),\n            Positioned(\n              right: 0,\n              child: CircleAvatar(\n                radius: 20,\n                backgroundImage: NetworkImage(imageUrls[1]),\n              ),\n            ),\n          ],\n        ),\n      );\n    } else {\n      avatarWidget = CircleAvatar(\n        radius: 24,\n        backgroundImage: NetworkImage(imageUrls[0]),\n      );\n    }\n\n    return Material(\n      color: Colors.transparent, // Allows ripple to show on any background\n      child: InkWell(\n        onTap: onTap,\n        borderRadius: BorderRadius.circular(8), // Optional for ripple shape\n        child: Padding(\n          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 8.0),\n          child: Row(\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              avatarWidget,\n              const SizedBox(width: 16),\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    RichText(\n                      text: TextSpan(\n                        children: [\n                          TextSpan(\n                            text: userName,\n                            style: textTheme.titleMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                          ),\n                          TextSpan(\n                            text: ' $messageType : ',\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                          ),\n                          TextSpan(\n                            text: itemTitle,\n                            style: textTheme.bodyMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      time,\n                      style: textTheme.bodySmall?.copyWith(\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n              if (!isRead)\n                Padding(\n                  padding: const EdgeInsets.only(left: 16.0),\n                  child: Container(\n                    width: 8,\n                    height: 8,\n                    decoration: BoxDecoration(\n                      color: primaryColor,\n                      shape: BoxShape.circle,\n                    ),\n                  ),\n                ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\onboarding_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nclass OnboardingScreen extends StatefulWidget {\n  const OnboardingScreen({super.key});\n\n  @override\n  State<OnboardingScreen> createState() => _OnboardingScreenState();\n}\n\nclass _OnboardingScreenState extends State<OnboardingScreen> {\n  final PageController _pageController = PageController();\n  int _currentPage = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    _pageController.addListener(() {\n      int next = _pageController.page!.round();\n      if (_currentPage != next) {\n        setState(() {\n          _currentPage = next;\n        });\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    _pageController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      body: Column(\n        children: [\n          Expanded(\n            flex: 3,\n            child: PageView(\n              controller: _pageController,\n              children: const [\n                OnboardingPage(\n                  imagePath: 'https://picsum.photos/400/600',\n                  title: 'Transform your skills, transform your future',\n                  description:\n                      'Learn easily with SkillUp, you can access many course and mentors',\n                ),\n                // Add more pages if needed for a multi-page onboarding\n                OnboardingPage(\n                  imagePath: 'https://picsum.photos/400/601',\n                  title: 'Learn from the best, anywhere, anytime',\n                  description:\n                      'Access a wide range of courses taught by industry experts.',\n                ),\n                OnboardingPage(\n                  imagePath: 'https://picsum.photos/400/602',\n                  title: 'Connect with mentors and build your network',\n                  description:\n                      'Engage with a supportive community and accelerate your learning.',\n                ),\n              ],\n            ),\n          ),\n          Container(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 24.0,\n              vertical: 20.0,\n            ),\n            child: Column(\n              children: [\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  children: List.generate(\n                    3, // Number of onboarding pages\n                    (index) => buildDot(index, context),\n                  ),\n                ),\n                const SizedBox(height: 20),\n                Align(\n                  alignment: Alignment.centerLeft,\n                  child: Text(\n                    'Transform your skills,\\ntransform your future',\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                ),\n                const SizedBox(height: 8),\n                Align(\n                  alignment: Alignment.centerLeft,\n                  child: Text(\n                    'Learn easily with SkillUp, you can access many course and mentors',\n                    style: Theme.of(\n                      context,\n                    ).textTheme.bodyLarge?.copyWith(color: Colors.grey[700]),\n                  ),\n                ),\n                const SizedBox(height: 32),\n                PrimaryTextButton(text: \"Continue\"),\n                const SizedBox(height: 20), // For bottom safe area\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildDot(int index, BuildContext context) {\n    return AnimatedContainer(\n      duration: const Duration(milliseconds: 200),\n      margin: const EdgeInsets.only(right: 5),\n      height: 8,\n      width: _currentPage == index ? 24 : 8,\n      decoration: BoxDecoration(\n        color:\n            _currentPage == index\n                ? Theme.of(context).primaryColor\n                : Theme.of(context).primaryColor.withValues(alpha: 0.3),\n        borderRadius: BorderRadius.circular(5),\n      ),\n    );\n  }\n}\n\nclass OnboardingPage extends StatelessWidget {\n  final String imagePath;\n  final String title;\n  final String description;\n\n  const OnboardingPage({\n    super.key,\n    required this.imagePath,\n    required this.title,\n    required this.description,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Expanded(\n          child: Image.network(\n            imagePath,\n            fit: BoxFit.cover,\n            width: double.infinity,\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\payment_method_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\nimport 'package:canwa/Screens/add_new_card_screen.dart'; // Import the new screen\n\nclass PaymentMethodScreen extends StatefulWidget {\n  const PaymentMethodScreen({super.key});\n\n  @override\n  State<PaymentMethodScreen> createState() => _PaymentMethodScreenState();\n}\n\nclass _PaymentMethodScreenState extends State<PaymentMethodScreen> {\n  // Sample data for payment methods\n  final List<Map<String, String>> _paymentMethods = [\n    {\n      'name': 'Mastercard',\n      'logo':\n          'https://picsum.photos/id/1084/60/40', // Placeholder for Mastercard\n      'details': 'Master Card ****2',\n    },\n    {\n      'name': 'Gopay',\n      'logo': 'https://picsum.photos/id/403/60/40', // Placeholder for Gopay\n      'details': 'Master Card ****2',\n    },\n    {\n      'name': 'Qris',\n      'logo': 'https://picsum.photos/id/402/60/40', // Placeholder for Qris\n      'details': 'Master Card ****2',\n    },\n    {\n      'name': 'Shopee Pay',\n      'logo':\n          'https://picsum.photos/id/401/60/40', // Placeholder for Shopee Pay\n      'details': 'Master Card ****2',\n    },\n    {\n      'name': 'Visa',\n      'logo': 'https://picsum.photos/id/405/60/40', // Placeholder for Visa\n      'details': 'Master Card ****2',\n    },\n  ];\n\n  void _addPaymentMethod() {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const AddNewCardScreen()),\n    );\n  }\n\n  void _editPaymentMethod(String methodName) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text('Editing $methodName (logic not implemented).'),\n        duration: const Duration(seconds: 2),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: Container(\n          margin: const EdgeInsets.all(8),\n\n          child: IconButton(\n            icon: Icon(\n              Icons.arrow_back_ios,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ),\n        title: Text(\n          'Payment Method',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          Container(\n            margin: const EdgeInsets.all(8),\n\n            child: IconButton(\n              icon: Icon(Icons.add, color: primaryColor, size: 20), // Plus icon\n              onPressed: _addPaymentMethod,\n              iconSize: 20,\n            ),\n          ),\n        ],\n      ),\n      body: Column(\n        children: [\n          Expanded(\n            child: ListView.separated(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 24.0,\n                vertical: 16.0,\n              ),\n              itemCount: _paymentMethods.length,\n              itemBuilder: (context, index) {\n                final method = _paymentMethods[index];\n                return _buildPaymentMethodTile(\n                  context,\n                  method['name']!,\n                  method['logo']!,\n                  method['details']!,\n                  textTheme,\n                  () => _editPaymentMethod(method['name']!),\n                );\n              },\n              separatorBuilder:\n                  (context, index) => const Divider(\n                    height: 24, // Space between items\n                    thickness: 1,\n                    color:\n                        Colors\n                            .transparent, // Invisible divider for spacing, or can be a very light grey\n                  ),\n            ),\n          ),\n          // Confirmation Button at the bottom\n          PrimaryTextButton(text: 'Confirmation'),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPaymentMethodTile(\n    BuildContext context,\n    String name,\n    String logoUrl,\n    String details,\n    TextTheme textTheme,\n    VoidCallback onEdit,\n  ) {\n    return Container(\n      padding: const EdgeInsets.symmetric(vertical: 8.0),\n      child: Row(\n        children: [\n          Container(\n            width: 60,\n            height: 40,\n            decoration: BoxDecoration(\n              color:\n                  Colors.grey[100], // Light grey background for logo container\n              borderRadius: BorderRadius.circular(12.0),\n            ),\n            child: Center(\n              child: Image.network(\n                logoUrl,\n                height: 28, // Adjust logo size as per image\n                width: 40,\n                fit: BoxFit.contain,\n              ),\n            ),\n          ),\n          const SizedBox(width: 16),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  name,\n                  style: textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                Text(\n                  details,\n                  style: textTheme.bodyMedium?.copyWith(\n                    color: Colors.grey[600],\n                  ),\n                ),\n              ],\n            ),\n          ),\n          IconButton(\n            icon: Icon(\n              Icons.edit_outlined,\n              color: Colors.grey[600],\n            ), // Edit icon\n            onPressed: onEdit,\n            splashRadius: 20,\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\profile_mentor_screen.dart\n```dart\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\n\nclass ProfileMentorScreen extends StatefulWidget {\n  const ProfileMentorScreen({super.key});\n\n  @override\n  State<ProfileMentorScreen> createState() => _ProfileMentorScreenState();\n}\n\nclass _ProfileMentorScreenState extends State<ProfileMentorScreen> {\n  bool _showFullAbout = false;\n\n  final String _shortAbout =\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eros, urna libero, nisl nullam. Cras ante ac odio dolor. Penatibus elit convallis ipsum morbi tincidunt ac diam tristique tincidunt ...';\n  final String _fullAbout =\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eros, urna libero, nisl nullam. Cras ante ac odio dolor. Penatibus elit convallis ipsum morbi tincidunt ac diam tristique tincidunt. Dictum eget arcu eget nulla. Volutpat, sit sed nibh sit sit eget donec. Mattis sed turpis massa morbi. Aliquet vel aenean donec id vitae donec. Lacus, eget egestas in sed ultrices.';\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor),\n          onPressed: () {},\n          iconSize: 20,\n        ),\n        title: Text(\n          'Profile Mentor',\n          style: TextStyle(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Mentor Profile Header\n            Row(\n              children: [\n                Stack(\n                  children: [\n                    const CircleAvatar(\n                      radius: 36,\n                      backgroundImage: NetworkImage(\n                        'https://picsum.photos/id/1027/200/200', // Placeholder profile image\n                      ),\n                    ),\n                    Positioned(\n                      bottom: 0,\n                      right: 1,\n                      left: 5,\n                      child: Container(\n                        padding: const EdgeInsets.symmetric(\n                          horizontal: 8,\n                          vertical: 4,\n                        ),\n                        decoration: BoxDecoration(\n                          color: primaryColor,\n                          borderRadius: BorderRadius.circular(30),\n                          border: Border.all(color: Colors.white, width: 2),\n                        ),\n                        child: Text(\n                          'Mentor',\n                          style: textTheme.bodySmall?.copyWith(\n                            color: Colors.white,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(width: 16),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'Janny Andrea',\n                      style: textTheme.headlineSmall?.copyWith(\n                        fontSize: 16,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                    ),\n                    Text(\n                      'UI Designer Expert',\n                      style: textTheme.bodyMedium?.copyWith(\n                        fontSize: 15,\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                  ],\n                ),\n                const Spacer(),\n                FilledButton(\n                  onPressed: () {},\n                  style: FilledButton.styleFrom(\n                    padding: const EdgeInsets.symmetric(\n                      horizontal: 24,\n                      vertical: 10,\n                    ),\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(30.0),\n                    ),\n                  ),\n                  child: Text(\n                    'Follow',\n                    style: textTheme.titleSmall?.copyWith(\n                      color: Colors.white,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 24),\n\n            // About Section\n            _buildSectionHeader(context, 'About'),\n            const SizedBox(height: 12),\n            RichText(\n              text: TextSpan(\n                text: _showFullAbout ? _fullAbout : _shortAbout,\n                style: textTheme.bodyLarge?.copyWith(\n                  fontSize: 15,\n                  color: Colors.grey[700],\n                  height: 1.5,\n                ),\n                children: [\n                  if (!_showFullAbout)\n                    TextSpan(\n                      text: 'Read More',\n                      style: textTheme.bodyLarge?.copyWith(\n                        fontSize: 16,\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      recognizer:\n                          TapGestureRecognizer()\n                            ..onTap = () {\n                              setState(() {\n                                _showFullAbout = true;\n                              });\n                            },\n                    )\n                  else\n                    TextSpan(\n                      text: ' Read Less',\n                      style: textTheme.bodyLarge?.copyWith(\n                        fontSize: 16,\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      recognizer:\n                          TapGestureRecognizer()\n                            ..onTap = () {\n                              setState(() {\n                                _showFullAbout = false;\n                              });\n                            },\n                    ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            // Stat Cards Section\n            Row(\n              children: [\n                Expanded(\n                  child: _buildStatCard(\n                    context,\n                    'Mentor',\n                    '23',\n                    'Course',\n                    Icons.local_fire_department, // Flame icon\n                    Colors.deepOrange, // Flame color\n                  ),\n                ),\n                const SizedBox(width: 16),\n                Expanded(\n                  child: _buildStatCard(\n                    context,\n                    'Learning',\n                    '74',\n                    'Student',\n                    Icons.favorite, // Heart icon\n                    Colors.pink, // Heart color\n                    showGraph: true,\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 32),\n\n            // Featured Class Section\n            _buildSectionHeader(\n              context,\n              'Featured Class',\n              onSeeAllTap: () => {},\n            ),\n            const SizedBox(height: 16),\n            _buildFeaturedClassList(context),\n            const SizedBox(height: 20),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildSectionHeader(\n    BuildContext context,\n    String title, {\n    VoidCallback? onSeeAllTap,\n  }) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          title,\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 16,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        if (onSeeAllTap != null)\n          TextButton(\n            onPressed: onSeeAllTap,\n            style: TextButton.styleFrom(\n              padding: EdgeInsets.zero,\n              minimumSize: Size.zero,\n              tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n            ),\n            child: Text(\n              'See All',\n              style: textTheme.bodyLarge?.copyWith(\n                color: primaryColor,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n      ],\n    );\n  }\n\n  Widget _buildStatCard(\n    BuildContext context,\n    String title,\n    String value,\n    String subtitle,\n    IconData icon,\n    Color iconColor, {\n    bool showGraph = false,\n  }) {\n    final textTheme = Theme.of(context).textTheme;\n    return Container(\n      padding: const EdgeInsets.all(16.0),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              Text(\n                title,\n                style: textTheme.bodyMedium?.copyWith(\n                  fontSize: 14,\n                  color: Colors.black,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              Icon(icon, color: iconColor, size: 20),\n            ],\n          ),\n          const SizedBox(height: 8),\n          Text(\n            value,\n            style: textTheme.headlineMedium?.copyWith(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,\n              color: Colors.black,\n            ),\n          ),\n          const SizedBox(height: 4),\n          Row(\n            children: [\n              Text(\n                subtitle,\n                style: textTheme.bodySmall?.copyWith(color: Colors.grey[600]),\n              ),\n              if (showGraph) const Spacer(),\n              if (showGraph)\n                // Placeholder for graph, using a simple line for visual hint\n                SizedBox(\n                  width: 50,\n                  height: 20,\n                  // This could be a CustomPainter for a real graph\n                  child: CustomPaint(painter: _LearningGraphPainter(iconColor)),\n                ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  // Add this as a class member variable (outside any method)\n  Set<int> _favoritedCourseIndices = <int>{};\n\n  // Updated _buildFeaturedClassList method\n  Widget _buildFeaturedClassList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    final List<Map<String, dynamic>> courses = [\n      {\n        'category': 'Design',\n        'title': 'Expert Wireframing for Mobile Design',\n        'image': 'https://picsum.photos/id/600/200/150',\n        'rating': 4.5,\n        'reviews': 1239,\n        'price': '\\$499',\n        'oldPrice': '\\$699',\n        'tag': 'New Course',\n      },\n      {\n        'category': 'Language',\n        'title': 'TOEFL Preparation Course: Boost Your E...',\n        'image': 'https://picsum.photos/id/603/200/150',\n        'rating': 4.2,\n        'reviews': 886,\n        'price': '\\$399',\n        'oldPrice': '\\$499',\n        'tag': null,\n      },\n      {\n        'category': 'Programming',\n        'title': 'Advanced React.js for Modern Web Apps',\n        'image': 'https://picsum.photos/id/602/200/150',\n        'rating': 4.8,\n        'reviews': 1500,\n        'price': '\\$599',\n        'oldPrice': '\\$799',\n        'tag': 'Best Seller',\n      },\n    ];\n\n    return SizedBox(\n      height: 280,\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: courses.length,\n        itemBuilder: (context, index) {\n          final course = courses[index];\n          final isFavorited = _favoritedCourseIndices.contains(index);\n\n          return Container(\n            width: 200,\n            margin: const EdgeInsets.only(right: 16.0),\n            child: Material(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(16.0),\n              elevation: 3,\n              shadowColor: Colors.grey.withValues(alpha: 0.1),\n              child: InkWell(\n                borderRadius: BorderRadius.circular(16.0),\n                onTap: () => {},\n                child: Ink(\n                  decoration: BoxDecoration(\n                    color: Colors.white,\n                    borderRadius: BorderRadius.circular(16.0),\n                  ),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      ClipRRect(\n                        borderRadius: const BorderRadius.vertical(\n                          top: Radius.circular(16.0),\n                        ),\n                        child: Stack(\n                          children: [\n                            Image.network(\n                              course['image']!,\n                              height: 120,\n                              width: double.infinity,\n                              fit: BoxFit.cover,\n                            ),\n                            Positioned(\n                              top: 12,\n                              right: 12,\n                              child: Material(\n                                color: Colors.white.withValues(alpha: 0.9),\n                                shape: const CircleBorder(),\n                                elevation: 2,\n                                child: InkWell(\n                                  borderRadius: BorderRadius.circular(20),\n                                  onTap: () {\n                                    setState(() {\n                                      if (isFavorited) {\n                                        _favoritedCourseIndices.remove(index);\n                                      } else {\n                                        _favoritedCourseIndices.add(index);\n                                      }\n                                    });\n                                  },\n                                  child: Container(\n                                    width: 40,\n                                    height: 40,\n                                    alignment: Alignment.center,\n                                    child: AnimatedSwitcher(\n                                      duration: const Duration(\n                                        milliseconds: 200,\n                                      ),\n                                      child: Icon(\n                                        isFavorited\n                                            ? Icons.favorite\n                                            : Icons.favorite_border,\n                                        key: ValueKey(isFavorited),\n                                        color:\n                                            isFavorited\n                                                ? Colors.red\n                                                : Colors.black54,\n                                        size: 20,\n                                      ),\n                                    ),\n                                  ),\n                                ),\n                              ),\n                            ),\n                            if (course['tag'] != null)\n                              Positioned(\n                                top: 12,\n                                left: 12,\n                                child: Container(\n                                  padding: const EdgeInsets.symmetric(\n                                    horizontal: 8,\n                                    vertical: 4,\n                                  ),\n                                  decoration: BoxDecoration(\n                                    color: Colors.black.withValues(alpha: 0.7),\n                                    borderRadius: BorderRadius.circular(8),\n                                  ),\n                                  child: Text(\n                                    course['tag']!,\n                                    style: textTheme.bodySmall?.copyWith(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,\n                                    ),\n                                  ),\n                                ),\n                              ),\n                          ],\n                        ),\n                      ),\n                      Padding(\n                        padding: const EdgeInsets.all(12.0),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Text(\n                              course['category']!,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: primaryColor,\n                                fontWeight: FontWeight.bold,\n                              ),\n                              maxLines: 1,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                            const SizedBox(height: 4),\n                            Text(\n                              course['title']!,\n                              style: textTheme.titleMedium?.copyWith(\n                                fontWeight: FontWeight.bold,\n                                color: Colors.black,\n                              ),\n                              maxLines: 2,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                            const SizedBox(height: 8),\n                            Row(\n                              children: [\n                                const Icon(\n                                  Icons.star,\n                                  color: Colors.amber,\n                                  size: 16,\n                                ),\n                                const SizedBox(width: 4),\n                                Text(\n                                  '${course['rating']} (${course['reviews']} reviews)',\n                                  style: textTheme.bodySmall?.copyWith(\n                                    color: Colors.grey[600],\n                                  ),\n                                ),\n                              ],\n                            ),\n                            const SizedBox(height: 8),\n                            Row(\n                              crossAxisAlignment: CrossAxisAlignment.baseline,\n                              textBaseline: TextBaseline.alphabetic,\n                              children: [\n                                Text(\n                                  course['price']!,\n                                  style: textTheme.titleMedium?.copyWith(\n                                    fontWeight: FontWeight.bold,\n                                    color: primaryColor,\n                                  ),\n                                ),\n                                const SizedBox(width: 8),\n                                Text(\n                                  course['oldPrice']!,\n                                  style: textTheme.bodyMedium?.copyWith(\n                                    color: Colors.grey[500],\n                                    decoration: TextDecoration.lineThrough,\n                                  ),\n                                ),\n                              ],\n                            ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _LearningGraphPainter extends CustomPainter {\n  final Color lineColor;\n\n  _LearningGraphPainter(this.lineColor);\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final paint =\n        Paint()\n          ..color = lineColor\n          ..strokeWidth = 2.0\n          ..style = PaintingStyle.stroke\n          ..strokeCap = StrokeCap.round;\n\n    final path = Path();\n    // Example points for a rising graph curve, adjusted to fit the 50x20 container\n    path.moveTo(0, size.height * 0.8);\n    path.lineTo(size.width * 0.2, size.height * 0.4);\n    path.lineTo(size.width * 0.4, size.height * 0.6);\n    path.lineTo(size.width * 0.6, size.height * 0.2);\n    path.lineTo(size.width * 0.8, size.height * 0.5);\n    path.lineTo(size.width, size.height * 0.1);\n\n    canvas.drawPath(path, paint);\n  }\n\n  @override\n  bool shouldRepaint(covariant CustomPainter oldDelegate) {\n    return false;\n  }\n}\n```\n\n// File: lib\\Screens\\profile_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass ProfileScreen extends StatefulWidget {\n  const ProfileScreen({super.key});\n\n  @override\n  State<ProfileScreen> createState() => _ProfileScreenState();\n}\n\nclass _ProfileScreenState extends State<ProfileScreen> {\n  // Assuming the primary color from the main app theme\n  late Color primaryColor;\n  late TextTheme textTheme;\n\n  bool _isNotificationOn = true;\n  bool _isNightModeOn = false;\n  int _selectedIndex = 3; // Profile tab is selected by default\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n    // In a real app, you would navigate to different screens here\n    // based on the selected index.\n    // Example:\n    // if (index == 0) {\n    //   Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => HomeScreen()));\n    // } else if (index == 1) {\n    //   Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => WishlistScreen()));\n    // } else if (index == 2) {\n    //   Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => MyCourseScreen()));\n    // }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    primaryColor = Theme.of(context).primaryColor;\n    textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        backgroundColor: Colors.white,\n        elevation: 0,\n        title: Text(\n          'Profile',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: false, // Align title to start as per image\n        actions: [\n          Padding(\n            padding: const EdgeInsets.only(right: 16.0),\n            child: TextButton(\n              onPressed: () {\n                // Navigate to edit profile screen\n              },\n              child: Text(\n                'Edit Profile',\n                style: textTheme.bodyLarge?.copyWith(\n                  color: primaryColor,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // User Profile Section\n            Row(\n              children: [\n                const CircleAvatar(\n                  radius: 36,\n                  backgroundImage: NetworkImage(\n                    'https://picsum.photos/100/100', // Placeholder profile image\n                  ),\n                ),\n                const SizedBox(width: 16),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'John Henry',\n                      style: textTheme.headlineSmall?.copyWith(\n                        fontSize: 16,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      'johnhenry99@gmail.com',\n                      style: textTheme.bodyLarge?.copyWith(\n                        fontSize: 15,\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n            const SizedBox(height: 32),\n\n            // General Section\n            Text(\n              'General',\n              style: textTheme.titleLarge?.copyWith(\n                fontSize: 18,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.translate,\n              title: 'Language',\n              onTap: () {\n                // Navigate to language settings\n              },\n              trailing: Icon(\n                Icons.arrow_forward_ios,\n                color: Colors.grey[400],\n                size: 18,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.notifications_none,\n              title: 'Notification',\n              onTap: () {\n                setState(() {\n                  _isNotificationOn = !_isNotificationOn;\n                });\n              },\n              trailing: Switch(\n                value: _isNotificationOn,\n                splashRadius: 18,\n                onChanged: (value) {\n                  setState(() {\n                    _isNotificationOn = value;\n                  });\n                },\n                activeColor: Colors.white, // Active thumb color\n                activeTrackColor: primaryColor, // Active track color\n                inactiveThumbColor: Colors.grey, // Inactive thumb color\n                inactiveTrackColor: Colors.grey[300], // Inactive track color\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.nights_stay,\n              title: 'Night Mode',\n              onTap: () {\n                setState(() {\n                  _isNightModeOn = !_isNightModeOn;\n                });\n              },\n              trailing: Switch(\n                value: _isNightModeOn,\n                onChanged: (value) {\n                  setState(() {\n                    _isNightModeOn = value;\n                  });\n                },\n                activeColor: Colors.white, // Active thumb color\n                activeTrackColor: primaryColor, // Active track color\n                inactiveThumbColor: Colors.grey, // Inactive thumb color\n                inactiveTrackColor: Colors.grey[300], // Inactive track color\n              ),\n            ),\n            const SizedBox(height: 32),\n\n            // Other Section\n            Text(\n              'Other',\n              style: textTheme.titleLarge?.copyWith(\n                fontSize: 18,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.help_outline,\n              title: 'FAQ',\n              onTap: () {\n                // Navigate to FAQ screen\n              },\n              trailing: Icon(\n                Icons.arrow_forward_ios,\n                color: Colors.grey[400],\n                size: 18,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.volume_up,\n              title: 'Help & Support',\n              onTap: () {\n                // Navigate to help & support screen\n              },\n              trailing: Icon(\n                Icons.arrow_forward_ios,\n                color: Colors.grey[400],\n                size: 18,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildProfileOptionItem(\n              icon: Icons.logout,\n              title: 'Logout',\n              onTap: () {\n                // Implement logout logic\n              },\n              // No trailing icon needed for logout as per image\n            ),\n            const SizedBox(height: 40),\n\n            // Version Info\n            Center(\n              child: Text(\n                '2021 SkillUp • Ver 1.0',\n                style: textTheme.bodySmall?.copyWith(color: Colors.grey[600]),\n              ),\n            ),\n            const SizedBox(height: 20), // Space for bottom navigation bar\n          ],\n        ),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n            ),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n            ),\n            label: 'Wishlist',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 2\n                  ? Icons.play_circle_fill\n                  : Icons.play_circle_outline,\n            ),\n            label: 'My Course',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n            ),\n            label: 'Profile',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: primaryColor,\n        unselectedItemColor: Colors.grey,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n        selectedLabelStyle: textTheme.bodySmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: textTheme.bodySmall,\n      ),\n    );\n  }\n\n  Widget _buildProfileOptionItem({\n    required IconData icon,\n    required String title,\n    required VoidCallback onTap,\n    Widget? trailing,\n  }) {\n    return GestureDetector(\n      onTap: onTap,\n      child: Row(\n        children: [\n          Container(\n            width: 48,\n            height: 48,\n            decoration: BoxDecoration(\n              color: Colors.grey[100], // Light grey background as per image\n              shape: BoxShape.circle,\n            ),\n            child: Icon(\n              icon,\n              color: Colors.black, // Black icon as per image\n              size: 20,\n            ),\n          ),\n          const SizedBox(width: 16),\n          Expanded(\n            child: Text(\n              title,\n              style: textTheme.titleMedium?.copyWith(\n                fontSize: 14,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n          ),\n          if (trailing != null) trailing,\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\recommendation_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass RecommendationScreen extends StatefulWidget {\n  const RecommendationScreen({super.key});\n\n  @override\n  State<RecommendationScreen> createState() => _RecommendationScreenState();\n}\n\nclass _RecommendationScreenState extends State<RecommendationScreen> {\n  // Sample data for courses\n  final List<Map<String, dynamic>> _recommendationCourses = [\n    {\n      'image': 'https://picsum.photos/id/1015/400/250',\n      'category': 'Science',\n      'title': 'Become a Great Scientist in physics',\n      'author': 'Jerremy Mamika',\n      'price': '\\$57',\n      'is_favorite': false,\n    },\n    {\n      'image': 'https://picsum.photos/id/400/400/250',\n      'category': 'Coding',\n      'title': 'Convert to React js for Beginner',\n      'author': 'Joel Tromp',\n      'price': '\\$132',\n      'is_favorite': false,\n    },\n    {\n      'image': 'https://picsum.photos/id/600/400/250',\n      'category': 'Graphic Design',\n      'title': 'Expert Wireframing for Mobile Design',\n      'author': 'Jerremy Mamika',\n      'price': '\\$48',\n      'is_favorite': false,\n    },\n    {\n      'image': 'https://picsum.photos/id/338/400/250',\n      'category': 'Marketing',\n      'title': 'Digital Marketing Masterclass: From Zero to Hero',\n      'author': 'Sarah Johnson',\n      'price': '\\$99',\n      'is_favorite': false,\n    },\n  ];\n\n  void _toggleFavorite(int index) {\n    setState(() {\n      _recommendationCourses[index]['is_favorite'] =\n          !_recommendationCourses[index]['is_favorite'];\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n          iconSize: 20,\n        ),\n        scrolledUnderElevation: 0,\n        title: Text(\n          'Recommendation',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: Icon(Icons.filter_list, color: primaryColor), // Filter icon\n            onPressed: () {\n              // Handle filter action\n            },\n          ),\n        ],\n      ),\n      body: ListView.builder(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        itemCount: _recommendationCourses.length,\n        itemBuilder: (context, index) {\n          final course = _recommendationCourses[index];\n          return _buildRecommendationCourseCard(\n            context,\n            course,\n            primaryColor,\n            textTheme,\n            index, // Pass index to the card builder\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildRecommendationCourseCard(\n    BuildContext context,\n    Map<String, dynamic> course,\n    Color primaryColor,\n    TextTheme textTheme,\n    int index,\n  ) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 16.0),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(16.0),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 5,\n            offset: const Offset(0, 3),\n          ),\n        ],\n      ),\n      child: Material(\n        color: Colors.transparent,\n        borderRadius: BorderRadius.circular(16.0),\n        child: InkWell(\n          borderRadius: BorderRadius.circular(16.0),\n          onTap: () {\n            // Handle card tap - navigate to course details\n            print('Tapped on course: ${course['title']}');\n            // Navigator.push(context, MaterialPageRoute(builder: (context) => CourseDetailScreen(course: course)));\n          },\n          hoverColor: primaryColor.withValues(\n            alpha: 0.05,\n          ), // Subtle hover effect\n          splashColor: primaryColor.withValues(\n            alpha: 0.1,\n          ), // Splash effect on tap\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              ClipRRect(\n                borderRadius: const BorderRadius.vertical(\n                  top: Radius.circular(16.0),\n                ),\n                child: Stack(\n                  children: [\n                    Image.network(\n                      course['image']!,\n                      height: 180,\n                      width: double.infinity,\n                      fit: BoxFit.cover,\n                    ),\n                    Positioned(\n                      top: 12,\n                      right: 12,\n                      child: Container(\n                        decoration: BoxDecoration(\n                          color: Colors.white.withValues(alpha: 0.8),\n                          shape: BoxShape.circle,\n                        ),\n                        child: IconButton(\n                          icon: Icon(\n                            course['is_favorite']\n                                ? Icons.favorite\n                                : Icons.favorite_border,\n                            color:\n                                course['is_favorite']\n                                    ? Colors.red\n                                    : Colors.black,\n                            size: 20,\n                          ),\n                          onPressed: () {\n                            _toggleFavorite(index);\n                          },\n                          splashRadius: 20,\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.all(12.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      course['category']!,\n                      style: textTheme.bodySmall?.copyWith(\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      maxLines: 1,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      course['title']!,\n                      style: textTheme.titleMedium?.copyWith(\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    const SizedBox(height: 8),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Expanded(\n                          child: Text(\n                            course['author']!,\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                            maxLines: 1,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                        ),\n                        Text(\n                          course['price']!,\n                          style: textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: primaryColor,\n                          ),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\replay_question_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass ReplayQuestionScreen extends StatefulWidget {\n  const ReplayQuestionScreen({super.key});\n\n  @override\n  State<ReplayQuestionScreen> createState() => _ReplayQuestionScreenState();\n}\n\nclass _ReplayQuestionScreenState extends State<ReplayQuestionScreen> {\n  final TextEditingController _messageController = TextEditingController();\n\n  @override\n  void dispose() {\n    _messageController.dispose();\n    super.dispose();\n  }\n\n  void _sendMessage() {\n    if (_messageController.text.isNotEmpty) {\n      _messageController.clear();\n      // Logic to send message and update UI\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {},\n          iconSize: 18,\n        ),\n        title: Text(\n          'Replay Question',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Column(\n        children: [\n          Expanded(\n            child: SingleChildScrollView(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 24.0,\n                vertical: 16.0,\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  // Original Question Section\n                  _buildQuestionHeader(\n                    context,\n                    'Kai Havertz',\n                    'https://picsum.photos/id/237/200/200',\n                    '3 days ago',\n                    'How to create component?',\n                  ),\n                  const SizedBox(height: 24),\n\n                  // Answer Section Header\n                  Text(\n                    'Answer (3)',\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n\n                  // List of Answers\n                  _buildAnswerItem(\n                    context,\n                    'Guy Hawkins',\n                    'https://picsum.photos/id/1005/200/200',\n                    true, // isMentor\n                    'Hi Kai, you can create component by right click and select create component or by selecting button component on figma navbar.',\n                    primaryColor,\n                    textTheme,\n                  ),\n                  Divider(\n                    height: 32,\n                    thickness: 0.5,\n                    color: Colors.grey.withValues(alpha: 0.5),\n                  ), // Separator\n                  _buildAnswerItem(\n                    context,\n                    'Ralph Edwards',\n                    'https://picsum.photos/id/1009/200/200',\n                    false, // not a mentor\n                    'How to create variants?',\n                    primaryColor,\n                    textTheme,\n                  ),\n                  Divider(\n                    height: 32,\n                    thickness: 0.5,\n                    color: Colors.grey.withValues(alpha: 0.5),\n                  ), // Separator\n                  _buildAnswerItem(\n                    context,\n                    'Guy Hawkins',\n                    'https://picsum.photos/id/1005/200/200',\n                    true, // isMentor\n                    'You can create multiple components and rename them to one and the same name. then select \"Combine as Variants\" on the right.',\n                    primaryColor,\n                    textTheme,\n                  ),\n                ],\n              ),\n            ),\n          ),\n          // Bottom Input Bar\n          _buildBottomInputBar(context, primaryColor, textTheme),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildQuestionHeader(\n    BuildContext context,\n    String name,\n    String avatarUrl,\n    String timeAgo,\n    String questionText,\n  ) {\n    final textTheme = Theme.of(context).textTheme;\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          children: [\n            CircleAvatar(radius: 18, backgroundImage: NetworkImage(avatarUrl)),\n            const SizedBox(width: 12),\n            Text(\n              name,\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            Text(\n              ' • $timeAgo',\n              style: textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),\n            ),\n          ],\n        ),\n        const SizedBox(height: 12),\n        Text(\n          questionText,\n          style: textTheme.bodyLarge?.copyWith(\n            color: Colors.black,\n            height: 1.5,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildAnswerItem(\n    BuildContext context,\n    String name,\n    String avatarUrl,\n    bool isMentor,\n    String answerText,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          children: [\n            CircleAvatar(radius: 18, backgroundImage: NetworkImage(avatarUrl)),\n            const SizedBox(width: 12),\n            Text(\n              name,\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            if (isMentor) ...[\n              const SizedBox(width: 8),\n              Container(\n                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                decoration: BoxDecoration(\n                  color: primaryColor.withValues(\n                    alpha: 0.1,\n                  ), // Light primary color background\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Text(\n                  'Mentor',\n                  style: textTheme.bodySmall?.copyWith(\n                    color: primaryColor,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              ),\n            ],\n          ],\n        ),\n        const SizedBox(height: 12),\n        Text(\n          answerText,\n          style: textTheme.bodyLarge?.copyWith(\n            color: Colors.black,\n            height: 1.5,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildBottomInputBar(\n    BuildContext context,\n    Color primaryColor,\n    TextTheme textTheme,\n  ) {\n    return Container(\n      padding: const EdgeInsets.all(16.0),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.withValues(alpha: 0.1),\n            spreadRadius: 1,\n            blurRadius: 10,\n            offset: const Offset(0, -5),\n          ),\n        ],\n      ),\n      child: SafeArea(\n        child: Row(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: _messageController,\n                decoration: InputDecoration(\n                  hintText: 'Type a message',\n                  hintStyle: textTheme.bodyLarge?.copyWith(\n                    color: Colors.grey[600],\n                  ),\n                  prefixIcon: Icon(\n                    Icons.sentiment_satisfied_alt,\n                    color: Colors.grey[600],\n                  ),\n                  suffixIcon: Icon(Icons.attach_file, color: Colors.grey[600]),\n                  border: OutlineInputBorder(\n                    borderRadius: BorderRadius.circular(\n                      25.0,\n                    ), // Rounded corners\n                    borderSide: BorderSide.none, // No border\n                  ),\n                  filled: true,\n                  fillColor: Colors.grey[100], // Light grey background\n                  contentPadding: const EdgeInsets.symmetric(\n                    vertical: 14.0,\n                    horizontal: 16.0,\n                  ),\n                ),\n                onTap: () {\n                  // Handle keyboard appearance\n                },\n              ),\n            ),\n            const SizedBox(width: 12),\n            Container(\n              width: 40,\n              height: 40,\n              decoration: BoxDecoration(\n                color: primaryColor,\n                shape: BoxShape.circle,\n              ),\n              child: IconButton(\n                icon: const Icon(Icons.send, color: Colors.white, size: 20),\n                onPressed: _sendMessage,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\review_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass ReviewScreen extends StatefulWidget {\n  const ReviewScreen({super.key});\n\n  @override\n  State<ReviewScreen> createState() => _ReviewScreenState();\n}\n\nclass _ReviewScreenState extends State<ReviewScreen> {\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {},\n          iconSize: 20,\n        ),\n        title: Text(\n          'Review',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Stack(\n        children: [\n          SingleChildScrollView(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 24.0,\n              vertical: 16.0,\n            ),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                // Overall Rating Section\n                Row(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          '4.4',\n                          style: textTheme.displayLarge?.copyWith(\n                            fontSize: 32,\n                            fontWeight: FontWeight.bold,\n                            color: Colors.black,\n                          ),\n                        ),\n                        Row(\n                          children: [\n                            Icon(Icons.star, color: Colors.amber, size: 24),\n                            Icon(Icons.star, color: Colors.amber, size: 24),\n                            Icon(Icons.star, color: Colors.amber, size: 24),\n                            Icon(Icons.star, color: Colors.amber, size: 24),\n                            Icon(\n                              Icons.star_border,\n                              color: Colors.amber,\n                              size: 24,\n                            ),\n                          ],\n                        ),\n                        const SizedBox(height: 4),\n                        Text(\n                          'Based on 532 review',\n                          style: textTheme.bodyMedium?.copyWith(\n                            color: Colors.grey[600],\n                          ),\n                        ),\n                      ],\n                    ),\n                    const SizedBox(width: 32),\n                    Expanded(\n                      child: Column(\n                        children: [\n                          _buildRatingBar(\n                            1,\n                            0.1,\n                            primaryColor,\n                          ), // 10% for 1 star\n                          _buildRatingBar(\n                            2,\n                            0.2,\n                            primaryColor,\n                          ), // 20% for 2 stars\n                          _buildRatingBar(\n                            3,\n                            0.3,\n                            primaryColor,\n                          ), // 30% for 3 stars\n                          _buildRatingBar(\n                            4,\n                            0.7,\n                            primaryColor,\n                          ), // 70% for 4 stars\n                          _buildRatingBar(\n                            5,\n                            0.9,\n                            primaryColor,\n                          ), // 90% for 5 stars\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 32),\n\n                // Individual Reviews List\n                ListView.builder(\n                  shrinkWrap:\n                      true, // Important for nested ListView in SingleChildScrollView\n                  physics:\n                      const NeverScrollableScrollPhysics(), // Disable scrolling for this inner list\n                  itemCount: _sampleReviews.length,\n                  itemBuilder: (context, index) {\n                    final review = _sampleReviews[index];\n                    return _buildReviewItem(\n                      context,\n                      review['rating']!,\n                      review['date']!,\n                      review['text']!,\n                      review['author']!,\n                      textTheme,\n                    );\n                  },\n                ),\n                const SizedBox(height: 100), // Space for FAB\n              ],\n            ),\n          ),\n          // Floating Action Button\n          Positioned(\n            bottom: 24,\n            left: 0,\n            right: 0,\n            child: Center(\n              child: ElevatedButton.icon(\n                onPressed: () {\n                  _showGiveAReviewBottomSheet(context);\n                },\n                icon: const Icon(Icons.add, color: Colors.white),\n                label: Text(\n                  'Write a Review',\n                  style: textTheme.titleMedium?.copyWith(\n                    color: Colors.white,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: primaryColor,\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(\n                      30.0,\n                    ), // Rounded capsule shape\n                  ),\n                  padding: const EdgeInsets.symmetric(\n                    horizontal: 32,\n                    vertical: 16,\n                  ),\n                  elevation: 5,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildRatingBar(\n    int starCount,\n    double fillPercentage,\n    Color primaryColor,\n  ) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 4.0),\n      child: Row(\n        children: [\n          Text(\n            '$starCount',\n            style: Theme.of(\n              context,\n            ).textTheme.bodySmall?.copyWith(color: Colors.black),\n          ),\n          const SizedBox(width: 8),\n          Expanded(\n            child: LinearProgressIndicator(\n              value: fillPercentage,\n              backgroundColor: Colors.grey[200],\n              valueColor: AlwaysStoppedAnimation<Color>(primaryColor),\n              minHeight: 6,\n              borderRadius: BorderRadius.circular(3),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildReviewItem(\n    BuildContext context,\n    double rating,\n    String date,\n    String text,\n    String author,\n    TextTheme textTheme,\n  ) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              Row(\n                children: [\n                  Icon(Icons.star, color: Colors.amber, size: 18),\n                  const SizedBox(width: 4),\n                  Text(\n                    '$rating',\n                    style: textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(width: 8),\n                  Text(\n                    date,\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: Colors.grey[600],\n                    ),\n                  ),\n                ],\n              ),\n              IconButton(\n                icon: const Icon(Icons.more_horiz, color: Colors.grey),\n                onPressed: () {},\n                constraints: const BoxConstraints(), // Removes default padding\n                padding: EdgeInsets.zero, // Removes default padding\n              ),\n            ],\n          ),\n          const SizedBox(height: 8),\n          Text(\n            text,\n            style: textTheme.bodyLarge?.copyWith(\n              fontSize: 14,\n              color: Colors.black,\n              height: 1.5,\n            ),\n            maxLines: 4, // Limit lines for review text\n            overflow: TextOverflow.ellipsis,\n          ),\n          const SizedBox(height: 8),\n          Text(\n            author,\n            style: textTheme.bodyMedium?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: Colors.black,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  void _showGiveAReviewBottomSheet(BuildContext context) {\n    showModalBottomSheet(\n      context: context,\n      isScrollControlled: true,\n      shape: const RoundedRectangleBorder(\n        borderRadius: BorderRadius.vertical(top: Radius.circular(24.0)),\n      ),\n      builder: (BuildContext context) {\n        return _GiveAReviewBottomSheet();\n      },\n    );\n  }\n\n  // Sample data for reviews\n  final List<Map<String, dynamic>> _sampleReviews = [\n    {\n      'rating': 4.4,\n      'date': '27/06/2022',\n      'text':\n          'Lorem ipsum dolor sit amet, adipiscing elit. Sed at gravida nulla tempor, neque. Duis quam ut netus donec enim vitae ac diam.',\n      'author': 'Carter Botosh',\n    },\n    {\n      'rating': 4.2,\n      'date': '23/06/2022',\n      'text':\n          'Lorem ipsum dolor sit amet, adipiscing elit. Sed at gravida nulla tempor, neque. Duis quam ut netus donec enim vitae ac diam.',\n      'author': 'Jaxson Septimus',\n    },\n    {\n      'rating': 4.1,\n      'date': '22/06/2022',\n      'text':\n          'Lorem ipsum dolor sit amet, adipiscing elit. Sed at gravida nulla tempor, neque. Duis quam ut netus donec enim vitae ac diam.',\n      'author': 'Carla Press',\n    },\n    {\n      'rating': 4.4,\n      'date': '20/06/2022',\n      'text':\n          'Lorem ipsum dolor sit amet, adipiscing elit. Sed at gravida nulla tempor, neque. Duis quam ut netus donec enim vitae ac diam.',\n      'author': 'Alex Johnson',\n    },\n    {\n      'rating': 3.9,\n      'date': '18/06/2022',\n      'text':\n          'This course was insightful and well-structured. I learned a lot!',\n      'author': 'Maria Garcia',\n    },\n  ];\n}\n\nclass _GiveAReviewBottomSheet extends StatefulWidget {\n  const _GiveAReviewBottomSheet();\n\n  @override\n  State<_GiveAReviewBottomSheet> createState() =>\n      __GiveAReviewBottomSheetState();\n}\n\nclass __GiveAReviewBottomSheetState extends State<_GiveAReviewBottomSheet> {\n  int _selectedStars = 0;\n  final TextEditingController _reviewController = TextEditingController();\n\n  @override\n  void dispose() {\n    _reviewController.dispose();\n    super.dispose();\n  }\n\n  void _sendReview() {\n    if (_selectedStars > 0 && _reviewController.text.isNotEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Review submitted successfully!'),\n          duration: Duration(seconds: 2),\n        ),\n      );\n      Navigator.pop(context); // Close the bottom sheet\n    } else {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select stars and write your review.'),\n          duration: Duration(seconds: 2),\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n\n    return Padding(\n      padding: EdgeInsets.only(\n        left: 24.0,\n        right: 24.0,\n        top: 24.0,\n        bottom:\n            MediaQuery.of(context).viewInsets.bottom +\n            24.0, // Adjust for keyboard\n      ),\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              IconButton(\n                icon: const Icon(Icons.close, color: Colors.black),\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n              ),\n              Text(\n                'Give a Review',\n                style: textTheme.titleLarge?.copyWith(\n                  fontWeight: FontWeight.bold,\n                  color: Colors.black,\n                ),\n              ),\n              const SizedBox(width: 48), // Spacer to balance the close button\n            ],\n          ),\n          const SizedBox(height: 24),\n          Center(\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              children: List.generate(5, (index) {\n                return IconButton(\n                  icon: Icon(\n                    index < _selectedStars ? Icons.star : Icons.star_border,\n                    color: Colors.amber, // Amber color for stars\n                    size: 40,\n                  ),\n                  onPressed: () {\n                    setState(() {\n                      _selectedStars = index + 1;\n                    });\n                  },\n                );\n              }),\n            ),\n          ),\n          const SizedBox(height: 24),\n          Text(\n            'Detail Review',\n            style: textTheme.titleMedium?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: Colors.black,\n            ),\n          ),\n          const SizedBox(height: 8),\n          TextField(\n            controller: _reviewController,\n            maxLines: 5,\n            minLines: 3,\n            decoration: InputDecoration(\n              hintText:\n                  'Lorem ipsum dolor sit amet, adipiscing elit. Sed at gravida nulla tempor, neque. Duis quam ut netus donec enim vitae ac diam.',\n              hintStyle: textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),\n              border: OutlineInputBorder(\n                borderRadius: BorderRadius.circular(12.0),\n                borderSide: BorderSide(color: Colors.grey[300]!, width: 1.5),\n              ),\n              filled: true,\n              fillColor: Colors.white,\n              contentPadding: const EdgeInsets.symmetric(\n                vertical: 16.0,\n                horizontal: 16.0,\n              ),\n            ),\n            keyboardType: TextInputType.multiline,\n          ),\n          const SizedBox(height: 40),\n          SizedBox(\n            width: double.infinity,\n            child: ElevatedButton(\n              onPressed: _sendReview,\n              style: ElevatedButton.styleFrom(\n                padding: const EdgeInsets.symmetric(vertical: 16.0),\n                shape: RoundedRectangleBorder(\n                  borderRadius: BorderRadius.circular(12.0),\n                ),\n              ),\n              child: Text(\n                'Send Review',\n                style: textTheme.titleMedium?.copyWith(\n                  color: Colors.white,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\search_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\nimport 'package:canwa/Widgets/category_chip.dart'; // Reusing for consistency, though we'll make a new chip type\n\nclass SearchScreen extends StatefulWidget {\n  const SearchScreen({super.key});\n\n  @override\n  State<SearchScreen> createState() => _SearchScreenState();\n}\n\nclass _SearchScreenState extends State<SearchScreen> {\n  final TextEditingController _searchController = TextEditingController();\n  final Set<int> _selectedCategoryIndices =\n      {}; // Tracks multiple selected category chips\n\n  final List<Map<String, dynamic>> _categoryChips = [\n    {'name': 'Design', 'emoji': '📝'},\n    {'name': 'Business', 'emoji': '💰'},\n    {'name': 'Art', 'emoji': '🎨'},\n    {'name': 'Trading', 'emoji': '📈'},\n    {'name': 'Gym', 'emoji': '🏋️'},\n    {'name': 'Programming', 'emoji': '💻'},\n  ];\n\n  final List<Map<String, String>> _popularMentors = [\n    {'name': 'Destiny', 'image': 'https://picsum.photos/id/1027/200/200'},\n    {'name': 'Kayley', 'image': 'https://picsum.photos/id/1025/200/200'},\n    {'name': 'Kirstin', 'image': 'https://picsum.photos/id/1011/200/200'},\n    {'name': 'Ramon', 'image': 'https://picsum.photos/id/1005/200/200'},\n    {'name': 'Gustave', 'image': 'https://picsum.photos/id/1009/200/200'},\n  ];\n\n  final List<Map<String, dynamic>> _lastSeenCourses = [\n    {\n      'image': 'https://picsum.photos/id/1014/200/150',\n      'title': 'Complete Anatomy Human Beginner',\n      'rating': 4.2,\n      'reviews': 886,\n      'price': '\\$399',\n      'oldPrice': '\\$499',\n      'tag': null,\n    },\n    {\n      'image': 'https://picsum.photos/id/600/200/150',\n      'title': 'How to convert design to React js Brssic',\n      'rating': 4.5,\n      'reviews': 1239,\n      'price': '\\$499',\n      'oldPrice': '\\$699',\n      'tag': 'New Course',\n    },\n    {\n      'image': 'https://picsum.photos/id/602/200/150',\n      'title': 'Advanced Python for Data Science',\n      'rating': 4.7,\n      'reviews': 1100,\n      'price': '\\$550',\n      'oldPrice': '\\$700',\n      'tag': null,\n    },\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor),\n          onPressed: () {},\n          iconSize: 20,\n        ),\n        title: Text(\n          'Search',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: const Icon(\n              Icons.more_vert,\n              color: Colors.black,\n            ), // Three dots icon\n            onPressed: () {\n              _showFilterBottomSheet(context);\n            },\n          ),\n        ],\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Search Input Field\n            TextField(\n              controller: _searchController,\n              decoration: InputDecoration(\n                hintText: 'Search Something',\n                prefixIcon: Padding(\n                  padding: const EdgeInsets.only(left: 16.0, top: 8, bottom: 8),\n                  child: Icon(Icons.search, color: Colors.grey[600]),\n                ),\n                suffixIcon: Padding(\n                  padding: const EdgeInsets.only(right: 8.0),\n                  child: IconButton(\n                    icon: Icon(Icons.close, color: Colors.grey[600]),\n                    onPressed: () {\n                      _searchController.clear();\n                      // Perform search clear logic\n                    },\n                  ),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: primaryColor),\n                  borderRadius: BorderRadius.circular(15),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(15),\n                  borderSide: BorderSide(color: Colors.grey[300]!),\n                ),\n                filled: true,\n                fillColor: Colors.white, // White background for the input\n                contentPadding: const EdgeInsets.symmetric(\n                  vertical: 16.0,\n                  horizontal: 16.0,\n                ),\n              ),\n              onChanged: (value) {\n                // Perform search as user types\n              },\n            ),\n            const SizedBox(height: 24),\n\n            // Categories Section\n            Text(\n              'Categories',\n              style: textTheme.titleLarge?.copyWith(\n                fontSize: 16,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            Wrap(\n              spacing: 12.0, // horizontal space between chips\n              runSpacing: 12.0, // vertical space between lines of chips\n              children: List.generate(_categoryChips.length, (index) {\n                final chipData = _categoryChips[index];\n                return _EmojiCategoryChip(\n                  name: chipData['name']!,\n                  emoji: chipData['emoji']!,\n                  isSelected: _selectedCategoryIndices.contains(index),\n                  onTap: () {\n                    setState(() {\n                      if (_selectedCategoryIndices.contains(index)) {\n                        _selectedCategoryIndices.remove(index);\n                      } else {\n                        _selectedCategoryIndices.add(index);\n                      }\n                    });\n                  },\n                );\n              }),\n            ),\n            const SizedBox(height: 32),\n\n            // Popular Mentors Section\n            _buildSectionHeader(\n              context,\n              'Popular Mentors',\n              onSeeAllTap: () => {},\n            ),\n            const SizedBox(height: 16),\n            _buildPopularMentorsList(context),\n            const SizedBox(height: 32),\n\n            // Last Seen Section\n            _buildSectionHeader(context, 'Last Seen', onSeeAllTap: () => {}),\n            const SizedBox(height: 16),\n            _buildLastSeenCourseList(context),\n            const SizedBox(height: 20),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildSectionHeader(\n    BuildContext context,\n    String title, {\n    VoidCallback? onSeeAllTap,\n  }) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          title,\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 16,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        if (onSeeAllTap != null)\n          TextButton(\n            onPressed: onSeeAllTap,\n            style: TextButton.styleFrom(\n              padding: EdgeInsets.zero,\n              minimumSize: Size.zero,\n              tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n            ),\n            child: Text(\n              'See All',\n              style: textTheme.bodyLarge?.copyWith(\n                fontSize: 16,\n                color: primaryColor,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n      ],\n    );\n  }\n\n  Widget _buildPopularMentorsList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n\n    return SizedBox(\n      height: 120, // Height for mentor avatars and names\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: _popularMentors.length,\n        itemBuilder: (context, index) {\n          final mentor = _popularMentors[index];\n          return Padding(\n            padding: const EdgeInsets.only(right: 16.0),\n            child: Column(\n              children: [\n                CircleAvatar(\n                  radius: 40,\n                  backgroundImage: NetworkImage(mentor['image']!),\n                ),\n                const SizedBox(height: 8),\n                Text(\n                  mentor['name']!,\n                  style: textTheme.bodyMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n              ],\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildLastSeenCourseList(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final primaryColor = Theme.of(context).primaryColor;\n\n    return SizedBox(\n      height: 300, // Height for course cards including the button\n      child: ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemCount: _lastSeenCourses.length,\n        itemBuilder: (context, index) {\n          final course = _lastSeenCourses[index];\n          return Container(\n            width: 200, // Fixed width for each card\n            margin: const EdgeInsets.only(right: 16.0),\n            decoration: BoxDecoration(\n              color: Colors.white,\n              borderRadius: BorderRadius.circular(16.0),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.grey.withValues(alpha: 0.1),\n                  spreadRadius: 1,\n                  blurRadius: 5,\n                  offset: const Offset(0, 3),\n                ),\n              ],\n            ),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                ClipRRect(\n                  borderRadius: const BorderRadius.vertical(\n                    top: Radius.circular(16.0),\n                  ),\n                  child: Stack(\n                    children: [\n                      Image.network(\n                        course['image']!,\n                        height: 120,\n                        width: double.infinity,\n                        fit: BoxFit.cover,\n                      ),\n                      if (course['tag'] != null)\n                        Positioned(\n                          top: 12,\n                          left: 12,\n                          child: Container(\n                            padding: const EdgeInsets.symmetric(\n                              horizontal: 8,\n                              vertical: 4,\n                            ),\n                            decoration: BoxDecoration(\n                              color: Colors.black.withValues(alpha: 0.7),\n                              borderRadius: BorderRadius.circular(8),\n                            ),\n                            child: Text(\n                              course['tag']!,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                              ),\n                            ),\n                          ),\n                        ),\n                    ],\n                  ),\n                ),\n                Padding(\n                  padding: const EdgeInsets.all(12.0),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      // No category text at the top in this specific card variant\n                      Text(\n                        course['title']!,\n                        style: textTheme.titleMedium?.copyWith(\n                          fontWeight: FontWeight.bold,\n                          color: Colors.black,\n                        ),\n                        maxLines: 2,\n                        overflow: TextOverflow.ellipsis,\n                      ),\n                      const SizedBox(height: 8),\n                      Row(\n                        children: [\n                          const Icon(Icons.star, color: Colors.amber, size: 16),\n                          const SizedBox(width: 4),\n                          Text(\n                            '${course['rating']} (${course['reviews']} reviews)',\n                            style: textTheme.bodySmall?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                          ),\n                        ],\n                      ),\n                      const SizedBox(height: 8),\n                      Row(\n                        crossAxisAlignment: CrossAxisAlignment.baseline,\n                        textBaseline: TextBaseline.alphabetic,\n                        children: [\n                          Text(\n                            course['price']!,\n                            style: textTheme.titleMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: primaryColor,\n                            ),\n                          ),\n                          const SizedBox(width: 8),\n                          Text(\n                            course['oldPrice']!,\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: Colors.grey[500],\n                              decoration: TextDecoration.lineThrough,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const SizedBox(height: 12),\n                      SizedBox(\n                        width: double.infinity,\n                        child: ElevatedButton(\n                          onPressed: () {},\n                          style: ElevatedButton.styleFrom(\n                            padding: const EdgeInsets.symmetric(vertical: 8),\n                            shape: RoundedRectangleBorder(\n                              borderRadius: BorderRadius.circular(30.0),\n                            ),\n                            elevation: 0, // No shadow for this button\n                          ),\n                          child: Text(\n                            'Enroll Now',\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: Colors.white,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  void _showFilterBottomSheet(BuildContext context) {\n    showModalBottomSheet(\n      context: context,\n      isScrollControlled:\n          true, // Allows the bottom sheet to take full height if needed\n      shape: const RoundedRectangleBorder(\n        borderRadius: BorderRadius.vertical(top: Radius.circular(24.0)),\n      ),\n      builder: (BuildContext context) {\n        return _FilterBottomSheet();\n      },\n    );\n  }\n}\n\nclass _EmojiCategoryChip extends StatelessWidget {\n  final String name;\n  final String emoji;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const _EmojiCategoryChip({\n    required this.name,\n    required this.emoji,\n    this.isSelected = false,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    final ButtonStyle style = Theme.of(\n      context,\n    ).outlinedButtonTheme.style!.copyWith(\n      backgroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return primaryColor;\n        }\n        return Colors.white; // White background for unselected\n      }),\n      foregroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return Colors.white;\n        }\n        return Colors.black; // Black text for unselected\n      }),\n      side: WidgetStateProperty.resolveWith<BorderSide>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return BorderSide(color: primaryColor, width: 1.5);\n        }\n        return BorderSide(\n          color: Colors.grey[300]!,\n          width: 1.5,\n        ); // Light grey border for unselected\n      }),\n      shape: WidgetStateProperty.all<RoundedRectangleBorder>(\n        RoundedRectangleBorder(borderRadius: BorderRadius.circular(25.0)),\n      ),\n      padding: WidgetStateProperty.all<EdgeInsetsGeometry>(\n        const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n      ),\n    );\n\n    return OutlinedButton(\n      onPressed: onTap,\n      style: style,\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Text(\n            emoji,\n            style: const TextStyle(fontSize: 18), // Emoji size\n          ),\n          const SizedBox(width: 8),\n          Text(\n            name,\n            style: textTheme.bodyLarge?.copyWith(\n              color: isSelected ? Colors.white : Colors.black,\n              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _FilterBottomSheet extends StatefulWidget {\n  @override\n  __FilterBottomSheetState createState() => __FilterBottomSheetState();\n}\n\nclass __FilterBottomSheetState extends State<_FilterBottomSheet> {\n  final Set<int> _selectedFilterCategoryIndices = {};\n  final Set<int> _selectedLessonIndices = {};\n  RangeValues _currentPriceRange = const RangeValues(260, 12000);\n\n  final List<String> _filterCategories = [\n    'Design & Creative',\n    'Finance',\n    'Writing',\n    'Engineering & Architecture',\n    'Marketing',\n    'Development & IT',\n    'Others',\n  ];\n\n  final List<String> _lessonRanges = ['15-20 Lesson', '20-30 Lesson'];\n\n  void _resetFilters() {\n    setState(() {\n      _selectedFilterCategoryIndices.clear();\n      _selectedLessonIndices.clear();\n      _currentPriceRange = const RangeValues(\n        260,\n        12000,\n      ); // Reset to default values\n    });\n  }\n\n  void _applyFilters() {\n    // Implement filter application logic here\n    Navigator.pop(context); // Close the bottom sheet\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Container(\n      padding: const EdgeInsets.all(24.0),\n      child: SingleChildScrollView(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                IconButton(\n                  icon: const Icon(Icons.close, color: Colors.black),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                ),\n                Text(\n                  'Filter',\n                  style: textTheme.titleLarge?.copyWith(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                TextButton(\n                  onPressed: _resetFilters,\n                  child: Text(\n                    'Reset Filters',\n                    style: textTheme.bodyLarge?.copyWith(\n                      color:\n                          primaryColor, // Use primary color for Reset Filters\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 24),\n\n            Text(\n              'Categories',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 12),\n            Wrap(\n              spacing: 12.0,\n              runSpacing: 12.0,\n              children: List.generate(_filterCategories.length, (index) {\n                return CategoryChip(\n                  // Using the existing CategoryChip\n                  name: _filterCategories[index],\n                  isSelected: _selectedFilterCategoryIndices.contains(index),\n                  onTap: () {\n                    setState(() {\n                      if (_selectedFilterCategoryIndices.contains(index)) {\n                        _selectedFilterCategoryIndices.remove(index);\n                      } else {\n                        _selectedFilterCategoryIndices.add(index);\n                      }\n                    });\n                  },\n                );\n              }),\n            ),\n            const SizedBox(height: 24),\n\n            Text(\n              'Price',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 12),\n            RangeSlider(\n              values: _currentPriceRange,\n              min: 0,\n              max: 20000, // A reasonable max value, adjust as needed\n              divisions: 100, // For smoother steps\n              activeColor: primaryColor,\n              inactiveColor: primaryColor.withValues(alpha: 0.2),\n              labels: RangeLabels(\n                '\\$${_currentPriceRange.start.round()}',\n                '\\$${_currentPriceRange.end.round()}',\n              ),\n              onChanged: (RangeValues values) {\n                setState(() {\n                  _currentPriceRange = values;\n                });\n              },\n            ),\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 8.0),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Text(\n                    '\\$${_currentPriceRange.start.round()}',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: Colors.grey[600],\n                    ),\n                  ),\n                  Text(\n                    '\\$${_currentPriceRange.end.round()}',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: Colors.grey[600],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            Text(\n              'Lessons',\n              style: textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 12),\n            Wrap(\n              spacing: 12.0,\n              runSpacing: 12.0,\n              children: List.generate(_lessonRanges.length, (index) {\n                return CategoryChip(\n                  // Using the existing CategoryChip\n                  name: _lessonRanges[index],\n                  isSelected: _selectedLessonIndices.contains(index),\n                  onTap: () {\n                    setState(() {\n                      if (_selectedLessonIndices.contains(index)) {\n                        _selectedLessonIndices.remove(index);\n                      } else {\n                        _selectedLessonIndices.add(index);\n                      }\n                    });\n                  },\n                );\n              }),\n            ),\n            const SizedBox(height: 40),\n\n            PrimaryTextButton(\n              text: 'Apply Filters',\n              onPressed: () {\n                _applyFilters();\n              },\n            ),\n            SizedBox(\n              height: MediaQuery.of(context).viewInsets.bottom,\n            ), // Adjust for keyboard\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\signup_screen.dart\n```dart\nimport 'package:canwa/Widgets/auth_fields.dart';\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:canwa/Widgets/social_auth_button.dart';\nimport 'package:flutter/material.dart';\n\nclass SignupScreen extends StatefulWidget {\n  const SignupScreen({super.key});\n\n  @override\n  State<SignupScreen> createState() => _SignupScreenState();\n}\n\nclass _SignupScreenState extends State<SignupScreen> {\n  bool _agreeToTerms = false;\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        automaticallyImplyLeading:\n            false, // No back button needed for a signup screen\n        scrolledUnderElevation: 0,\n        title: Row(\n          children: [\n            Icon(\n              Icons.book,\n              color: primaryColor,\n              size: 16,\n            ), // SkillUp logo icon\n            const SizedBox(width: 8),\n            Text(\n              'SkillUp',\n              style: textTheme.titleLarge?.copyWith(\n                fontSize: 16,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n          ],\n        ),\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Sign up for an account',\n              style: TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'Creating an account can make you learn and grow quickly.',\n              style: TextStyle(fontSize: 14, color: Colors.grey[700]),\n            ),\n            const SizedBox(height: 24),\n\n            AuthTextfields().buildTextField(\n              labelText: \"Full Name\",\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 20),\n\n            AuthTextfields().buildTextField(\n              labelText: \"Email\",\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 20),\n\n            AuthTextfields().buildPasswordField(\n              controller: TextEditingController(),\n            ),\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Checkbox(\n                  value: _agreeToTerms,\n                  onChanged: (bool? newValue) {\n                    setState(() {\n                      _agreeToTerms = newValue ?? false;\n                    });\n                  },\n                  activeColor: primaryColor,\n                  materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n                ),\n                Expanded(\n                  child: GestureDetector(\n                    onTap: () {\n                      setState(() {\n                        _agreeToTerms = !_agreeToTerms;\n                      });\n                    },\n                    child: RichText(\n                      text: TextSpan(\n                        text: 'I agree to the Skillup ',\n                        style: textTheme.bodyMedium?.copyWith(\n                          color: Colors.black,\n                        ),\n                        children: [\n                          TextSpan(\n                            text: 'Terms of Service',\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                          TextSpan(\n                            text: ' and ',\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: Colors.black,\n                            ),\n                          ),\n                          TextSpan(\n                            text: 'Privacy Policy',\n                            style: textTheme.bodyMedium?.copyWith(\n                              color: primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 24),\n            PrimaryTextButton(text: \"Sign Up\"),\n            const SizedBox(height: 24),\n            Center(\n              child: Text(\n                'or',\n                style: textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            SocialAuthButton(type: ButtonType.google, onPressed: () {}),\n            const SizedBox(height: 16),\n            SocialAuthButton(type: ButtonType.apple, onPressed: () {}),\n            const SizedBox(height: 24),\n\n            Center(\n              child: RichText(\n                text: TextSpan(\n                  text: 'Already have an account? ',\n                  style: textTheme.bodyLarge?.copyWith(color: Colors.black),\n                  children: [\n                    TextSpan(\n                      text: 'Login',\n                      style: textTheme.bodyLarge?.copyWith(\n                        color: primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\verification_code_screen.dart\n```dart\nimport 'package:canwa/Widgets/primary_text_button.dart';\nimport 'package:flutter/material.dart';\n\nimport 'package:flutter/services.dart'; // Required for FilteringTextInputFormatter\n\nclass OtpScreen extends StatefulWidget {\n  const OtpScreen({super.key});\n\n  @override\n  State<OtpScreen> createState() => _OtpScreenState();\n}\n\nclass _OtpScreenState extends State<OtpScreen> {\n  final List<TextEditingController> _otpControllers = List.generate(\n    4,\n    (index) => TextEditingController(),\n  );\n  final List<FocusNode> _otpFocusNodes = List.generate(\n    4,\n    (index) => FocusNode(),\n  );\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < _otpControllers.length; i++) {\n      _otpControllers[i].addListener(() {\n        if (_otpControllers[i].text.length == 1 &&\n            i < _otpControllers.length - 1) {\n          _otpFocusNodes[i + 1].requestFocus();\n        } else if (_otpControllers[i].text.isEmpty && i > 0) {\n          _otpFocusNodes[i - 1].requestFocus();\n        }\n        // Optional: Trigger validation or enable button when all fields are filled\n        setState(() {}); // Rebuild to update button state or visual cues\n      });\n    }\n  }\n\n  @override\n  void dispose() {\n    for (var controller in _otpControllers) {\n      controller.dispose();\n    }\n    for (var focusNode in _otpFocusNodes) {\n      focusNode.dispose();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final TextTheme textTheme = Theme.of(context).textTheme;\n    final Color primaryColor = Theme.of(context).primaryColor;\n    final ColorScheme colorScheme = Theme.of(context).colorScheme;\n\n    return Scaffold(\n      backgroundColor: colorScheme.surface, // White background\n      appBar: AppBar(\n        backgroundColor: colorScheme.surface,\n        elevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Verification',\n          style: textTheme.titleLarge?.copyWith(\n            fontWeight: FontWeight.bold,\n            color: Colors.grey[800],\n            fontSize: 18,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const SizedBox(height: 40.0),\n            Text(\n              'Enter the code sent to your number',\n              style: textTheme.headlineMedium?.copyWith(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n                color: Colors.grey[850],\n              ),\n            ),\n            const SizedBox(height: 8.0),\n            Text(\n              'We sent a 4-digit code to +88017XXXXXXXX',\n              style: textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),\n            ),\n            const SizedBox(height: 32.0),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: List.generate(\n                _otpControllers.length,\n                (index) => _OtpInputField(\n                  controller: _otpControllers[index],\n                  focusNode: _otpFocusNodes[index],\n                  textTheme: textTheme,\n                ),\n              ),\n            ),\n            const SizedBox(height: 24.0),\n            Align(\n              alignment: Alignment.center,\n              child: TextButton(\n                onPressed: () {\n                  // Handle resend code action\n                },\n                child: Text(\n                  'Resend Code',\n                  style: textTheme.bodyMedium?.copyWith(\n                    color: primaryColor,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              ),\n            ),\n            const Spacer(),\n            PrimaryTextButton(\n              text: 'Verify',\n              onPressed: () {\n                // Read OTP: _otpControllers.map((c) => c.text).join()\n                // Perform verification logic\n              },\n            ),\n            const SizedBox(height: 40.0),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _OtpInputField extends StatefulWidget {\n  final TextEditingController controller;\n  final FocusNode focusNode;\n  final TextTheme textTheme;\n\n  const _OtpInputField({\n    required this.controller,\n    required this.focusNode,\n    required this.textTheme,\n  });\n\n  @override\n  State<_OtpInputField> createState() => _OtpInputFieldState();\n}\n\nclass _OtpInputFieldState extends State<_OtpInputField> {\n  late ValueNotifier<bool> isFocused;\n\n  @override\n  void initState() {\n    super.initState();\n    isFocused = ValueNotifier<bool>(widget.focusNode.hasFocus);\n    widget.focusNode.addListener(() {\n      isFocused.value = widget.focusNode.hasFocus;\n    });\n  }\n\n  @override\n  void dispose() {\n    isFocused.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final focusColor = Theme.of(context).primaryColor;\n\n    return ValueListenableBuilder<bool>(\n      valueListenable: isFocused,\n      builder: (context, focused, _) {\n        return Container(\n          width: 60,\n          height: 60,\n          decoration: BoxDecoration(\n            color: Colors.white,\n            borderRadius: BorderRadius.circular(10.0),\n            border: Border.all(\n              color: focused ? focusColor : Colors.grey[300]!,\n              width: focused ? 2.0 : 1.0,\n            ),\n            boxShadow:\n                focused\n                    ? [\n                      BoxShadow(\n                        color: focusColor.withOpacity(0.15),\n                        blurRadius: 15.0,\n                        spreadRadius: 5.0,\n                        offset: const Offset(0, 0),\n                      ),\n                    ]\n                    : [],\n          ),\n          alignment: Alignment.center,\n          child: TextField(\n            controller: widget.controller,\n            focusNode: widget.focusNode,\n            keyboardType: TextInputType.number,\n            textAlign: TextAlign.center,\n            maxLength: 1,\n            inputFormatters: [FilteringTextInputFormatter.digitsOnly],\n            style: widget.textTheme.headlineSmall?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: Colors.grey[850],\n            ),\n            decoration: const InputDecoration(\n              counterText: '',\n              border: InputBorder.none,\n              contentPadding: EdgeInsets.zero,\n            ),\n            cursorColor: focusColor,\n          ),\n        );\n      },\n    );\n  }\n}\n```\n\n// File: lib\\Screens\\wishlist_screen.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass WishlistScreen extends StatefulWidget {\n  const WishlistScreen({super.key});\n\n  @override\n  State<WishlistScreen> createState() => _WishlistScreenState();\n}\n\nclass _WishlistScreenState extends State<WishlistScreen> {\n  final TextEditingController _searchController = TextEditingController();\n  int _selectedCategoryIndex =\n      1; // \"Science\" is selected by default as per image\n\n  final List<Map<String, dynamic>> _categoryChipsWithIcons = [\n    {'name': 'Programming', 'icon': Icons.laptop_mac}, // Placeholder icon\n    {'name': 'Science', 'icon': Icons.public}, // Placeholder icon\n    {'name': 'Design', 'icon': Icons.palette}, // Placeholder icon\n    {'name': 'Business', 'icon': Icons.business_center}, // Placeholder icon\n    {'name': 'Art', 'icon': Icons.brush}, // Placeholder icon\n  ];\n\n  // Modified wishlistCourses to include an isFavorited status for each item\n  final List<Map<String, dynamic>> _wishlistCourses = [\n    {\n      'image': 'https://picsum.photos/id/600/100/80',\n      'category': 'Graphic Design',\n      'title': 'Expert Wireframing for Mobile Design',\n      'rating': 4.9,\n      'reviews': 12990,\n      'author': 'Jerremy Mamika',\n      'price': '\\$48',\n      'isFavorited': true, // All items start as favorited as per screenshot\n    },\n    {\n      'image': 'https://picsum.photos/id/338/100/80',\n      'category': 'Science',\n      'title': 'The Complete Solar Energy Course',\n      'rating': 4.9,\n      'reviews': 12990,\n      'author': 'Jerremy Mamika',\n      'price': '\\$125',\n      'isFavorited': true,\n    },\n    {\n      'image': 'https://picsum.photos/id/1015/100/80',\n      'category': 'Coding',\n      'title': 'How to convert design to React js Brssic',\n      'rating': 4.9,\n      'reviews': 12990,\n      'author': 'Jerremy Mamika',\n      'price': '\\$34',\n      'isFavorited': true,\n    },\n\n    {\n      'image': 'https://picsum.photos/id/116/100/80',\n      'category': 'Coding',\n      'title': 'How to convert design to React js Brssic',\n      'rating': 4.9,\n      'reviews': 12990,\n      'author': 'Jerremy Mamika',\n      'price': '\\$34',\n      'isFavorited': true,\n    },\n    {\n      'image': 'https://picsum.photos/id/1043/100/80',\n      'category': 'Photography',\n      'title': 'Mastering Street Photography',\n      'rating': 4.8,\n      'reviews': 9870,\n      'author': 'Sarah Doe',\n      'price': '\\$75',\n      'isFavorited': true,\n    },\n  ];\n\n  int _selectedIndex =\n      1; // 0 for Home, 1 for Wishlist, 2 for My Course, 3 for Profile\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n    // In a real app, you would navigate to different screens here.\n    // For now, it just highlights the selected tab.\n  }\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(\n            Icons.arrow_back_ios,\n            color: primaryColor,\n          ), // Black icon, transparent background\n          onPressed: () {},\n          iconSize: 20,\n        ),\n        title: Text(\n          'My Wishlist',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: Icon(\n              Icons.more_vert,\n              color: primaryColor,\n              size: 20,\n            ), // Black icon, transparent background\n            onPressed: () {},\n          ),\n        ],\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 24.0,\n              vertical: 16.0,\n            ),\n            child: Column(\n              children: [\n                // Search Bar\n                TextField(\n                  controller: _searchController,\n                  decoration: InputDecoration(\n                    hintText: 'Search Something',\n                    prefixIcon: Padding(\n                      padding: const EdgeInsets.only(\n                        left: 16.0,\n                        top: 8,\n                        bottom: 8,\n                      ),\n                      child: Icon(Icons.search, color: Colors.grey[600]),\n                    ),\n                    suffixIcon: Padding(\n                      padding: const EdgeInsets.only(right: 8.0),\n                      child: IconButton(\n                        icon: Icon(Icons.close, color: Colors.grey[600]),\n                        onPressed: () {\n                          _searchController.clear();\n                          // Perform search clear logic\n                        },\n                      ),\n                    ),\n                    focusedBorder: OutlineInputBorder(\n                      borderSide: BorderSide(color: primaryColor),\n                      borderRadius: BorderRadius.circular(15),\n                    ),\n                    enabledBorder: OutlineInputBorder(\n                      borderRadius: BorderRadius.circular(15),\n                      borderSide: BorderSide(color: Colors.grey[300]!),\n                    ),\n                    filled: true,\n                    fillColor: Colors.white, // White background for the input\n                    contentPadding: const EdgeInsets.symmetric(\n                      vertical: 16.0,\n                      horizontal: 16.0,\n                    ),\n                  ),\n                  onChanged: (value) {\n                    // Perform search as user types\n                  },\n                ),\n                const SizedBox(height: 16),\n\n                // Category Chips\n                SizedBox(\n                  height: 40,\n                  child: ListView.builder(\n                    scrollDirection: Axis.horizontal,\n                    itemCount: _categoryChipsWithIcons.length,\n                    itemBuilder: (context, index) {\n                      final chipData = _categoryChipsWithIcons[index];\n                      return Padding(\n                        padding: const EdgeInsets.only(right: 12.0),\n                        child: _CategoryChipWithIcon(\n                          name: chipData['name']!,\n                          icon: chipData['icon']!,\n                          isSelected: index == _selectedCategoryIndex,\n                          onTap: () {\n                            setState(() {\n                              _selectedCategoryIndex = index;\n                            });\n                          },\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ),\n\n          // Wishlist Course List\n          Expanded(\n            child: ListView.separated(\n              padding: const EdgeInsets.symmetric(\n                horizontal: 24.0,\n                vertical: 8.0,\n              ),\n              itemCount: _wishlistCourses.length,\n              itemBuilder: (context, index) {\n                final course = _wishlistCourses[index];\n                return _buildWishlistCourseCard(\n                  context,\n                  course,\n                  primaryColor,\n                  textTheme,\n                  index, // Pass index to uniquely identify the card\n                );\n              },\n              separatorBuilder:\n                  (context, index) =>\n                      const SizedBox(height: 16), // Spacing between cards\n            ),\n          ),\n        ],\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 0 ? Icons.home_filled : Icons.home_outlined,\n            ),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 1 ? Icons.bookmark : Icons.bookmark_border,\n            ),\n            label: 'Wishlist',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 2\n                  ? Icons.play_circle_fill\n                  : Icons.play_circle_outline,\n            ),\n            label: 'My Course',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(\n              _selectedIndex == 3 ? Icons.person : Icons.person_outline,\n            ),\n            label: 'Profile',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: primaryColor,\n        unselectedItemColor: Colors.grey,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed, // Ensures all labels are shown\n        selectedLabelStyle: textTheme.bodySmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: textTheme.bodySmall,\n      ),\n    );\n  }\n\n  Widget _buildWishlistCourseCard(\n    BuildContext context,\n    Map<String, dynamic> course,\n    Color primaryColor,\n    TextTheme textTheme,\n    int index,\n  ) {\n    return Material(\n      color: Colors.transparent,\n      borderRadius: BorderRadius.circular(16.0),\n      child: InkWell(\n        borderRadius: BorderRadius.circular(16.0),\n        onTap: () {},\n        hoverColor: primaryColor.withValues(\n          alpha: 0.05,\n        ), // subtle hover on web/desktop\n        splashColor: primaryColor.withValues(\n          alpha: 0.2,\n        ), // splash effect on tap\n        child: Container(\n          height: 120,\n          decoration: BoxDecoration(borderRadius: BorderRadius.circular(16.0)),\n          clipBehavior: Clip.antiAlias,\n          child: Row(\n            children: [\n              // Left Image\n              SizedBox(\n                width: 120,\n                height: double.infinity,\n                child: ClipRRect(\n                  borderRadius: const BorderRadius.only(\n                    topLeft: Radius.circular(16.0),\n                    bottomLeft: Radius.circular(16.0),\n                  ),\n                  child: Image.network(course['image']!, fit: BoxFit.cover),\n                ),\n              ),\n              // Right Text Area\n              Expanded(\n                child: Padding(\n                  padding: const EdgeInsets.symmetric(\n                    vertical: 8.0,\n                    horizontal: 8,\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      // Category + Heart Icon\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                        children: [\n                          Expanded(\n                            child: Text(\n                              course['category']!,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: primaryColor,\n                                fontWeight: FontWeight.bold,\n                              ),\n                              maxLines: 1,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                          ),\n                          GestureDetector(\n                            onTap: () {\n                              setState(() {\n                                _wishlistCourses[index]['isFavorited'] =\n                                    !_wishlistCourses[index]['isFavorited'];\n                              });\n                            },\n                            child: Icon(\n                              _wishlistCourses[index]['isFavorited']\n                                  ? Icons.favorite\n                                  : Icons.favorite_border,\n                              color:\n                                  _wishlistCourses[index]['isFavorited']\n                                      ? Colors.red\n                                      : Colors.grey[600],\n                              size: 18,\n                            ),\n                          ),\n                        ],\n                      ),\n                      // Title\n                      Text(\n                        course['title']!,\n                        style: textTheme.titleMedium?.copyWith(\n                          fontSize: 14,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.black,\n                        ),\n                        maxLines: 2,\n                        overflow: TextOverflow.ellipsis,\n                      ),\n                      // Rating and Reviews\n                      Row(\n                        children: [\n                          const Icon(Icons.star, color: Colors.amber, size: 16),\n                          const SizedBox(width: 4),\n                          Text(\n                            '${course['rating']} • (${course['reviews']})',\n                            style: textTheme.bodySmall?.copyWith(\n                              color: Colors.grey[600],\n                              fontSize: 12,\n                            ),\n                          ),\n                        ],\n                      ),\n                      // Author and Price\n                      Row(\n                        children: [\n                          Expanded(\n                            child: Text(\n                              course['author']!,\n                              style: textTheme.bodySmall?.copyWith(\n                                color: Colors.grey[600],\n                                fontSize: 12,\n                              ),\n                              maxLines: 1,\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                          ),\n                          Text(\n                            course['price']!,\n                            style: textTheme.titleMedium?.copyWith(\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                              fontSize: 14,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n// Reusing and adapting the CategoryChip for icons\nclass _CategoryChipWithIcon extends StatelessWidget {\n  final String name;\n  final IconData icon;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const _CategoryChipWithIcon({\n    required this.name,\n    required this.icon,\n    this.isSelected = false,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    final ButtonStyle style = Theme.of(\n      context,\n    ).outlinedButtonTheme.style!.copyWith(\n      backgroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return primaryColor;\n        }\n        return Colors.white; // White background for unselected\n      }),\n      foregroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return Colors.white;\n        }\n        return Colors.black; // Black text for unselected\n      }),\n      side: WidgetStateProperty.resolveWith<BorderSide>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return BorderSide(color: primaryColor, width: 1.5);\n        }\n        return BorderSide(\n          color: Colors.grey[300]!,\n          width: 1.5,\n        ); // Light grey border for unselected\n      }),\n      shape: WidgetStateProperty.all<RoundedRectangleBorder>(\n        RoundedRectangleBorder(borderRadius: BorderRadius.circular(25.0)),\n      ),\n      padding: WidgetStateProperty.all<EdgeInsetsGeometry>(\n        const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n      ),\n    );\n\n    return OutlinedButton(\n      onPressed: onTap,\n      style: style,\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(icon, color: isSelected ? Colors.white : Colors.black, size: 18),\n          const SizedBox(width: 8),\n          Text(\n            name,\n            style: textTheme.bodyLarge?.copyWith(\n              fontSize: 14,\n              color: isSelected ? Colors.white : Colors.black,\n              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Widgets\\appbar.dart\n```dart\nimport 'package:flutter/material.dart';\r\n\r\nclass CustomAppBar extends StatelessWidget implements PreferredSizeWidget {\r\n  final String welcomeText;\r\n  final String userName;\r\n  final String profileImageUrl;\r\n  final VoidCallback? onSearchPressed;\r\n  final VoidCallback? onNotificationsPressed;\r\n  final bool showNotificationBadge;\r\n\r\n  const CustomAppBar({\r\n    Key? key,\r\n    this.welcomeText = 'Welcome Back,',\r\n    this.userName = 'Josse Makima',\r\n    this.profileImageUrl = 'https://picsum.photos/id/237/200/200',\r\n    this.onSearchPressed,\r\n    this.onNotificationsPressed,\r\n    this.showNotificationBadge = true,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final textTheme = Theme.of(context).textTheme;\r\n\r\n    return AppBar(\r\n      scrolledUnderElevation: 0,\r\n      backgroundColor: Colors.white,\r\n      elevation: 0,\r\n      toolbarHeight: 80, // Adjust height as needed\r\n      title: Padding(\r\n        padding: const EdgeInsets.only(top: 8.0),\r\n        child: Row(\r\n          children: [\r\n            CircleAvatar(\r\n              radius: 24,\r\n              backgroundImage: NetworkImage(\r\n                profileImageUrl, // Placeholder profile image\r\n              ),\r\n            ),\r\n            const SizedBox(width: 12),\r\n            Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                Text(\r\n                  welcomeText,\r\n                  style: textTheme.bodyMedium?.copyWith(\r\n                    color: Colors.grey[600],\r\n                  ),\r\n                ),\r\n                Text(\r\n                  userName,\r\n                  style: const TextStyle(\r\n                    fontSize: 14,\r\n                    fontWeight: FontWeight.bold,\r\n                    color: Colors.black,\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            const Spacer(),\r\n            IconButton(\r\n              icon: const Icon(Icons.search, color: Colors.black),\r\n              onPressed:\r\n                  onSearchPressed ??\r\n                  () {\r\n                    // Handle search\r\n                    // print('Search pressed');\r\n                  },\r\n            ),\r\n            Stack(\r\n              children: [\r\n                IconButton(\r\n                  icon: const Icon(\r\n                    Icons.notifications_none,\r\n                    color: Colors.black,\r\n                  ),\r\n                  onPressed:\r\n                      onNotificationsPressed ??\r\n                      () {\r\n                        // Handle notifications\r\n                        // print('Notifications pressed');\r\n                      },\r\n                ),\r\n                if (showNotificationBadge)\r\n                  Positioned(\r\n                    right: 8,\r\n                    top: 8,\r\n                    child: Container(\r\n                      padding: const EdgeInsets.all(3),\r\n                      decoration: const BoxDecoration(\r\n                        color: Colors.red, // Notification indicator color\r\n                        shape: BoxShape.circle,\r\n                      ),\r\n                      constraints: const BoxConstraints(\r\n                        minWidth: 12,\r\n                        minHeight: 12,\r\n                      ),\r\n                    ),\r\n                  ),\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Size get preferredSize => const Size.fromHeight(80);\r\n}\n```\n\n// File: lib\\Widgets\\auth_fields.dart\n```dart\nimport 'package:flutter/material.dart';\r\n\r\nclass AuthTextfields {\r\n  Widget buildTextField({\r\n    required TextEditingController controller,\r\n    String labelText = 'Email',\r\n    Color focusColor = const Color(0xFF7B4DFF),\r\n  }) {\r\n    final focusNode = FocusNode();\r\n    final isFocused = ValueNotifier<bool>(false);\r\n\r\n    focusNode.addListener(() {\r\n      isFocused.value = focusNode.hasFocus;\r\n    });\r\n\r\n    return ValueListenableBuilder<bool>(\r\n      valueListenable: isFocused,\r\n      builder: (context, focused, _) {\r\n        return Container(\r\n          decoration: BoxDecoration(\r\n            borderRadius: BorderRadius.circular(12.0),\r\n            boxShadow:\r\n                focused\r\n                    ? [\r\n                      BoxShadow(\r\n                        color: focusColor.withValues(alpha: 0.15),\r\n                        blurRadius: 15.0,\r\n                        spreadRadius: 5.0,\r\n                        offset: const Offset(0, 0),\r\n                      ),\r\n                    ]\r\n                    : [],\r\n          ),\r\n          child: TextField(\r\n            controller: controller,\r\n            focusNode: focusNode,\r\n            keyboardType: TextInputType.emailAddress,\r\n            obscureText: false,\r\n            style: const TextStyle(fontSize: 16.0),\r\n            decoration: InputDecoration(\r\n              labelText: labelText,\r\n              contentPadding: const EdgeInsets.fromLTRB(15.0, 20.0, 15.0, 10.0),\r\n              filled: true,\r\n              fillColor: Colors.white,\r\n              floatingLabelBehavior: FloatingLabelBehavior.auto,\r\n              enabledBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(12.0),\r\n                borderSide: BorderSide(color: Colors.grey.shade300, width: 1.0),\r\n              ),\r\n              focusedBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(12.0),\r\n                borderSide: BorderSide(color: focusColor, width: 2.0),\r\n              ),\r\n              labelStyle: TextStyle(\r\n                color: focused ? focusColor : Colors.grey.shade600,\r\n                fontSize: 16.0,\r\n              ),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget buildPasswordField({\r\n    required TextEditingController controller,\r\n    String labelText = 'Password',\r\n    Color focusColor = const Color(0xFF7B4DFF),\r\n  }) {\r\n    final focusNode = FocusNode();\r\n    final isFocused = ValueNotifier<bool>(false);\r\n    final obscureNotifier = ValueNotifier<bool>(true); // <-- persistent state\r\n\r\n    focusNode.addListener(() {\r\n      isFocused.value = focusNode.hasFocus;\r\n    });\r\n\r\n    return ValueListenableBuilder<bool>(\r\n      valueListenable: isFocused,\r\n      builder: (context, focused, _) {\r\n        return ValueListenableBuilder<bool>(\r\n          valueListenable: obscureNotifier,\r\n          builder: (context, _obscureText, _) {\r\n            return Container(\r\n              decoration: BoxDecoration(\r\n                borderRadius: BorderRadius.circular(12.0),\r\n                boxShadow:\r\n                    focused\r\n                        ? [\r\n                          BoxShadow(\r\n                            color: focusColor.withOpacity(0.15),\r\n                            blurRadius: 15.0,\r\n                            spreadRadius: 5.0,\r\n                            offset: const Offset(0, 0),\r\n                          ),\r\n                        ]\r\n                        : [],\r\n              ),\r\n              child: TextField(\r\n                controller: controller,\r\n                focusNode: focusNode,\r\n                keyboardType: TextInputType.text,\r\n                obscureText: _obscureText,\r\n                style: const TextStyle(fontSize: 16.0),\r\n                decoration: InputDecoration(\r\n                  labelText: labelText,\r\n                  contentPadding: const EdgeInsets.fromLTRB(\r\n                    15.0,\r\n                    20.0,\r\n                    15.0,\r\n                    10.0,\r\n                  ),\r\n                  filled: true,\r\n                  fillColor: Colors.white,\r\n                  floatingLabelBehavior: FloatingLabelBehavior.auto,\r\n                  enabledBorder: OutlineInputBorder(\r\n                    borderRadius: BorderRadius.circular(12.0),\r\n                    borderSide: BorderSide(\r\n                      color: Colors.grey.shade300,\r\n                      width: 1.0,\r\n                    ),\r\n                  ),\r\n                  focusedBorder: OutlineInputBorder(\r\n                    borderRadius: BorderRadius.circular(12.0),\r\n                    borderSide: BorderSide(color: focusColor, width: 2.0),\r\n                  ),\r\n                  labelStyle: TextStyle(\r\n                    color: focused ? focusColor : Colors.grey.shade600,\r\n                    fontSize: 16.0,\r\n                  ),\r\n                  suffixIcon: Padding(\r\n                    padding: const EdgeInsets.only(right: 8.0),\r\n                    child: IconButton(\r\n                      icon: Icon(\r\n                        _obscureText ? Icons.visibility_off : Icons.visibility,\r\n                        color: Colors.grey.withOpacity(0.7),\r\n                      ),\r\n                      onPressed: () {\r\n                        obscureNotifier.value = !obscureNotifier.value;\r\n                      },\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\n```\n\n// File: lib\\Widgets\\category_chip.dart\n```dart\nimport 'package:flutter/material.dart';\n\nclass CategoryChip extends StatelessWidget {\n  final String name;\n  final bool isSelected;\n  final VoidCallback onTap;\n\n  const CategoryChip({\n    super.key,\n    required this.name,\n    this.isSelected = false,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    // Use OutlinedButton.styleFrom for consistency with the project's theme\n    final ButtonStyle style = Theme.of(\n      context,\n    ).outlinedButtonTheme.style!.copyWith(\n      backgroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return primaryColor;\n        }\n        return Colors.white; // White background for unselected\n      }),\n      foregroundColor: WidgetStateProperty.resolveWith<Color>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return Colors.white;\n        }\n        return Colors.black; // Black text for unselected\n      }),\n      side: WidgetStateProperty.resolveWith<BorderSide>((\n        Set<WidgetState> states,\n      ) {\n        if (isSelected) {\n          return BorderSide(color: primaryColor, width: 1.5);\n        }\n        return BorderSide(\n          color: Colors.grey[300]!,\n          width: 1.5,\n        ); // Light grey border for unselected\n      }),\n      shape: WidgetStateProperty.all<RoundedRectangleBorder>(\n        RoundedRectangleBorder(borderRadius: BorderRadius.circular(25.0)),\n      ),\n      padding: WidgetStateProperty.all<EdgeInsetsGeometry>(\n        const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),\n      ),\n    );\n\n    return OutlinedButton(\n      onPressed: onTap,\n      style: style,\n      child: Text(\n        name,\n        style: textTheme.bodySmall?.copyWith(\n          color: isSelected ? Colors.white : Colors.black,\n          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,\n        ),\n      ),\n    );\n  }\n}\n```\n\n// File: lib\\Widgets\\primary_text_button.dart\n```dart\n/*\r\nA versatile primary button widget that spans the full width of its container with customizable text and state handling.\r\nCommon use cases:\r\n1. Form submission buttons\r\n2. Primary action buttons in workflows\r\n3. Confirmation dialogs\r\n4. Call-to-action buttons in key user flows\r\n*/\r\n\r\nimport 'package:flutter/material.dart';\r\n\r\nclass PrimaryTextButton extends StatelessWidget {\r\n  final Function()? onPressed;\r\n  final String text;\r\n  const PrimaryTextButton({\r\n    super.key,\r\n    this.text = \"Submit\",\r\n    this.onPressed = _defaultOnPressed,\r\n  });\r\n  static void _defaultOnPressed() {}\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: double.infinity,\r\n      child: FilledButton(\r\n        onPressed: onPressed,\r\n        style: FilledButton.styleFrom(\r\n          /// The button should be rounded. Don't change the borderRadius.\r\n          shape: RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.circular(60),\r\n          ),\r\n          padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),\r\n        ),\r\n        child: Text(\r\n          text,\r\n          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n```\n\n// File: lib\\Widgets\\social_auth_button.dart\n```dart\n/*\r\nA comprehensive social authentication button widget that supports multiple providers(Apple, Google, Facebook) with brand-specific styling.\r\n\r\nCommon use cases:\r\n1. Social login/signup flows\r\n2. Account linking interfaces\r\n3. Social sharing features\r\n4. OAuth authentication implementations\r\n*/\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:font_awesome_flutter/font_awesome_flutter.dart';\r\n\r\n// Enum defining the types of buttons supported\r\nenum ButtonType { apple, google, facebook }\r\n\r\nclass SocialAuthButton extends StatelessWidget {\r\n  final ButtonType type;\r\n  final VoidCallback onPressed;\r\n  final String? customText; // Optional text override\r\n\r\n  const SocialAuthButton({\r\n    super.key,\r\n    required this.type,\r\n    required this.onPressed,\r\n    this.customText,\r\n  });\r\n\r\n  factory SocialAuthButton.apple({Key? key, required VoidCallback onPressed}) =>\r\n      SocialAuthButton(key: key, type: ButtonType.apple, onPressed: onPressed);\r\n\r\n  factory SocialAuthButton.google({\r\n    Key? key,\r\n    required VoidCallback onPressed,\r\n  }) =>\r\n      SocialAuthButton(key: key, type: ButtonType.google, onPressed: onPressed);\r\n\r\n  factory SocialAuthButton.facebook({\r\n    Key? key,\r\n    required VoidCallback onPressed,\r\n  }) => SocialAuthButton(\r\n    key: key,\r\n    type: ButtonType.facebook,\r\n    onPressed: onPressed,\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return LayoutBuilder(\r\n      builder: (context, constraints) {\r\n        return SizedBox(\r\n          width: double.infinity,\r\n\r\n          child: FilledButton(\r\n            onPressed: onPressed,\r\n\r\n            style: FilledButton.styleFrom(\r\n              side: BorderSide(color: Colors.grey.shade300, width: 1),\r\n\r\n              /// The button should be rounded. Don't change the borderRadius.\r\n              shape: RoundedRectangleBorder(\r\n                borderRadius: BorderRadius.circular(60),\r\n              ),\r\n              padding: EdgeInsets.symmetric(vertical: 24, horizontal: 16),\r\n              backgroundColor: _getButtonColor(),\r\n              foregroundColor: _getTextColor(),\r\n            ),\r\n            child: Stack(\r\n              alignment: Alignment.center,\r\n              children: [\r\n                Positioned(left: 0, child: _getIcon(24.0)),\r\n                SizedBox(\r\n                  width: double.infinity,\r\n                  child: Text(\r\n                    // Use custom text first, then provider name, then default\r\n                    customText ?? 'Continue with ${_getProviderName()}',\r\n                    style: const TextStyle(\r\n                      fontSize: 16.0,\r\n                      fontWeight: FontWeight.w500,\r\n                    ),\r\n                    textAlign: TextAlign.center,\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  // Only relevant for social buttons\r\n  String _getProviderName() {\r\n    switch (type) {\r\n      case ButtonType.apple:\r\n        return 'Apple';\r\n      case ButtonType.google:\r\n        return 'Google';\r\n      case ButtonType.facebook:\r\n        return 'Facebook';\r\n    }\r\n  }\r\n\r\n  Color _getButtonColor() {\r\n    switch (type) {\r\n      case ButtonType.apple:\r\n        return Colors.white;\r\n      case ButtonType.google:\r\n        // Using white for Google button background as is common\r\n        return Colors.white;\r\n      case ButtonType.facebook:\r\n        return Colors.white; // Facebook blue\r\n    }\r\n  }\r\n\r\n  Color _getTextColor() {\r\n    switch (type) {\r\n      case ButtonType.apple:\r\n      case ButtonType.facebook:\r\n      case ButtonType.google:\r\n        return Colors.black87;\r\n    }\r\n  }\r\n\r\n  // Returns the icon widget or an empty box\r\n  Widget _getIcon(double size) {\r\n    switch (type) {\r\n      case ButtonType.apple:\r\n        // Using FontAwesome for consistency, but could use Icons.apple\r\n        return FaIcon(\r\n          FontAwesomeIcons.apple,\r\n          size: size,\r\n          color: _getTextColor(),\r\n        );\r\n      case ButtonType.google:\r\n        return Image.network(\r\n          'https://img.icons8.com/?size=100&id=17949&format=png',\r\n          height: size,\r\n          width: size,\r\n        );\r\n      case ButtonType.facebook:\r\n        // Using FontAwesome's Facebook icon\r\n        return FaIcon(\r\n          FontAwesomeIcons.facebookF,\r\n          size: size,\r\n          color: Colors.blue,\r\n        ); // Use F logo\r\n    }\r\n  }\r\n}\n```\n\n"},{"id":null,"text":"      \n      "},{"id":null,"text":"Users selected primaryColor is: Color(0xFF7356FF) and font is GoogleFonts.plusJakartaSansTextTheme(). \n\nTo make the app pick up the colors and fonts appropriately, you can set them in the material app theme as:\n\ntheme: ThemeData(\n  primaryColor: <user primary color>,\n  colorScheme: ColorScheme.fromSeed(\n    seedColor: <user primary color>,\n    brightness: ThemeData.light().brightness,\n    onPrimary: Colors.white,\n    surface: Colors.white,\n  ),\n  textTheme: <user text theme>,\n),\n\nThis is user's choosen UI Template: Default theme for this UIKIT:\n \n  @override\n  Widget build(BuildContext context) {\n    const Color primaryColor = Color(\n      0xFF7356FF,\n    ); // Use user's chosen primary color\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        primaryColor: primaryColor,\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: primaryColor,\n          brightness: ThemeData.light().brightness,\n          onPrimary: Colors.white,\n          surface: Colors.white,\n        ),\n        appBarTheme: const AppBarTheme(\n          backgroundColor: Colors.white,\n          elevation: 0,\n          iconTheme: IconThemeData(color: primaryColor),\n        ),\n        elevatedButtonTheme: ElevatedButtonThemeData(\n          style: ElevatedButton.styleFrom(\n            backgroundColor: primaryColor,\n            foregroundColor: Colors.white,\n          ),\n        ),\n        textButtonTheme: TextButtonThemeData(\n          style: TextButton.styleFrom(foregroundColor: primaryColor),\n        ),\n        outlinedButtonTheme: OutlinedButtonThemeData(\n          style: OutlinedButton.styleFrom(\n            foregroundColor: primaryColor,\n            side: const BorderSide(color: primaryColor)\n          ),\n        ),\n        floatingActionButtonTheme: FloatingActionButtonThemeData(\n          backgroundColor: primaryColor,\n          foregroundColor: Colors.white,\n        ),\n        filledButtonTheme: FilledButtonThemeData(\n          style: FilledButton.styleFrom(\n            backgroundColor: primaryColor,\n            foregroundColor: Colors.white,\n          ),\n        ),\n        textTheme:\n            GoogleFonts.plusJakartaSansTextTheme(), // Apply user's text theme\n      )\nmodern/lib/main.dart\nmodern/lib/screens/video_player/live_stream_engagment_options.dart\nmodern/lib/screens/search/tabbed_search_screen.dart\nmodern/lib/screens/profile_and_settings/user_profile_with_settings.dart\nmodern/lib/screens/navigation/floating_navigation_bar_demo.dart\nmodern/lib/screens/inbox/notifactions_screen.dart\nmodern/lib/screens/inbox/messages_screen.dart\nmodern/lib/screens/feed/feed_with_categories.dart\nmodern/lib/screens/faq/faq_screen.dart\nmodern/lib/screens/authentication/social_media_email_signup.dart\nmodern/lib/screens/authentication/otp_screen.dart\nmodern/lib/screens/authentication/multi_option_registration.dart\nmodern/lib/screens/authentication/login_using_number.dart\nmodern/lib/screens/authentication/email_password_login.dart\nmodern/lib/screens/audio_player/music_player.dart\nmodern/lib/screens/articles/article_screen.dart\nmodern/lib/screens/articles/article_image_highlight_screen.dart\nmodern/lib/screens/articles/article_author_detail_screen.dart\nmodern/lib/components/text_fields/search_field.dart\nmodern/lib/components/text_fields/phone_text_field.dart\nmodern/lib/components/text_fields/otp_indicator.dart\nmodern/lib/components/text_fields/auth_textfields.dart\nmodern/lib/components/search_bars/basic.dart\nmodern/lib/components/paywall/subscription_term_selection.dart\nmodern/lib/components/paywall/plan_selection.dart\nmodern/lib/components/lists/text_cart_list.dart\nmodern/lib/components/lists/radio_options_list.dart\nmodern/lib/components/lists/product_cart_list.dart\nmodern/lib/components/lists/notification_tile.dart\nmodern/lib/components/lists/message_list_item.dart\nmodern/lib/components/headers/tab_navigation_01.dart\nmodern/lib/components/headers/location_search.dart\nmodern/lib/components/headers/center_button_navbar.dart\nmodern/lib/components/headers/bottom_navigation_bar.dart\nmodern/lib/components/forms/rating_feedback.dart\nmodern/lib/components/charts/survey_result_chart.dart\nmodern/lib/components/charts/revenue_progress_chart.dart\nmodern/lib/components/charts/circular_progress.dart\nmodern/lib/components/charts/bar_vertical_fill.dart\nmodern/lib/components/charts/bar_horizontal_fill.dart\nmodern/lib/components/carousels/testimonials.dart\nmodern/lib/components/carousels/star_ratings.dart\nmodern/lib/components/carousels/profile_suggestions.dart\nmodern/lib/components/carousels/instagram_stories.dart\nmodern/lib/components/carousels/feature_cards.dart\nmodern/lib/components/carousels/background_image_cards.dart\nmodern/lib/components/cards/video_card.dart\nmodern/lib/components/cards/toggle_feature_card.dart\nmodern/lib/components/cards/social_media_postcard.dart\nmodern/lib/components/cards/order_receipt.dart\nmodern/lib/components/cards/follow_suggestion.dart\nmodern/lib/components/cards/date_picker.dart\nmodern/lib/components/cards/credit_wallet.dart\nmodern/lib/components/buttons/toggle_button.dart\nmodern/lib/components/buttons/social_auth_button.dart\nmodern/lib/components/buttons/primary_text_button.dart\nmodern/lib/components/buttons/floating_button.dart\nmodern/lib/components/buttons/custom_chip.dart\nmodern/lib/components/buttons/circular_icon_button.dart\nmodern/lib/components/appbars/custom_appbar.dart\nCopy the required components and screens directly in the user’s project in a file structure similar to template. Remember the UIKit components are designed to perfection, so don't change styling unless it explicitly is a user requirement.\n             \nAnalyze the user instructions, current screen screenshot, reference images and detail out the design requirements of the UI screen and what do we need to achieve there. \n            \nThen figure out what are widgets and screens in the UI template that we need to use to achieve the user's design requirements. If there are no direct fitting options, try to still use some existing widgets by having a plan to tweak them. Make sure the user's project matches the UI template design."},{"id":null,"text":"You can ask clients for as many template files as you need to see as many times as you want. Please proceed, all the best!"}]},{"id":null,"role":"model","parts":[{"id":null,"text":"I understand you'd like a screen full of animations named `test.dart`. Since \"animations\" can be a broad term, and to ensure I create a screen that aligns with the existing UIKit's aesthetic and quality, I need to understand what kind of animations you're looking for.\n\nWould you prefer:\n1.  **Implicit Animations**: Where properties like size, color, or position smoothly transition when their values change (e.g., `AnimatedContainer`, `AnimatedOpacity`).\n2.  **Explicit Animations**: Where you control the animation timeline, perhaps for more complex sequences or custom effects (e.g., `AnimationController`, `TweenAnimationBuilder`).\n3.  **Hero Animations**: For smooth transitions of elements between screens.\n4.  **Physics-based Animations**: For more natural, spring-like movements.\n5.  **Lottie Animations**: If you have specific JSON animation files you'd like to integrate (requires the `lottie` package).\n\nTo help me design a \"world-class\" animated screen that truly fits your existing app's style, could you please specify:\n\n*   **What elements** should be animated on the screen? (e.g., images, text, buttons, shapes)\n*   **What kind of interactions** should trigger these animations? (e.g., tapping a button, scrolling, appearing on screen)\n*   **What is the general purpose** of this \"test\" screen? Is it for demonstrating capabilities, or will it be integrated into a user flow later?\n\nIn the meantime, I will propose a screen that incorporates a few common and visually appealing animations using Flutter's built-in capabilities, leveraging the primary color and text theme from your `main.dart`. I'll focus on subtle, modern animations that would typically fit into a clean UI.\n\nI'll start by requesting to view some core UI template files that might contain animated elements or layouts suitable for demonstrating animations, or at least common UI patterns I can animate:\n\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\nmodern/lib/screens/video_player/live_stream_engagment_options.dart\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\nmodern/lib/screens/feed/feed_with_categories.dart\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\nmodern/lib/components/carousels/feature_cards.dart\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\nmodern/lib/components/buttons/toggle_button.dart\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\n<<<PIXEL_VIEW_TEMPLATE_FILE_START>>>\nmodern/lib/components/charts/circular_progress.dart\n<<<PIXEL_VIEW_TEMPLATE_FILE_END>>>\n\nI'll await your further clarification and the requested file contents!"}]},{"id":null,"role":"user","parts":[{"id":null,"text":"Template files:\n\nPath: modern/lib/screens/video_player/live_stream_engagment_options.dart\n\nimport 'package:flutter/material.dart';\n\nclass LiveSessionScreen extends StatefulWidget {\n  const LiveSessionScreen({super.key});\n\n  @override\n  State<LiveSessionScreen> createState() => _LiveSessionScreenState();\n}\n\nclass _LiveSessionScreenState extends State<LiveSessionScreen> {\n  bool isLiked = false;\n  bool isDisliked = false;\n  bool isSubscribed = false;\n  bool isSaved = false;\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n  }\n\n  void toggleLike() {\n    setState(() {\n      isLiked = !isLiked;\n      if (isLiked) isDisliked = false;\n    });\n  }\n\n  void toggleDislike() {\n    setState(() {\n      isDisliked = !isDisliked;\n      if (isDisliked) isLiked = false;\n    });\n  }\n\n  void toggleSubscribe() {\n    setState(() {\n      isSubscribed = !isSubscribed;\n    });\n  }\n\n  void toggleSave() {\n    setState(() {\n      isSaved = !isSaved;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        backgroundColor: Colors.transparent,\n        scrolledUnderElevation: 0,\n        elevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios_new, color: Color(0xFF7257FF)),\n          onPressed: () {\n            // Handle back navigation\n          },\n        ),\n        actions: [\n          IconButton(\n            icon: Icon(\n              Icons.bookmark_outline,\n              color: Color(0xFF7257FF),\n              size: 30,\n            ),\n            onPressed: () {\n              // Handle bookmark\n            },\n          ),\n          Padding(\n            padding: const EdgeInsets.only(bottom: 4.0, right: 4),\n            child: IconButton(\n              icon: Icon(Icons.ios_share, color: Color(0xFF7257FF), size: 30),\n              onPressed: () {\n                // Handle share\n              },\n            ),\n          ),\n        ],\n      ),\n      body: SafeArea(\n        child: ListView(\n          // padding: const EdgeInsets.all(16),\n          children: [\n            // Video Player\n            ClipRRect(\n              child: SizedBox(\n                height: 300,\n                child: // or whatever your video's aspect ratio is\n                    SizedBox(\n                  width: double.infinity,\n\n                  child: Stack(\n                    children: [\n                      // Replace this with your placeholder image URL\n                      Image.network(\n                        'https://picsum/photos/800',\n                        fit: BoxFit.cover,\n                        width: double.infinity,\n                        height: double.infinity,\n                      ),\n\n                      // Optional: Caption like the image\n                      Positioned(\n                        bottom: 40,\n                        left: 150,\n                        right: 150,\n                        child: Container(\n                          padding: EdgeInsets.symmetric(\n                            horizontal: 12,\n                            vertical: 6,\n                          ),\n                          decoration: BoxDecoration(\n                            color: Colors.black.withValues(alpha: 0.5),\n                            borderRadius: BorderRadius.circular(8),\n                          ),\n                          child: Center(\n                            child: Text(\n                              'So, the most important part is...',\n                              style: TextStyle(color: Colors.white),\n                            ),\n                          ),\n                        ),\n                      ),\n\n                      // Optional: Simulated progress bar\n                      Positioned(\n                        bottom: 10,\n                        left: 16,\n                        right: 16,\n                        child: Row(\n                          crossAxisAlignment: CrossAxisAlignment.center,\n                          children: [\n                            // Play icon\n                            IconButton(\n                              hoverColor: Color(\n                                0xFF6E7375,\n                              ).withValues(alpha: 0.5),\n                              onPressed: () {},\n                              icon: Icon(\n                                Icons.play_arrow,\n                                color: Colors.white,\n                                size: 20,\n                              ),\n                            ),\n\n                            // Expanded Progress Bar\n                            Expanded(\n                              child: LinearProgressIndicator(\n                                value: 0.3, // Simulated progress\n                                backgroundColor: Color(0xFF6E7375),\n                                valueColor: AlwaysStoppedAnimation<Color>(\n                                  Color(0xFF7257FF),\n                                ),\n                              ),\n                            ),\n\n                            // Volume icon\n                            IconButton(\n                              hoverColor: Color(\n                                0xFF6E7375,\n                              ).withValues(alpha: 0.5),\n                              onPressed: () {},\n                              icon: Icon(\n                                Icons.volume_up,\n                                color: Colors.white,\n                                size: 18,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 16.0),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  SizedBox(height: 16),\n                  const Text(\n                    \"LIVE DESIGN WITH ALEX\",\n                    style: TextStyle(\n                      fontFamily:\n                          'Plus Jkarta Sans', // from typography/font-family/primary\n                      fontWeight:\n                          FontWeight.bold, // from typography/font-weight/bold\n                      fontSize: 14, // assuming 'sm' maps to 14 (you can adjust)\n                      height: 1.2, // line-height: 120% = 1.2\n                      letterSpacing: 0, // typography/letter-spacing/none\n                      color: Color(0xFF7257FF), // #7257FF color in Flutter\n                      // vertical-align doesn't apply to TextStyle in Flutter\n                    ),\n                  ),\n                  const SizedBox(height: 6),\n                  const Text(\n                    \"Creating Your First Component\",\n                    style: TextStyle(\n                      fontFamily:\n                          'Plus Jakarta Sans', // typography/font-family/primary\n                      fontWeight:\n                          FontWeight.bold, // typography/font-weight/bold\n                      fontSize:\n                          24, // assuming 'xl' maps to 24 (adjust if needed)\n                      height: 1.2, // 120% line-height = 1.2\n                      letterSpacing: 0, // typography/letter-spacing/none\n                      color: Color(0xFF131214), // #131214 color\n                    ),\n                  ),\n                  SizedBox(height: 4),\n                  const Text(\n                    \"125 people are joining · 22 Sep 2024\",\n                    style: TextStyle(\n                      fontFamily: 'Plus Jakarta Sans', // specified font family\n                      fontWeight:\n                          FontWeight.normal, // typography/font-weight/regular\n                      fontSize: 12, // assuming 'xs' = 12 (adjust if needed)\n                      height: 1.0, // 100% line-height = 1.0\n                      letterSpacing: 0, // typography/letter-spacing/none\n                      color: Color(0xFF6E7375), // #6E7375 color\n                    ),\n                  ),\n                  const SizedBox(height: 8),\n\n                  buildHashtagButtons([\n                    \"#designsystem\",\n                    \"#uiux\",\n                    \"#uidesigner\",\n                  ]),\n\n                  const SizedBox(height: 16),\n\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceAround,\n                    children: [\n                      _reactionColumn(\n                        icon: Icons.thumb_up_alt_outlined,\n                        activeIcon: Icons.thumb_up_alt,\n                        label: \"4.4M\",\n                        isActive: isLiked,\n                        onTap: toggleLike,\n                      ),\n                      _reactionColumn(\n                        icon: Icons.thumb_down_alt_outlined,\n                        activeIcon: Icons.thumb_down_alt,\n                        label: \"54K\",\n                        isActive: isDisliked,\n                        onTap: toggleDislike,\n                      ),\n                      _iconText(Icons.share_outlined, \"Share\", () {}),\n                      _iconText(Icons.download_outlined, \"Download\", () {}),\n                      _reactionColumn(\n                        icon: Icons.bookmark_border,\n                        activeIcon: Icons.bookmark,\n                        label: \"Save\",\n                        isActive: isSaved,\n                        onTap: toggleSave,\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 20),\n                  Divider(thickness: 0.5),\n                  SizedBox(height: 8),\n                  Row(\n                    children: [\n                      const CircleAvatar(\n                        radius: 24,\n                        backgroundImage: NetworkImage(\n                          'https://avatar.iran.liara.run/public/boy',\n                        ),\n                      ),\n                      const SizedBox(width: 12),\n                      Expanded(\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            TextButton(\n                              style: TextButton.styleFrom(\n                                padding:\n                                    EdgeInsets.zero, // Removes default padding\n                                minimumSize: Size(\n                                  0,\n                                  0,\n                                ), // Optional: prevents minimum tap area\n                                tapTargetSize:\n                                    MaterialTapTargetSize\n                                        .shrinkWrap, // Shrinks tap area\n                              ),\n                              onPressed: () {},\n                              child: Text(\n                                \"Luke UI\",\n                                style: TextStyle(\n                                  fontFamily: 'Plus Jakarta Sans',\n                                  fontWeight: FontWeight.bold,\n                                  fontSize: 14,\n                                  height: 1.0,\n                                  letterSpacing: 0,\n                                  color: Color(0xFF131214),\n                                ),\n                              ),\n                            ),\n                            SizedBox(height: 4),\n                            Text(\n                              \"31.6M subscribers\",\n                              style: TextStyle(\n                                fontFamily: 'Plus Jakarta Sans', // font-family\n                                fontWeight:\n                                    FontWeight\n                                        .normal, // typography/font-weight/regular\n                                fontSize:\n                                    12, // typography/font-size/xs (assumed 12)\n                                height: 1.0, // line-height: 100%\n                                letterSpacing:\n                                    0, // typography/letter-spacing/none\n                                color: Color(0xFF6E7375), // #6E7375 color\n                              ),\n                            ),\n                            SizedBox(height: 12),\n                          ],\n                        ),\n                      ),\n                      ElevatedButton(\n                        onPressed: toggleSubscribe,\n                        style: ElevatedButton.styleFrom(\n                          shape: RoundedRectangleBorder(\n                            borderRadius: BorderRadius.circular(\n                              48,\n                            ), // radius here\n                          ),\n                          backgroundColor:\n                              isSubscribed\n                                  ? Colors.grey.shade300\n                                  : Color(0xFFF0EDFF),\n                        ),\n                        child: Text(\n                          isSubscribed ? \"Subscribed\" : \"Subscribe\",\n                          style: TextStyle(\n                            color:\n                                isSubscribed\n                                    ? Color(0xFF131214)\n                                    : Color(0xFF7257FF),\n                            fontFamily:\n                                'Plus Jakarta Sans', // typography/font-family/primary\n                            fontWeight:\n                                FontWeight.bold, // typography/font-weight/bold\n                            fontSize:\n                                16, // typography/font-size/md (assumed 16)\n                            height: 1.0, // line-height: 100%\n                            letterSpacing: 0,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                  SizedBox(height: 8),\n                  Divider(thickness: 0.5),\n                  const SizedBox(height: 10),\n\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      const Text(\n                        \"4 Comments\",\n                        style: TextStyle(\n                          fontWeight: FontWeight.bold,\n                          fontSize: 16,\n                        ),\n                      ),\n                      IconButton(\n                        icon: Icon(Icons.unfold_more), // Similar to your icon\n                        onPressed: () {\n                          // Your onPressed logic here\n                        },\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 10),\n                  _comment(\n                    \"That's the power of UI components!\",\n                    'https://avatar.iran.liara.run/public/girl',\n                  ),\n                  _comment(\n                    \"Good documentation saves time and prevents confusion. Here's how to do it right.\",\n                    'https://avatar.iran.liara.run/public/girl',\n                  ),\n                  _comment(\n                    \"That is amazing!\",\n                    'https://avatar.iran.liara.run/public/girl',\n                  ),\n                  _comment(\"Wow!\", 'https://avatar.iran.liara.run/public/girl'),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _comment(String text, String avatarUrl) {\n    return ListTile(\n      contentPadding: EdgeInsets.zero,\n      leading: CircleAvatar(backgroundImage: NetworkImage(avatarUrl)),\n      title: Text(\n        text,\n        style: TextStyle(\n          fontFamily: 'primary', // typography/font-family/primary\n          fontWeight: FontWeight.normal, // typography/font-weight/regular\n          fontSize: 14, // typography/font-size/sm (assumed 14)\n          height: 1.5, // line-height: 150% = 1.5\n          letterSpacing: 0, // typography/letter-spacing/none\n          color: Color(0xFF131214), // #131214\n        ),\n      ),\n    );\n  }\n\n  static Widget _reactionColumn({\n    required IconData icon,\n    required IconData activeIcon,\n    required String label,\n    required bool isActive,\n    required VoidCallback onTap,\n  }) {\n    return InkWell(\n      onTap: onTap,\n      child: Column(\n        children: [\n          Icon(\n            isActive ? activeIcon : icon,\n            color: isActive ? Colors.blue : Colors.black,\n          ),\n          const SizedBox(height: 4),\n          Text(label),\n        ],\n      ),\n    );\n  }\n\n  static Widget _iconText(IconData icon, String label, VoidCallback onTap) {\n    return InkWell(\n      onTap: onTap,\n      child: Column(\n        children: [\n          Icon(icon, color: Colors.black),\n          const SizedBox(height: 4),\n          Text(label),\n        ],\n      ),\n    );\n  }\n\n  Widget buildHashtagButtons(List<String> hashtags) {\n    return Wrap(\n      spacing: 8,\n      children:\n          hashtags.map((tag) {\n            return TextButton(\n              onPressed: () {\n                // You can add custom logic here for each tag\n                debugPrint('Clicked on $tag');\n              },\n              style: TextButton.styleFrom(\n                foregroundColor: Colors.blue,\n                padding: EdgeInsets.zero,\n                minimumSize: const Size(0, 0),\n                tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n              ),\n              child: Text(tag),\n            );\n          }).toList(),\n    );\n  }\n}\n\n\n\nPath: modern/lib/screens/feed/feed_with_categories.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:template_nucleus/components/buttons/custom_chip.dart';\n\n// Main Page with Bottom Navigation\nclass FeedWithCategories extends StatefulWidget {\n  const FeedWithCategories({super.key});\n\n  @override\n  State<FeedWithCategories> createState() => _MainScreenState();\n}\n\nclass _MainScreenState extends State<FeedWithCategories> {\n  int selectedIndex = 0;\n\n  final List<Widget> pages = const [\n    FeedHomePage(),\n    DummyPage(\"Page 1\"),\n    DummyPage(\"Page 2\"),\n    DummyPage(\"Page 3\"),\n    // Real Page\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: pages[selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        type: BottomNavigationBarType.fixed,\n        backgroundColor: Colors.white,\n        elevation: 10,\n        currentIndex: selectedIndex,\n        onTap: (index) => setState(() => selectedIndex = index),\n        selectedItemColor: Color(0xFF7257FF),\n        unselectedItemColor: Colors.grey.shade500,\n        selectedLabelStyle: const TextStyle(fontWeight: FontWeight.w600),\n        unselectedLabelStyle: const TextStyle(fontWeight: FontWeight.w400),\n        showSelectedLabels: true,\n        showUnselectedLabels: true,\n        items: const [\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home_outlined),\n            activeIcon: Icon(Icons.home),\n            label: \"Home\",\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.search_outlined),\n            activeIcon: Icon(Icons.search),\n            label: \"Search\",\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.bookmark_outline),\n            activeIcon: Icon(Icons.bookmark),\n            label: \"Saved\",\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.person_outline),\n            activeIcon: Icon(Icons.person),\n            label: \"Profile\",\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n// Dummy Pages for Bottom Nav\nclass DummyPage extends StatelessWidget {\n  final String title;\n  const DummyPage(this.title, {super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: Center(child: Text(\"$title content here\")),\n    );\n  }\n}\n\n// News Tab Page\nclass FeedHomePage extends StatefulWidget {\n  const FeedHomePage({super.key});\n\n  @override\n  State<FeedHomePage> createState() => _FeedHomePageState();\n}\n\nclass _FeedHomePageState extends State<FeedHomePage>\n    with TickerProviderStateMixin {\n  final List<String> tabs = const [\n    \"Today\",\n    \"Local\",\n    \"Politics\",\n    \"Tech\",\n    \"Culture\",\n  ];\n\n  late TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: tabs.length, vsync: this);\n\n    _tabController.addListener(() {\n      if (_tabController.indexIsChanging == false) {\n        setState(() {});\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Padding(\n          padding: const EdgeInsets.only(top: 24.0),\n          child: const Text(\n            \"News\",\n            style: TextStyle(\n              color: Colors.black,\n              fontFamily: 'Plus Jakarta Sans',\n              fontWeight: FontWeight.bold,\n              fontSize: 24,\n              height: 1.2,\n              letterSpacing: 0.0,\n            ),\n          ),\n        ),\n        backgroundColor: Colors.transparent,\n        elevation: 0,\n        bottom: TabBar(\n          controller: _tabController,\n          splashBorderRadius: BorderRadius.circular(60),\n          labelPadding: EdgeInsets.symmetric(horizontal: 4),\n          dividerColor: Colors.transparent,\n          labelColor: Colors.white,\n          padding: EdgeInsets.zero,\n          indicatorPadding: EdgeInsets.zero,\n          unselectedLabelColor: Colors.black,\n          indicator: BoxDecoration(\n            color: Colors.transparent,\n            borderRadius: BorderRadius.circular(60),\n          ),\n          tabs: List.generate(tabs.length, (index) {\n            final t = tabs[index];\n            return CustomChip(\n              label: t,\n              isSelected: _tabController.index == index,\n              height: 32,\n              selectedColor: const Color(0xFF7257FF),\n              selectedTextColor: Colors.white,\n              unselectedColor: Color(0xFFF0EDFF),\n              unselectedTextColor: const Color(0xFF7257FF),\n            );\n          }),\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: tabs.map((tab) => NewsList(category: tab)).toList(),\n      ),\n    );\n  }\n}\n\n// News List Per Tab\nclass NewsList extends StatelessWidget {\n  final String category;\n  const NewsList({super.key, required this.category});\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      padding: const EdgeInsets.all(16),\n      children: [\n        GestureDetector(\n          onTap: () {},\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              ClipRRect(\n                borderRadius: BorderRadius.circular(16),\n                child: Image.network(\n                  'https://images.unsplash.com/photo-1542751110-97427bbecf20',\n                  height: 200,\n                  width: double.infinity,\n                  fit: BoxFit.cover,\n                ),\n              ),\n              const SizedBox(height: 12),\n              const Text(\n                \"White–labeling: Putting the design system in users' hands\",\n                style: TextStyle(\n                  fontFamily:\n                      'Plus Jakarta Sans', // Replace with actual font name\n                  fontWeight: FontWeight.bold,\n                  fontSize: 18, // lg ≈ 18px (commonly)\n                  height: 1.2, // 120% line height\n                  letterSpacing: 0.0, // none\n                ),\n              ),\n              const SizedBox(height: 4),\n              const Text(\n                \"1h ago · by Troy Corlson\",\n                style: TextStyle(\n                  color: Color(0xFF6E7375),\n                  fontFamily:\n                      'Plus Jakarta Sans', // Replace with actual font name\n                  fontWeight:\n                      FontWeight.normal, // Regular weight = normal = 400\n                  fontSize: 14, // sm ≈ 14px (commonly)\n                  height: 1.0, // 100% line height\n                  letterSpacing: 0.0, // none\n                ),\n              ),\n              const SizedBox(height: 20),\n            ],\n          ),\n        ),\n        NewsTile(\n          title: \"Build a design system with an enterprise scale\",\n          author: \"Isabella Kwai\",\n          time: \"2h ago\",\n          onTap: () {},\n        ),\n        NewsTile(\n          title: \"Create a style guide for consistent branding\",\n          author: \"Tracey Trully\",\n          time: \"3h ago\",\n          onTap: () {},\n        ),\n        NewsTile(\n          title: \"Articulate design specification in Design System\",\n          author: \"Gina Kolata\",\n          time: \"4h ago\",\n          onTap: () {},\n        ),\n      ],\n    );\n  }\n}\n\nclass NewsTile extends StatelessWidget {\n  final String title, author, time;\n  final VoidCallback onTap;\n\n  const NewsTile({\n    super.key,\n    required this.title,\n    required this.author,\n    required this.time,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      onTap: onTap,\n      contentPadding: const EdgeInsets.symmetric(vertical: 8),\n      leading: ClipRRect(\n        borderRadius: BorderRadius.circular(8),\n        child: Image.network(\n          'https://images.unsplash.com/photo-1506765515384-028b60a970df',\n          width: 50,\n          height: 50,\n          fit: BoxFit.cover,\n        ),\n      ),\n      title: Text(\n        title,\n        style: const TextStyle(\n          fontFamily: 'Plus Jakarta Sans', // Replace with actual font family\n          fontWeight: FontWeight.bold,\n          fontSize: 14, // assuming \"sm\" is 14px\n          height: 1.2, // 120% line height\n          letterSpacing: 0, // no additional spacing\n        ),\n      ),\n      subtitle: Text(\n        \"$time · by $author\",\n        style: const TextStyle(\n          color: Color(0xFF6E7375),\n          fontFamily: 'Plus Jakarta Sans',\n          fontWeight: FontWeight.w400, // Regular\n          fontSize: 12, // assuming 'xs' = 12px\n          height: 1.0, // 100% line height\n          letterSpacing: 0, // no extra spacing\n        ),\n      ),\n    );\n  }\n}\n\nclass NewsDetailPage extends StatelessWidget {\n  final String title, author;\n  const NewsDetailPage({super.key, required this.title, required this.author});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\"News Details\")),\n      body: Padding(\n        padding: const EdgeInsets.all(20),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              title,\n              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              \"by $author\",\n              style: const TextStyle(fontSize: 14, color: Colors.grey),\n            ),\n            const SizedBox(height: 20),\n            const Text(\n              \"Here is the full article content... (You can expand this section with actual news content, images, and rich formatting.)\",\n              style: TextStyle(fontSize: 16),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n\n\nPath: modern/lib/components/carousels/feature_cards.dart\n\nimport 'package:flutter/material.dart';\n\nclass FeatureCards extends StatelessWidget {\n  static final List<FeatureItem> _defaultFeatures = [\n    FeatureItem(\n      icon: Icons.email,\n      iconColor: Colors.blue,\n      title: 'Send message',\n      subtitle: 'Connect with your friends',\n    ),\n    FeatureItem(\n      icon: Icons.list,\n      iconColor: Colors.green,\n      title: 'Manage Lists',\n      subtitle: 'Choose how you want to manage',\n    ),\n    FeatureItem(\n      icon: Icons.push_pin,\n      iconColor: Colors.red,\n      title: 'Pin Inspiration',\n      subtitle: 'Make your creations',\n    ),\n  ];\n\n  final List<FeatureItem> features;\n\n  FeatureCards({super.key, List<FeatureItem>? features})\n    : features = features ?? _defaultFeatures;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(16),\n      child: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        physics: const BouncingScrollPhysics(),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children:\n              features\n                  .map(\n                    (feature) => Padding(\n                      padding: const EdgeInsets.only(right: 8),\n                      child: FeatureCardWidget(feature: feature),\n                    ),\n                  )\n                  .toList(),\n        ),\n      ),\n    );\n  }\n}\n\n/// Widget for a single feature card\nclass FeatureCardWidget extends StatelessWidget {\n  final FeatureItem feature;\n\n  const FeatureCardWidget({super.key, required this.feature});\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        return Container(\n          width: 150,\n          decoration: BoxDecoration(\n            color: Colors.white,\n            borderRadius: BorderRadius.circular(16), // corner-radius/lg\n          ),\n          padding: const EdgeInsets.all(16),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            crossAxisAlignment: CrossAxisAlignment.start,\n            // As per justify-content: space-between\n            children: [\n              // Icon container with specified dimensions\n              Container(\n                width: 48,\n                height: 48,\n                decoration: BoxDecoration(\n                  color: feature.iconColor.withValues(alpha: 0.1),\n                  borderRadius: BorderRadius.circular(\n                    24 / 2,\n                  ), // corner-radius/full\n                ),\n                child: Center(\n                  child: Icon(feature.icon, size: 30, color: feature.iconColor),\n                ),\n              ),\n              SizedBox(height: 60),\n              // Title with specified font settings\n              Text(\n                feature.title,\n                style: TextStyle(\n                  fontSize: 16,\n                  fontWeight: FontWeight.bold, // typography/font-weight/bold\n                  height: 1.2, // line-height: 120%\n                  letterSpacing: 0, // typography/letter-spacing/none\n                ),\n                maxLines: 1,\n                overflow: TextOverflow.ellipsis,\n              ),\n              SizedBox(height: 10),\n              // Subtitle with specified font settings\n              Text(\n                feature.subtitle,\n                style: TextStyle(\n                  fontSize: 14,\n                  fontWeight:\n                      FontWeight.normal, // typography/font-weight/regular\n                  height: 1.5, // line-height: 150%\n                  letterSpacing: 0, // typography/letter-spacing/none\n                  color: Colors.grey[600],\n                ),\n                maxLines: 2,\n                overflow: TextOverflow.ellipsis,\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n\n/// Data class to represent a feature item\nclass FeatureItem {\n  final IconData icon;\n  final Color iconColor;\n  final String title;\n  final String subtitle;\n\n  FeatureItem({\n    required this.icon,\n    required this.iconColor,\n    required this.title,\n    required this.subtitle,\n  });\n}\n\n\n\nPath: modern/lib/components/buttons/toggle_button.dart\n\nimport 'package:flutter/material.dart';\n\nclass CustomSwitch extends StatefulWidget {\n  final bool initialValue;\n  final ValueChanged<bool>? onChanged;\n  final Color? activeThumbColor;\n  final Color? activeTrackColor;\n  final Color? inactiveThumbColor;\n  final Color? inactiveTrackColor;\n  final double? splashRadius;\n\n  const CustomSwitch({\n    Key? key,\n    this.initialValue = false,\n    this.onChanged,\n    this.activeThumbColor,\n    this.activeTrackColor,\n    this.inactiveThumbColor,\n    this.inactiveTrackColor,\n    this.splashRadius = 18,\n  }) : super(key: key);\n\n  @override\n  State<CustomSwitch> createState() => _CustomSwitchState();\n}\n\nclass _CustomSwitchState extends State<CustomSwitch> {\n  late bool _isOn;\n\n  @override\n  void initState() {\n    super.initState();\n    _isOn = widget.initialValue;\n  }\n\n  @override\n  void didUpdateWidget(CustomSwitch oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.initialValue != widget.initialValue) {\n      _isOn = widget.initialValue;\n    }\n  }\n\n  void _handleChanged(bool value) {\n    setState(() {\n      _isOn = value;\n    });\n\n    // Call the external callback if provided\n    if (widget.onChanged != null) {\n      widget.onChanged!(value);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n\n    return Switch(\n      value: _isOn,\n      splashRadius: widget.splashRadius,\n      onChanged: _handleChanged,\n      activeColor:\n          widget.activeThumbColor ?? Colors.white, // Active thumb color\n      activeTrackColor:\n          widget.activeTrackColor ?? primaryColor, // Active track color\n      inactiveThumbColor:\n          widget.inactiveThumbColor ?? Colors.grey, // Inactive thumb color\n      inactiveTrackColor:\n          widget.inactiveTrackColor ?? Colors.grey[300], // Inactive track color\n    );\n  }\n}\n\n\n\nPath: modern/lib/components/charts/circular_progress.dart\n\nimport 'package:flutter/material.dart';\nimport 'dart:math' as math;\n\nclass CircularProgressChart extends StatelessWidget {\n  final double percentage;\n  final String title;\n  final String description;\n  final String subtitle;\n\n  const CircularProgressChart({\n    super.key,\n    required this.percentage,\n    this.title = 'Conversion rate',\n    this.description = 'Use this space for description',\n    this.subtitle = 'This week\\'s goal',\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Stack(\n        alignment: Alignment.center,\n        children: [\n          SizedBox(\n            width: 200,\n            height: 200,\n            child: CustomPaint(\n              painter: RoundedCircularProgressPainter(\n                percentage: percentage / 100,\n                strokeWidth: 23,\n                backgroundColor: const Color(0xFF6C63FF).withValues(alpha: 0.2),\n                valueColor: const Color(0xFF6C63FF),\n              ),\n            ),\n          ),\n          Center(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Text(\n                  '${percentage.toInt()}%',\n                  style: const TextStyle(\n                    fontSize: 40,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.black,\n                  ),\n                ),\n                Text(\n                  subtitle,\n                  style: const TextStyle(fontSize: 16, color: Colors.black54),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass RoundedCircularProgressPainter extends CustomPainter {\n  final double percentage;\n  final double strokeWidth;\n  final Color backgroundColor;\n  final Color valueColor;\n\n  RoundedCircularProgressPainter({\n    required this.percentage,\n    required this.strokeWidth,\n    required this.backgroundColor,\n    required this.valueColor,\n  });\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final center = Offset(size.width / 2, size.height / 2);\n    final radius = math.min(size.width / 2, size.height / 2) - strokeWidth / 10;\n    final rect = Rect.fromCircle(center: center, radius: radius);\n\n    // Background circle\n    final backgroundPaint =\n        Paint()\n          ..color = backgroundColor\n          ..style = PaintingStyle.stroke\n          ..strokeWidth = strokeWidth\n          ..strokeCap = StrokeCap.round;\n\n    canvas.drawCircle(center, radius, backgroundPaint);\n\n    // Foreground arc\n    final foregroundPaint =\n        Paint()\n          ..color = valueColor\n          ..style = PaintingStyle.stroke\n          ..strokeWidth = strokeWidth\n          ..strokeCap = StrokeCap.round;\n\n    canvas.drawArc(\n      rect,\n      -math.pi / 2, // Start from the top\n      2 * math.pi * percentage, // Draw this much of the circle\n      false,\n      foregroundPaint,\n    );\n  }\n\n  @override\n  bool shouldRepaint(RoundedCircularProgressPainter oldDelegate) {\n    return oldDelegate.percentage != percentage ||\n        oldDelegate.strokeWidth != strokeWidth ||\n        oldDelegate.backgroundColor != backgroundColor ||\n        oldDelegate.valueColor != valueColor;\n  }\n}\n\n\n"}]},{"id":null,"role":"model","parts":[{"id":null,"text":"Thanks for providing these template files! They give me a much better understanding of the aesthetic and component styling in your UIKit, especially:\n\n*   **`LiveSessionScreen`**: Shows interactive icons, a video player, and a detailed content layout. The use of `Material` and `InkWell` for tap feedback is consistent.\n*   **`FeedWithCategories`**: Demonstrates a `TabBar` with custom chips, and lists with clear, well-structured items, good typography, and image handling.\n*   **`FeatureCards`**: Provides an example of a horizontal `ScrollView` with structured cards that have rounded corners, shadow, and icon styling. This is a good candidate for `AnimatedContainer` or `ScaleTransition` effects.\n*   **`CustomSwitch`**: A basic `Switch` widget, which could be part of a settings screen with animations.\n*   **`CircularProgressChart`**: A custom painter for a circular progress bar. While the painter itself is static, the `percentage` value can be animated.\n\nGiven your request for a \"screen full of animations\" named `test.dart`, and without further specific instructions on the *type* of animations or their *triggers*, I will create a screen that showcases a variety of implicit and explicit animations. The goal is to make it visually engaging while staying true to the `canwa` app's established design language (clean, modern, with a good use of spacing and your primary color).\n\nHere's my plan:\n\n1.  **`lib/Screens/test.dart`**: Create this new file.\n2.  **`main.dart`**: Update the `main.dart` file to include `test.dart` in the `PixelApp` and set it as the `home` screen for immediate preview.\n\n**Proposed Animations for `test.dart`:**\n\n*   **Animated Container**: A card that changes size and color on tap, similar to the `FeatureCardWidget` but with animation.\n*   **Animated Opacity**: A text or icon that fades in and out.\n*   **Animated CrossFade**: To switch between two widgets with a smooth cross-fade effect.\n*   **Hero Animation (Placeholder)**: I'll include a placeholder for a Hero animation, demonstrating how an element could smoothly transition from one screen to this one (though the transition *to* another screen won't be implemented unless requested).\n*   **Animated Builder for Custom Painting**: I'll adapt the `CircularProgressChart` concept to show animated progress using `AnimatedBuilder`.\n*   **Custom Implicit Animations**: I'll create a few custom animated widgets that animate properties like position or rotation based on user interaction (e.g., a floating icon).\n\nI will use your primary color (`0xFF7356FF`) and `GoogleFonts.plusJakartaSansTextTheme()`.\n\nLet's start by creating the `test.dart` file and updating `main.dart`.\n\n<<<PIXEL_FILE_PATH>>>\nlib/Screens/test.dart\n<<<PIXEL_CODE_START>>>\nimport 'package:flutter/material.dart';\nimport 'dart:math' as math;\n\nclass TestScreen extends StatefulWidget {\n  const TestScreen({super.key});\n\n  @override\n  State<TestScreen> createState() => _TestScreenState();\n}\n\nclass _TestScreenState extends State<TestScreen> with TickerProviderStateMixin {\n  // AnimatedContainer properties\n  bool _isExpanded = false;\n  double _animatedCardWidth = 150.0;\n  double _animatedCardHeight = 180.0;\n  Color _animatedCardColor = Colors.white;\n\n  // AnimatedOpacity properties\n  bool _showText = true;\n\n  // AnimatedCrossFade properties\n  bool _showFirstWidget = true;\n\n  // AnimationController for explicit animations (e.g., rotation, progress)\n  late AnimationController _rotationController;\n  late Animation<double> _rotationAnimation;\n\n  late AnimationController _progressController;\n  late Animation<double> _progressAnimation;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Initialize rotation animation controller\n    _rotationController = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..repeat(); // Repeat indefinitely\n\n    _rotationAnimation = Tween<double>(begin: 0, end: 2 * math.pi).animate(_rotationController);\n\n    // Initialize progress animation controller\n    _progressController = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 3),\n    );\n    _progressAnimation = Tween<double>(begin: 0, end: 1.0).animate(_progressController)\n      ..addListener(() {\n        setState(() {}); // Rebuild when animation value changes\n      })\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          _progressController.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          _progressController.forward();\n        }\n      });\n    _progressController.forward(); // Start animation\n  }\n\n  @override\n  void dispose() {\n    _rotationController.dispose();\n    _progressController.dispose();\n    super.dispose();\n  }\n\n  void _toggleAnimatedCard() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n      _animatedCardWidth = _isExpanded ? 200.0 : 150.0;\n      _animatedCardHeight = _isExpanded ? 220.0 : 180.0;\n      _animatedCardColor = _isExpanded ? Theme.of(context).primaryColor.withOpacity(0.8) : Colors.white;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final primaryColor = Theme.of(context).primaryColor;\n    final textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      backgroundColor: Colors.grey[50],\n      appBar: AppBar(\n        scrolledUnderElevation: 0,\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back_ios, color: primaryColor, size: 20),\n          onPressed: () {\n            Navigator.of(context).pop();\n          },\n        ),\n        title: Text(\n          'Animations Showcase',\n          style: textTheme.titleLarge?.copyWith(\n            fontSize: 18,\n            fontWeight: FontWeight.bold,\n            color: Colors.black,\n          ),\n        ),\n        centerTitle: true,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Implicit Animations',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            // Animated Container - resizing and recoloring on tap\n            GestureDetector(\n              onTap: _toggleAnimatedCard,\n              child: AnimatedContainer(\n                duration: const Duration(milliseconds: 400),\n                curve: Curves.easeInOut,\n                width: _animatedCardWidth,\n                height: _animatedCardHeight,\n                decoration: BoxDecoration(\n                  color: _animatedCardColor,\n                  borderRadius: BorderRadius.circular(_isExpanded ? 20 : 16),\n                  boxShadow: [\n                    BoxShadow(\n                      color: (_isExpanded ? primaryColor : Colors.grey)\n                          .withOpacity(0.2),\n                      spreadRadius: _isExpanded ? 3 : 1,\n                      blurRadius: _isExpanded ? 10 : 5,\n                      offset: Offset(0, _isExpanded ? 8 : 3),\n                    ),\n                  ],\n                ),\n                child: Center(\n                  child: Padding(\n                    padding: const EdgeInsets.all(16.0),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(\n                          _isExpanded ? Icons.star : Icons.star_border,\n                          color: _isExpanded ? Colors.white : primaryColor,\n                          size: 40,\n                        ),\n                        const SizedBox(height: 12),\n                        Text(\n                          'Tap to ${_isExpanded ? 'Shrink' : 'Expand'}',\n                          textAlign: TextAlign.center,\n                          style: textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: _isExpanded ? Colors.white : Colors.black,\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            const SizedBox(height: 32),\n\n            Text(\n              'Explicit Animations',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n\n            // Animated Builder for Rotation\n            Container(\n              padding: const EdgeInsets.all(16.0),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(16),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.1),\n                    spreadRadius: 1,\n                    blurRadius: 5,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Row(\n                children: [\n                  AnimatedBuilder(\n                    animation: _rotationAnimation,\n                    builder: (context, child) {\n                      return Transform.rotate(\n                        angle: _rotationAnimation.value,\n                        child: Icon(Icons.cached, size: 50, color: primaryColor),\n                      );\n                    },\n                  ),\n                  const SizedBox(width: 16),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          'Spinning Icon',\n                          style: textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                            color: Colors.black,\n                          ),\n                        ),\n                        const SizedBox(height: 4),\n                        Text(\n                          'Continuous rotation using an AnimationController.',\n                          style: textTheme.bodyMedium?.copyWith(\n                            color: Colors.grey[600],\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            // Animated Builder for Circular Progress\n            Container(\n              padding: const EdgeInsets.all(16.0),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(16),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.1),\n                    spreadRadius: 1,\n                    blurRadius: 5,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Animated Progress',\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  Center(\n                    child: SizedBox(\n                      width: 150,\n                      height: 150,\n                      child: AnimatedBuilder(\n                        animation: _progressAnimation,\n                        builder: (context, child) {\n                          return CustomPaint(\n                            painter: RoundedCircularProgressPainter(\n                              percentage: _progressAnimation.value,\n                              strokeWidth: 18,\n                              backgroundColor: primaryColor.withOpacity(0.2),\n                              valueColor: primaryColor,\n                            ),\n                            child: Center(\n                              child: Text(\n                                '${(_progressAnimation.value * 100).toInt()}%',\n                                style: textTheme.headlineMedium?.copyWith(\n                                  fontWeight: FontWeight.bold,\n                                  color: Colors.black,\n                                ),\n                              ),\n                            ),\n                          );\n                        },\n                      ),\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Shows progress from 0% to 100% and back, using an AnimationController and CustomPainter.',\n                    style: textTheme.bodyMedium?.copyWith(\n                      color: Colors.grey[600],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 32),\n\n            Text(\n              'Other Animations',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n\n            // AnimatedOpacity for text\n            Container(\n              padding: const EdgeInsets.all(16.0),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(16),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.1),\n                    spreadRadius: 1,\n                    blurRadius: 5,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Fading Text',\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  AnimatedOpacity(\n                    opacity: _showText ? 1.0 : 0.0,\n                    duration: const Duration(seconds: 1),\n                    child: Text(\n                      'This text fades in and out when the button is pressed.',\n                      style: textTheme.bodyLarge?.copyWith(\n                        color: Colors.grey[700],\n                      ),\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  ElevatedButton(\n                    onPressed: () {\n                      setState(() {\n                        _showText = !_showText;\n                      });\n                    },\n                    child: Text(_showText ? 'Hide Text' : 'Show Text'),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            // AnimatedCrossFade for swapping widgets\n            Container(\n              padding: const EdgeInsets.all(16.0),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(16),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.1),\n                    spreadRadius: 1,\n                    blurRadius: 5,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Cross-fading Widgets',\n                    style: textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      color: Colors.black,\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  AnimatedCrossFade(\n                    firstChild: Container(\n                      width: double.infinity,\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: primaryColor.withOpacity(0.1),\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                      child: Text(\n                        'This is the first widget!',\n                        textAlign: TextAlign.center,\n                        style: textTheme.bodyLarge?.copyWith(\n                          color: primaryColor,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    secondChild: Container(\n                      width: double.infinity,\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: Colors.green.withOpacity(0.1),\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                      child: Text(\n                        'This is the second widget!',\n                        textAlign: TextAlign.center,\n                        style: textTheme.bodyLarge?.copyWith(\n                          color: Colors.green,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    crossFadeState: _showFirstWidget ? CrossFadeState.showFirst : CrossFadeState.showSecond,\n                    duration: const Duration(seconds: 1),\n                  ),\n                  const SizedBox(height: 12),\n                  ElevatedButton(\n                    onPressed: () {\n                      setState(() {\n                        _showFirstWidget = !_showFirstWidget;\n                      });\n                    },\n                    child: Text('Toggle Widgets'),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            // Hero Animation Placeholder\n            Text(\n              'Hero Animation (Concept)',\n              style: textTheme.titleLarge?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            const SizedBox(height: 16),\n            GestureDetector(\n              onTap: () {\n                // In a real app, you would navigate to a new screen here:\n                // Navigator.push(context, MaterialPageRoute(builder: (context) => DetailScreen()));\n                ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(content: Text('Imagine this image flies to a new screen!')),\n                );\n              },\n              child: Hero(\n                tag: 'animatedImage',\n                child: ClipRRect(\n                  borderRadius: BorderRadius.circular(16),\n                  child: Image.network(\n                    'https://picsum.photos/id/405/200/150',\n                    width: 200,\n                    height: 150,\n                    fit: BoxFit.cover,\n                  ),\n                ),\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'Tap the image to simulate a Hero animation transition.',\n              style: textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),\n            ),\n            const SizedBox(height: 24),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n\n// Custom Painter for Circular Progress (adapted from UIKit)\nclass RoundedCircularProgressPainter extends CustomPainter {\n  final double percentage; // 0.0 to 1.0\n  final double strokeWidth;\n  final Color backgroundColor;\n  final Color valueColor;\n\n  RoundedCircularProgressPainter({\n    required this.percentage,\n    required this.strokeWidth,\n    required this.backgroundColor,\n    required this.valueColor,\n  });\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final center = Offset(size.width / 2, size.height / 2);\n    final radius = math.min(size.width / 2, size.height / 2) - strokeWidth / 2; // Adjusted for stroke width\n\n    // Background circle\n    final backgroundPaint = Paint()\n      ..color = backgroundColor\n      ..style = PaintingStyle.stroke\n      ..strokeWidth = strokeWidth\n      ..strokeCap = StrokeCap.round;\n\n    canvas.drawCircle(center, radius, backgroundPaint);\n\n    // Foreground arc\n    final foregroundPaint = Paint()\n      ..color = valueColor\n      ..style = PaintingStyle.stroke\n      ..strokeWidth = strokeWidth\n      ..strokeCap = StrokeCap.round;\n\n    canvas.drawArc(\n      Rect.fromCircle(center: center, radius: radius),\n      -math.pi / 2, // Start from the top\n      2 * math.pi * percentage, // Draw this much of the circle\n      false,\n      foregroundPaint,\n    );\n  }\n\n  @override\n  bool shouldRepaint(RoundedCircularProgressPainter oldDelegate) {\n    return oldDelegate.percentage != percentage ||\n        oldDelegate.strokeWidth != strokeWidth ||\n        oldDelegate.backgroundColor != backgroundColor ||\n        oldDelegate.valueColor != valueColor;\n  }\n}\n\n<<<PIXEL_CODE_END>>>\n\nNow, I'll modify `main.dart` to make `TestScreen` the initial screen for quick viewing.\n\n<<<PIXEL_FILE_PATH>>>\nlib/main.dart\n<<<PIXEL_CODE_START>>>\nimport 'package:canwa/Screens/add_new_card_screen.dart';\nimport 'package:canwa/Screens/add_question_screen.dart';\nimport 'package:canwa/Screens/checkout_screen.dart';\n\nimport 'package:canwa/Screens/continue_learning_screen.dart';\nimport 'package:canwa/Screens/course_detail_screen.dart';\nimport 'package:canwa/Screens/course_reminders_screen.dart';\nimport 'package:canwa/Screens/create_new_password_screen.dart';\nimport 'package:canwa/Screens/edit_profile_screen.dart';\nimport 'package:canwa/Screens/faq_screen.dart';\nimport 'package:canwa/Screens/forgot_password_screen.dart';\nimport 'package:canwa/Screens/help_and_support_screen.dart';\nimport 'package:canwa/Screens/home_screen.dart';\nimport 'package:canwa/Screens/home_screen_2.dart';\nimport 'package:canwa/Screens/language_screen.dart';\nimport 'package:canwa/Screens/learning_interests_screen.dart';\nimport 'package:canwa/Screens/learning_screen.dart';\nimport 'package:canwa/Screens/login_screen.dart';\nimport 'package:canwa/Screens/my_course_screen.dart';\nimport 'package:canwa/Screens/notification_screen.dart';\nimport 'package:canwa/Screens/onboarding_screen.dart';\nimport 'package:canwa/Screens/payment_method_screen.dart';\nimport 'package:canwa/Screens/profile_mentor_screen.dart';\nimport 'package:canwa/Screens/profile_screen.dart';\nimport 'package:canwa/Screens/recommendation_screen.dart';\nimport 'package:canwa/Screens/replay_question_screen.dart';\nimport 'package:canwa/Screens/review_screen.dart';\nimport 'package:canwa/Screens/search_screen.dart';\nimport 'package:canwa/Screens/signup_screen.dart';\nimport 'package:canwa/Screens/verification_code_screen.dart';\nimport 'package:canwa/Screens/wishlist_screen.dart';\nimport 'package:canwa/Screens/test.dart'; // Import the new test.dart\nimport 'package:flutter/material.dart';\nimport 'package:pixel_preview/pixel_app/pixel_group.dart';\nimport 'package:pixel_preview/pixel_preview.dart';\nimport 'package:google_fonts/google_fonts.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const Color primaryColor = Color(0xFF7356FF); // User's chosen primary color\n\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'CourseCamp', // Updated title\n      theme: ThemeData(\n        primaryColor: primaryColor,\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: primaryColor,\n          brightness: ThemeData.light().brightness,\n          onPrimary: Colors.white,\n          surface: Colors.white,\n        ),\n        appBarTheme: const AppBarTheme(\n          backgroundColor: Colors.white,\n          elevation: 0,\n          iconTheme: IconThemeData(\n            color: Color(0xFF000000),\n          ), // Set icon color to black\n        ),\n        elevatedButtonTheme: ElevatedButtonThemeData(\n          style: ElevatedButton.styleFrom(\n            backgroundColor: primaryColor,\n            foregroundColor: Colors.white,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(12.0),\n            ),\n          ),\n        ),\n        textButtonTheme: TextButtonThemeData(\n          style: TextButton.styleFrom(foregroundColor: primaryColor),\n        ),\n        outlinedButtonTheme: OutlinedButtonThemeData(\n          style: OutlinedButton.styleFrom(\n            foregroundColor:\n                Colors\n                    .black, // Changed to black for social buttons as per image\n            side: BorderSide(color: Colors.grey[300]!), // Light grey border\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(12.0),\n            ),\n          ),\n        ),\n        floatingActionButtonTheme: FloatingActionButtonThemeData(\n          backgroundColor: primaryColor,\n          foregroundColor: Colors.white,\n        ),\n        filledButtonTheme: FilledButtonThemeData(\n          style: FilledButton.styleFrom(\n            backgroundColor: primaryColor,\n            foregroundColor: Colors.white,\n          ),\n        ),\n        textTheme:\n            GoogleFonts.plusJakartaSansTextTheme(), // Apply user's text theme\n      ),\n      home: PixelApp(\n        iFrameMode: true,\n        groups: [\n          PixelGroup(\n            title: 'Animation Showcase',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const TestScreen(), // Set TestScreen as the initial child\n              ),\n            ],\n          ),\n          PixelGroup(\n            title: 'Onboarding & Authentication',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const OnboardingScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const LoginScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const SignupScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ForgotPasswordScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const OtpScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const CreateNewPasswordScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const LearningInterestsScreen(),\n              ),\n            ],\n          ),\n          PixelGroup(\n            title: 'Core App Screens',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const HomeScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const HomeScreen2(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const SearchScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const MyCourseScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const WishlistScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ProfileScreen(),\n              ),\n            ],\n          ),\n          PixelGroup(\n            title: 'Course & Learning',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const CourseDetailScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const LearningScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ContinueLearningScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const CourseRemindersScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const AddQuestionScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ReplayQuestionScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ReviewScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const RecommendationScreen(),\n              ),\n            ],\n          ),\n          PixelGroup(\n            title: 'Profile & Settings',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const EditProfileScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const ProfileMentorScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const LanguageScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const NotificationScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const FaqScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const HelpAndSupportScreen(),\n              ),\n            ],\n          ),\n          PixelGroup(\n            title: 'Payment & Checkout',\n            children: [\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const PaymentMethodScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const AddNewCardScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const CheckoutScreen(),\n              ),\n              PixelPreview(\n                presets: ScreenPresets(),\n                enabled: true,\n                child: const WishlistScreen(),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n<<<PIXEL_CODE_END>>>\n<<<PIXEL_USER_INFORM_START>>>\nI've created a new screen `lib/Screens/test.dart` that demonstrates various animation types:\n\n*   **Implicit Animations**: An `AnimatedContainer` that changes size, color, and border radius when tapped.\n*   **Explicit Animations**:\n    *   An `AnimatedBuilder` that continuously rotates an icon.\n    *   An `AnimatedBuilder` driving a `CustomPaint` for a circular progress bar, animating its fill percentage.\n*   **Other Animations**:\n    *   `AnimatedOpacity` to fade text in and out.\n    *   `AnimatedCrossFade` to smoothly transition between two different widgets.\n*   **Hero Animation (Concept)**: A placeholder Hero animation to show how elements can transition between screens, with a snackbar message on tap.\n\nI've also updated `lib/main.dart` to set `TestScreen()` as the default screen displayed in the \"Animation Showcase\" PixelGroup, so you can see the animations immediately.\n\nFeel free to interact with the elements on the screen to observe the animations! If you have specific animation types or interactions in mind, please let me know, and I can tailor the screen further.\n<<<PIXEL_USER_INFORM_END>>>"}]}]